{"version":3,"file":"main.9536cb9e3415ea4e2edb.js","mappings":";;;;;AA8BA;AACA;;;;;;;;;;;ACnBA;;;;;;;;ACoNA;;;;;;;;;;;;;;;;;;AC7MA;;;;AAwEA;AAIA;;;AAGA;AAGA;AClGA;;AC0EA;AACA;;;;;;AAQA;;;AAKA;;;;AAMA;;;;;;AAOA;;;;;AC3CA;AACA;;;;;;;AC2DA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;AAeA;;AAIA;;;;;;;;ACxFA;;AAEA;;;ACxEA;;;;AAMA;;;;AAVA;;;;AAsBA;;;;;;;AASA;;;;;;;;AAYA;;AAGA;;;;;ACsBA;;AAIA;;;;AAIA;;ACOA;;;AAKA;;AAIA;;AAIA;;;;;;;;;;;ACyDA;;;;AAMA;;;;AC1BA;;;AAGA;ACnIA;;;;;;;;;;;AC+FA;;AAIA;;;AAGA;ACjGA;;;;ACWA;;;;;;AChBA;;;;ACSA;;;;;;ACDA;;;;ACJA;;;;ACCA;;;;ACIA;;;;;;;;;;;ACFA;;;;;;ACHA;;;;;;;;;;ACAA;;;;ACOA;;;ACAA;;;;;ACEA;;;;;;;;;;;ACsIA;;;;ACjIA;;;;;AAoHA;;;;AClIA;;;;ACCA;;;;AAoEA;;;;;;AAMA;AAGA;;;ACvEA;;;;;ACFA;;;;;;ACVA;;;;AC4BA;;;;;ACkDA;;;;;AAKA;AAGA;;;;AAMA;;;;AAMA;AAGA;;;;AAMA;;;;;AAKA;AChHA;;;;;;;;;;;;;;;;;;;;;;;ACmDA;;;;;;;;;;AC0QA;;;;AASA;;;;AAMA;;AAIA;;;;;AAOA;;;;;;ACjMA;AAGA;;AChJA;;;;;;;;;;;;ACmBA;;;;AAMA;;;AAGA;AAGA;;;AAGA;AAGA;;;AAKA;;;AC3BA;;;;;AAmMA;;AAIA;;;;;;AAQA;;;;AAMA;;AAIA;;AAIA;;AAIA;;AAIA;;;;ACvQA;;ACqJA;;;ACrJA;;;;;;;;;;;ACgIA;;;;AAIA;;AAIA;;;AAKA;;;;AAMA;;;;;AAOA;;AAIA;;;;;;;;AC7DA;AAGA;;;AAKA;;AAIA;;AC7CA;;;;;ACpDA;AAQA;ACRA;;;;AA2EA;;;;ACvDA;;;;;;;;AC4CA;AAGA;;;;;;;;;;;AChEA;ACoFA;;;;;;AAMA;AACA;;;;;AAQA;;;;;AAKA;AACA;;AAIA;;AA9BA;AAAA;AAkCA;;AAIA;;;AAMA;AACA;AAIA;AAGA;;AAKA;AAEA;;AAEA;AACA;AAEA;;AAEA;;AAGA;;;;;;;;AC7EA;;AAIA;;AClBA;;;;;;;;;;AAYA;;AAWA;;;;;ACNA;;AAIA;;;AAKA;;;AAKA;;AC3FA;;ACFA;;AAaA;;AAKA;;;;AASA;;;;AAIA;;AAOA;;;AAGA;;;AC3CA;;AAaA;;;;;;;;;;;;;;ACHA","sources":["webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/ArqueroDetailsList/renderers/CommandBarContainer.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/ArqueroDetailsList/renderers/EmptyCell.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/ArqueroDetailsList/ArqueroDetailsList.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/ArqueroTableHeader/TableName.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/ArqueroTableHeader/constants.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/ArqueroTableHeader/ArqueroTableHeader.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/CommandBar/CommandBar.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/Guidance/Guidance.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/Steps/StepSelector/StepSelector.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/common/styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/controls/ColumnarMenu/ColumnarMenuList.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/controls/GroupHeader/GroupHeader.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/shared/FilterFunction/FilterFunction.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Filter/Filter.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Binarize/Binarize.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/controls/MultiDropdown.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/shared/ColumnListInputs/ColumnListInputs.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Convert/Convert.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/ColumnListOperation/ColumnListOperation.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Erase/Erase.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Fetch/Fetch.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Fill/Fill.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Fold/Fold.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Impute/Impute.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Join/Join.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Lookup/Lookup.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/OneHot/OneHot.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/controls/SortInstruction.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Orderby/Orderby.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Pivot/Pivot.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Recode/Recode.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Rename/Rename.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Rollup/Rollup.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Sample/Sample.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Spread/Spread.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Unfold/Unfold.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/NoParameters/NoParameters.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/selectStepComponent.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/VerbDescription/VerbDescription.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Aggregate/AggregateDescription.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/Steps/StepComponent/StepComponent.tsx","webpack://@data-wrangling-components/webapp/./src/pages/DebugPage/ControlBar.tsx","webpack://@data-wrangling-components/webapp/./src/pages/DebugPage/Table.tsx","webpack://@data-wrangling-components/webapp/./src/pages/DebugPage/InputTables.tsx","webpack://@data-wrangling-components/webapp/./src/pages/DebugPage/Section.tsx","webpack://@data-wrangling-components/webapp/./src/pages/DebugPage/DebugPage.tsx","webpack://@data-wrangling-components/webapp/./src/pages/DebugPage/README.md","webpack://@data-wrangling-components/webapp/./src/pages/PerfPage/PerfPage.tsx","webpack://@data-wrangling-components/webapp/./src/pages/PerfPage/README.md","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/TableTransformModal/TableTransformModal.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/ColumnTransformModal/ColumnTransformModal.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/Steps/StepCard/StepCard.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/PrepareData/DetailText/DetailText.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/Steps/StepsList/StepsList.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/Steps/ManageSteps/ManageSteps.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/PrepareData/PreviewTable/PreviewTable.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/PrepareData/TableListBar/TableListBar.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/PrepareData/PrepareDataFull/PrepareDataFull.tsx","webpack://@data-wrangling-components/webapp/./src/pages/PrepareDataPage/PrepareDataPage.tsx","webpack://@data-wrangling-components/webapp/./src/components/Footer/Footer.tsx","webpack://@data-wrangling-components/webapp/./src/components/NavPanel/NavPanel.tsx","webpack://@data-wrangling-components/webapp/./src/components/NavBar/NavBar.tsx","webpack://@data-wrangling-components/webapp/./src/components/App/Header.tsx","webpack://@data-wrangling-components/webapp/./src/components/App/Layout.tsx","webpack://@data-wrangling-components/webapp/./src/components/App/App.tsx"],"sourcesContent":["/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { IDetailsColumnProps, IRenderFunction } from '@fluentui/react'\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\ninterface CommandBarContainerProps {\n\tprops: IDetailsColumnProps\n\trenderers: IRenderFunction<IDetailsColumnProps>[]\n}\n\nexport const CommandBarContainer: React.FC<CommandBarContainerProps> = memo(\n\tfunction CommandBarContainer({ props, renderers }) {\n\t\treturn (\n\t\t\t<Container className=\"header-command-bar\">\n\t\t\t\t{renderers.map((renderer, i) => (\n\t\t\t\t\t<Command key={i}>{renderer(props)}</Command>\n\t\t\t\t))}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Command = styled.div``\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\tborder-top: 1px solid ${({ theme }) => theme.application().faint().hex()};\n\tborder-bottom: 1px solid ${({ theme }) => theme.application().faint().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { useThematic } from '@thematic/react'\nimport { memo, useMemo } from 'react'\n\nimport type { FormattedCellProps } from './types.js'\n\n/**\n * Standard rendering of Empty values.\n */\nexport const EmptyCell: React.FC<FormattedCellProps> = memo(function EmptyCell({\n\ttextAlign,\n}) {\n\tconst theme = useThematic()\n\tconst style = useMemo(\n\t\t() => ({\n\t\t\twidth: '100%',\n\t\t\ttextAlign,\n\t\t\tcolor: theme.application().lowContrast().hex(),\n\t\t}),\n\t\t[theme, textAlign],\n\t)\n\treturn <div style={style}>&mdash;</div>\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport type { IDetailsListStyles } from '@fluentui/react'\nimport {\n\tConstrainMode,\n\tDetailsList,\n\tDetailsListLayoutMode,\n\tSelectionMode,\n} from '@fluentui/react'\nimport type { RowObject } from 'arquero/dist/types/table/table'\nimport { memo, useCallback, useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { groupBuilder } from '../common/index.js'\nimport {\n\tuseColumns,\n\tuseDetailsHeaderRenderer,\n\tuseDetailsListStyles,\n\tuseGroupHeaderRenderer,\n\tuseSlicedTable,\n\tuseSortedGroups,\n\tuseSortedTable,\n\tuseSortHandling,\n\tuseStripedRowsRenderer,\n\tuseSubsetTable,\n\tuseTableMetadata,\n} from './hooks/index.js'\nimport type { ArqueroDetailsListProps, DetailsListFeatures } from './types.js'\nimport { debounceFn } from './util/index.js'\n\n/**\n * Renders an arquero table using a fluent DetailsList.\n */\nexport const ArqueroDetailsList: React.FC<ArqueroDetailsListProps> = memo(\n\tfunction ArqueroDetailsList({\n\t\ttable,\n\t\tfeatures = {},\n\t\tmetadata,\n\t\toffset = 0,\n\t\tlimit = Infinity,\n\t\tincludeAllColumns = true,\n\t\tvisibleColumns,\n\t\tisSortable = false,\n\t\tisStriped = false,\n\t\tisColumnClickable = false,\n\t\tshowColumnBorders = false,\n\t\tselectedColumn,\n\t\tonColumnClick,\n\t\tonCellDropdownSelect,\n\t\tonRenderGroupHeader,\n\t\tonChangeMetadata,\n\t\t// extract props we want to set data-centric defaults for\n\t\tselectionMode = SelectionMode.none,\n\t\tlayoutMode = DetailsListLayoutMode.fixedColumns,\n\t\tcolumns,\n\t\tonColumnHeaderClick,\n\t\tstyles,\n\t\tisHeadersFixed = false,\n\t\tcompact = false,\n\t\tisResizable = true,\n\t\t// passthrough the remainder as props\n\t\t...props\n\t}) {\n\t\tconst [version, setVersion] = useState(0)\n\t\tconst { sortColumn, sortDirection, handleColumnHeaderClick } =\n\t\t\tuseSortHandling(isSortable, onColumnHeaderClick)\n\n\t\t// first subset the table using the visible columns\n\t\t// this will prevent any further operations on columns we aren't going to show\n\t\tconst subset = useSubsetTable(table, visibleColumns)\n\t\t// sort the table internally\n\t\t// note that this is different than the orderby of a pipeline step\n\t\t// this is a temporary sort only for the table display\n\t\tconst sorted = useSortedTable(subset, sortColumn, sortDirection)\n\t\t// slice any potential page\n\t\tconst sliced = useSlicedTable(sorted, offset, limit)\n\t\t// last, copy these items to actual JS objects for the DetailsList\n\t\tconst items = useMemo(() => sliced.objects(), [sliced])\n\n\t\t// if the table is grouped, groups the information in a way we can iterate\n\t\tconst groupedEntries = useMemo(\n\t\t\t() =>\n\t\t\t\ttable.isGrouped() ? sliced.objects({ grouped: 'entries' }) : undefined,\n\t\t\t[sliced, table],\n\t\t)\n\n\t\t// sorts first level group headers\n\t\tconst sortedGroups = useSortedGroups(\n\t\t\ttable,\n\t\t\tsortColumn,\n\t\t\tsortDirection,\n\t\t\tgroupedEntries,\n\t\t)\n\n\t\tconst computedMetadata = useTableMetadata(\n\t\t\ttable,\n\t\t\tmetadata,\n\t\t\tanyStatsFeatures(features),\n\t\t\tonChangeMetadata,\n\t\t)\n\n\t\tconst isDefaultHeaderClickable = useMemo((): any => {\n\t\t\treturn isSortable || isColumnClickable || !!onColumnHeaderClick\n\t\t}, [isSortable, isColumnClickable, onColumnHeaderClick])\n\n\t\tconst onColumnResize = useCallback(\n\t\t\t(column, newWidth) => {\n\t\t\t\tconst set = () => setVersion(prev => prev + 1)\n\t\t\t\tif (column.currentWidth !== newWidth) {\n\t\t\t\t\tdebounceFn(set)\n\t\t\t\t}\n\t\t\t},\n\t\t\t[setVersion],\n\t\t)\n\n\t\tconst displayColumns = useColumns(\n\t\t\ttable,\n\t\t\tcomputedMetadata,\n\t\t\tcolumns,\n\t\t\tvisibleColumns,\n\t\t\thandleColumnHeaderClick,\n\t\t\t{\n\t\t\t\tfeatures,\n\t\t\t\tsortColumn,\n\t\t\t\tsortDirection,\n\t\t\t\tselectedColumn,\n\t\t\t\tonColumnClick,\n\t\t\t\tonCellDropdownSelect,\n\t\t\t\tisDefaultHeaderClickable,\n\t\t\t\tincludeAllColumns,\n\t\t\t\tisColumnClickable,\n\t\t\t\tshowColumnBorders,\n\t\t\t\tcompact,\n\t\t\t\tisResizable,\n\t\t\t},\n\t\t)\n\n\t\tconst headerStyle = useDetailsListStyles(\n\t\t\tisHeadersFixed,\n\t\t\tfeatures,\n\t\t\tstyles as IDetailsListStyles,\n\t\t\t!!onColumnClick,\n\t\t\tcompact,\n\t\t)\n\n\t\tconst renderRow = useStripedRowsRenderer(isStriped, showColumnBorders)\n\t\tconst renderDetailsHeader = useDetailsHeaderRenderer()\n\t\tconst renderGroupHeader = useGroupHeaderRenderer(\n\t\t\ttable,\n\t\t\tcomputedMetadata,\n\t\t\tonRenderGroupHeader,\n\t\t\tfeatures.lazyLoadGroups,\n\t\t)\n\n\t\tconst groups = useMemo(() => {\n\t\t\tif (!sliced.isGrouped()) {\n\t\t\t\treturn undefined\n\t\t\t}\n\n\t\t\tconst existingGroups = sliced.groups()\n\t\t\tconst totalLevelCount = existingGroups.names.length\n\n\t\t\treturn sortedGroups?.map((row: RowObject) => {\n\t\t\t\tconst initialLevel = 0\n\t\t\t\treturn groupBuilder(\n\t\t\t\t\trow,\n\t\t\t\t\texistingGroups,\n\t\t\t\t\tinitialLevel,\n\t\t\t\t\ttotalLevelCount,\n\t\t\t\t\titems,\n\t\t\t\t\tsortDirection,\n\t\t\t\t\tfeatures.lazyLoadGroups,\n\t\t\t\t\tsortColumn,\n\t\t\t\t)\n\t\t\t})\n\t\t}, [sliced, sortedGroups, items, sortColumn, sortDirection, features])\n\t\t// as in FluentUI documentation, when updating item we can update the list items with a spread operator.\n\t\t// since when adding a new column we're changing the columns prop too, this approach doesn't work for that.\n\t\t// a workaround found in the issues suggest to use this version property to use as comparison to force re-render\n\t\tuseEffect(() => {\n\t\t\tsetVersion(prev => prev + 1)\n\t\t}, [columns, table, compact])\n\n\t\treturn (\n\t\t\t<DetailsWrapper data-is-scrollable=\"true\">\n\t\t\t\t<DetailsList\n\t\t\t\t\titems={[...items]}\n\t\t\t\t\tselectionMode={selectionMode}\n\t\t\t\t\tlayoutMode={layoutMode}\n\t\t\t\t\tgroups={groups}\n\t\t\t\t\tgetKey={(_: any, index?: number) => {\n\t\t\t\t\t\treturn (index as number).toString()\n\t\t\t\t\t}} //To be sure that every key is unique\n\t\t\t\t\tgroupProps={{\n\t\t\t\t\t\tonRenderHeader: renderGroupHeader,\n\t\t\t\t\t}}\n\t\t\t\t\tcolumns={displayColumns}\n\t\t\t\t\tconstrainMode={ConstrainMode.unconstrained}\n\t\t\t\t\tonRenderRow={renderRow}\n\t\t\t\t\tonRenderDetailsHeader={renderDetailsHeader}\n\t\t\t\t\tonColumnResize={onColumnResize}\n\t\t\t\t\tcompact={compact}\n\t\t\t\t\t{...props}\n\t\t\t\t\tlistProps={{\n\t\t\t\t\t\tversion,\n\t\t\t\t\t}}\n\t\t\t\t\tstyles={headerStyle}\n\t\t\t\t/>\n\t\t\t</DetailsWrapper>\n\t\t)\n\t},\n)\n\nconst DetailsWrapper = styled.div`\n\theight: inherit;\n\tposition: relative;\n\tmax-height: inherit;\n\toverflow-y: auto;\n\toverflow-x: auto;\n\n\tspan.ms-DetailsHeader-cellTitle {\n\t\tbackground-color: ${({ theme }) => theme.application().background().hex()};\n\t}\n\n\t.ms-List-cell {\n\t\tmin-height: unset;\n\t}\n\n\t.ms-CommandBar {\n\t\tpadding: unset;\n\t}\n\n\t.ms-OverflowSet {\n\t\tjustify-content: center;\n\t}\n`\n\nfunction anyStatsFeatures(features?: DetailsListFeatures) {\n\treturn Object.values(features || {}).some(v => v === true)\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { memo, useCallback, useEffect, useState } from 'react'\nimport { Else, If, Then } from 'react-if'\nimport styled from 'styled-components'\n\nimport { RenameCallout } from './RenameCallout.js'\n\ninterface TableNameProps {\n\tonRenameTable?: (name: string) => void\n\tname?: string\n\tcolor?: string\n}\n\n/**\n * Renders the table name if passed, or the option to rename the name if the function\n * onRenameTable is passed to be called when clicking save or pressing enter on the callout\n */\nexport const TableName: React.FC<TableNameProps> = memo(function TableName({\n\tonRenameTable,\n\tname,\n\tcolor,\n}) {\n\tconst [isEditing, setIsEditing] = useState(false)\n\tconst [editedName, setEditedName] = useState(name || '')\n\n\tuseEffect(() => {\n\t\tsetEditedName(name as string)\n\t}, [name, setEditedName])\n\n\tconst onChange = useCallback(\n\t\t(_e: any, value?: string) => {\n\t\t\tsetEditedName(value as string)\n\t\t},\n\t\t[setEditedName],\n\t)\n\n\tconst onSend = useCallback(\n\t\t(newName?: string) => {\n\t\t\t// if the user enters an empty value, save the previous value\n\t\t\tconst incomingName = (!newName ? name : newName) as string\n\t\t\tonRenameTable && onRenameTable(incomingName)\n\t\t\tsetIsEditing(false)\n\t\t\tsetEditedName(incomingName)\n\t\t},\n\t\t[onRenameTable, setIsEditing, setEditedName, name],\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<If condition={!!onRenameTable}>\n\t\t\t\t<Then>\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<H3Editable\n\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\tid=\"editName\"\n\t\t\t\t\t\t\ttitle=\"Edit\"\n\t\t\t\t\t\t\tonClick={() => setIsEditing(true)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t</H3Editable>\n\t\t\t\t\t\t<If condition={isEditing}>\n\t\t\t\t\t\t\t<Then>\n\t\t\t\t\t\t\t\t<RenameCallout\n\t\t\t\t\t\t\t\t\tonSend={onSend}\n\t\t\t\t\t\t\t\t\teditedName={editedName}\n\t\t\t\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\t\t\t\tname={name}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Then>\n\t\t\t\t\t\t</If>\n\t\t\t\t\t</Container>\n\t\t\t\t</Then>\n\t\t\t\t<Else>\n\t\t\t\t\t<If condition={name}>\n\t\t\t\t\t\t<Then>\n\t\t\t\t\t\t\t<H3 color={color}>{name}</H3>\n\t\t\t\t\t\t</Then>\n\t\t\t\t\t</If>\n\t\t\t\t</Else>\n\t\t\t</If>\n\t\t</Container>\n\t)\n})\n\nconst H3 = styled.h3<{ color?: string }>`\n\tfont-weight: normal;\n\tfont-size: 0.8em;\n\tmargin-right: 8px;\n\tcolor: ${({ theme, color }) =>\n\t\tcolor || theme.application().background().hex()};\n`\n\nconst H3Editable = styled(H3)`\n\tcursor: pointer;\n\tborder-bottom: 1px dotted\n\t\t${({ theme }) => theme.application().background().hex()};\n`\n\nconst Container = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nexport const HEIGHT = 36\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { HEIGHT } from './constants.js'\nimport {\n\tuseColorDefaults,\n\tuseColumnCounts,\n\tuseRowCounts,\n} from './hooks/index.js'\nimport type { ArqueroTableHeaderProps } from './index.js'\nimport { TableName } from './TableName.js'\n\nexport const ArqueroTableHeader: React.FC<ArqueroTableHeaderProps> = memo(\n\tfunction ArqueroTableHeader({\n\t\ttable,\n\t\tname,\n\t\tshowRowCount = true,\n\t\tshowColumnCount = true,\n\t\tcommandBar,\n\t\tfarCommandBar,\n\t\tvisibleColumns,\n\t\tonRenameTable,\n\t\tbgColor,\n\t\tcolor,\n\t}) {\n\t\tconst { background, foreground } = useColorDefaults(color, bgColor)\n\t\tconst groupCount = useMemo((): any => {\n\t\t\treturn table.isGrouped() ? table.groups().size : 0\n\t\t}, [table])\n\n\t\tconst columnCounts = useColumnCounts(table, visibleColumns)\n\t\tconst rowCounts = useRowCounts(table)\n\t\treturn (\n\t\t\t<Header bgColor={background} color={foreground}>\n\t\t\t\t<Left>{commandBar}</Left>\n\t\t\t\t<Middle>\n\t\t\t\t\t{name ? (\n\t\t\t\t\t\t<TableName\n\t\t\t\t\t\t\tonRenameTable={onRenameTable}\n\t\t\t\t\t\t\tname={name}\n\t\t\t\t\t\t\tcolor={foreground}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{showRowCount === true ? (\n\t\t\t\t\t\t<H3>\n\t\t\t\t\t\t\t{`${rowCounts.visible} row${rowCounts.visible !== 1 ? 's' : ''}${\n\t\t\t\t\t\t\t\trowCounts.hidden > 0 ? ` (${rowCounts.hidden} filtered)` : ''\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t</H3>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{showColumnCount === true ? (\n\t\t\t\t\t\t<H3>\n\t\t\t\t\t\t\t{`${columnCounts.visible} col${\n\t\t\t\t\t\t\t\tcolumnCounts.visible !== 1 ? 's' : ''\n\t\t\t\t\t\t\t}${\n\t\t\t\t\t\t\t\tcolumnCounts.hidden > 0\n\t\t\t\t\t\t\t\t\t? ` (${columnCounts.hidden} hidden)`\n\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t</H3>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{groupCount ? <H3>{groupCount} groups</H3> : null}\n\t\t\t\t</Middle>\n\t\t\t\t<Right>{farCommandBar}</Right>\n\t\t\t</Header>\n\t\t)\n\t},\n)\n\nconst Header = styled.div<{ bgColor: string; color: string }>`\n\theight: ${HEIGHT}px;\n\twidth: 100%;\n\tbackground-color: ${({ bgColor }) => bgColor};\n\tcolor: ${({ color }) => color};\n\tposition: relative;\n\tbox-sizing: border-box;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n`\n\nconst H3 = styled.h3`\n\tfont-weight: normal;\n\tfont-size: 0.8em;\n`\n\nconst Left = styled.div`\n\tflex: 1;\n\tdisplay: flex;\n\tjustify-content: flex-start;\n`\n\nconst Middle = styled.div`\n\tflex: 2;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tgap: 8px;\n`\nconst Right = styled.div`\n\tflex: 1;\n\tdisplay: flex;\n\tjustify-content: flex-end;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport type { ICommandBarProps } from '@fluentui/react'\nimport { CommandBar as CB } from '@fluentui/react'\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\nimport {\n\tuseColorDefaults,\n\tuseCommands,\n\tuseCommandStyles,\n\tuseHandleOnDataGrown,\n\tuseHandleOnDataReduce,\n\tuseOverflowButtonProps,\n} from './CommandBar.hooks.js'\n\ninterface CommandBarProps extends ICommandBarProps {\n\theight?: string\n\tbgColor?: string\n\tcolor?: string\n}\n\n/**\n * Extends the fluent command bar to override styles and collapsing for our inverted header\n */\nexport const CommandBar: React.FC<CommandBarProps> = memo(function CommandBar({\n\titems,\n\theight,\n\tbgColor,\n\tcolor,\n\tstyles,\n\t...props\n}) {\n\tconst { foreground, background } = useColorDefaults(color, bgColor)\n\tconst overflowButtonProps = useOverflowButtonProps(background, foreground)\n\tconst handleOnDataReduce = useHandleOnDataReduce(foreground)\n\tconst handleOnDataGrown = useHandleOnDataGrown(foreground)\n\tconst commandStyles = useCommandStyles(styles)\n\tconst fixedItems = useCommands(items, background, foreground)\n\treturn (\n\t\t<CommandBarWrapper bgColor={background} color={foreground}>\n\t\t\t<CB\n\t\t\t\titems={fixedItems}\n\t\t\t\tstyles={commandStyles}\n\t\t\t\toverflowButtonProps={overflowButtonProps}\n\t\t\t\tonDataReduced={handleOnDataReduce}\n\t\t\t\tonDataGrown={handleOnDataGrown}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t</CommandBarWrapper>\n\t)\n})\n\nconst CommandBarWrapper = styled.div<{\n\theight?: string\n\tbgColor: string\n\tcolor: string\n}>`\n\tbackground-color: ${({ bgColor }) => bgColor};\n\tcolor: ${({ color }) => color || 'inherit'};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { IconButton } from '@fluentui/react'\nimport Markdown from 'markdown-to-jsx'\nimport React, {\n\tmemo,\n\tuseCallback,\n\tuseEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState,\n} from 'react'\nimport styled from 'styled-components'\n\nimport { useGoBack, useGoHome, useGuidance, useHandleClick } from './hooks.js'\nimport type { GuidanceProps } from './types.js'\n\nexport const Guidance: React.FC<GuidanceProps> = memo(function Guidance({\n\tname = '',\n\tindex,\n}) {\n\tconst markdownContainer = useRef<HTMLDivElement>(null)\n\tconst guidance = useGuidance(index)\n\tconst [_name, setName] = useState<string[]>([name])\n\n\tif (name !== _name[0]) {\n\t\tsetName([name])\n\t}\n\n\tconst handleClick = useHandleClick(setName)\n\tconst goHome = useGoHome(name, setName)\n\tconst goBack = useGoBack(setName)\n\n\tconst preProcess = useCallback((text: string): string => {\n\t\tconst r = /(?<=##.*?\\n)([\\s\\S]*)/g\n\t\tconst content = text.replace(r, `<div className=\"details\">$1</div>`)\n\t\treturn content\n\t}, [])\n\n\tconst md = useMemo((): string => {\n\t\tconst text = guidance(_name[_name.length - 1] || '')\n\t\treturn preProcess(text)\n\t}, [_name, guidance, preProcess])\n\n\tuseEffect(() => {\n\t\tif (markdownContainer?.current) {\n\t\t\tconst links = markdownContainer.current.querySelectorAll('a')\n\t\t\tlinks.forEach(link => {\n\t\t\t\tlink.addEventListener('click', e => {\n\t\t\t\t\te.preventDefault()\n\t\t\t\t\thandleClick((e.target as HTMLAnchorElement).href)\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}, [handleClick, _name, markdownContainer])\n\n\tconst handleHeaderClick = useCallback(event => {\n\t\tconst target: HTMLHeadingElement =\n\t\t\tevent.target.nodeName === 'H2' ? event.target : event.target.closest('h2')\n\t\tif (target.classList.contains('active')) {\n\t\t\ttarget.classList.remove('active')\n\t\t} else {\n\t\t\ttarget.classList.add('active')\n\t\t}\n\t}, [])\n\n\tconst H2Component = useCallback(\n\t\t({ children, ...props }): JSX.Element => {\n\t\t\treturn (\n\t\t\t\t<h2 {...props}>\n\t\t\t\t\t{children}\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tonClick={handleHeaderClick}\n\t\t\t\t\t\taria-label=\"Emoji\"\n\t\t\t\t\t\ticonProps={{ iconName: 'AddTo' }}\n\t\t\t\t\t/>\n\t\t\t\t</h2>\n\t\t\t)\n\t\t},\n\t\t[handleHeaderClick],\n\t)\n\n\tconst options = {\n\t\toverrides: {\n\t\t\th2: {\n\t\t\t\tcomponent: H2Component,\n\t\t\t},\n\t\t},\n\t}\n\n\treturn (\n\t\t<Container ref={markdownContainer}>\n\t\t\t<ButtonWrapper>\n\t\t\t\t{_name.length > 2 ? (\n\t\t\t\t\t<Icon\n\t\t\t\t\t\tonClick={goBack}\n\t\t\t\t\t\ticonProps={{ iconName: 'Back' }}\n\t\t\t\t\t\taria-label=\"Emoji\"\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t\t{_name.length > 1 ? (\n\t\t\t\t\t<Icon\n\t\t\t\t\t\tonClick={goHome}\n\t\t\t\t\t\ticonProps={{ iconName: 'Home' }}\n\t\t\t\t\t\taria-label=\"Emoji\"\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t</ButtonWrapper>\n\t\t\t<Markdown options={options}>{md}</Markdown>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tposition: relative;\n\n\th1 {\n\t\tmargin-top: 0;\n\t\ttext-transform: uppercase;\n\t\tcolor: ${({ theme }) => theme.application().lowMidContrast().hex()};\n\t}\n\n\th2 {\n\t\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 1rem;\n\n\t\t&.active + .details {\n\t\t\topacity: 1;\n\t\t\theight: auto;\n\t\t\ttransform: translateX(0);\n\t\t\toverflow-x: auto;\n\t\t}\n\t}\n\n\ttable {\n\t\tborder-collapse: collapse;\n\n\t\tth {\n\t\t\tfont-weight: bold;\n\t\t}\n\n\t\ttd,\n\t\tth {\n\t\t\tborder: 1px solid\n\t\t\t\t${({ theme }) => theme.application().lowContrast().hex()};\n\t\t\tpadding: 5px;\n\t\t\ttext-align: center;\n\t\t}\n\t}\n\n\t.details {\n\t\topacity: 0;\n\t\theight: 0;\n\t\ttransition: transform 0.5s ease-in-out;\n\t\ttransform: translateX(100%);\n\t\toverflow-x: hidden;\n\t}\n`\n\nconst Icon = styled(IconButton)`\n\tfont-size: 2.5rem;\n`\n\nconst ButtonWrapper = styled.div`\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Verb } from '@data-wrangling-components/core'\nimport { IconButton } from '@fluentui/react'\nimport { memo, useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport { ColumnarMenu } from '../../controls/ColumnarMenu/ColumnarMenu.js'\nimport { ColumnarMenuList } from '../../controls/ColumnarMenu/ColumnarMenuList.js'\nimport { ContextualMenuItemSearchBox } from '../../controls/ContextualMenuItemSearchBox/ContextualMenuItemSearchBox.js'\nimport { useSearchableItems, useSelectedOption } from './StepSelector.hooks.js'\n\nexport interface StepSelectorProps {\n\tonCreate?: (verb: Verb) => void\n\tshowButton?: boolean\n\tverb?: Verb\n\tplaceholder?: string\n}\n\n/**\n * Creates a custom step selection dropdown.\n * If \"showButton\" is true, a + icon will appear next to the dropdown,\n * and onChange will only fire when it is clicked.\n */\nexport const StepSelector: React.FC<StepSelectorProps> = memo(\n\tfunction StepSelector({\n\t\tonCreate,\n\t\tshowButton,\n\t\tverb,\n\t\tplaceholder = 'Choose a verb',\n\t}) {\n\t\tconst { text, onButtonClick, onItemClick } = useSelectedOption(\n\t\t\tverb,\n\t\t\tonCreate,\n\t\t\tshowButton,\n\t\t\tplaceholder,\n\t\t)\n\n\t\tconst { items, filtered, onSearch, onSearchReset } = useSearchableItems()\n\n\t\tconst renderMenuList = useCallback(\n\t\t\tmenuListProps => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<SearchContainer>\n\t\t\t\t\t\t\t<ContextualMenuItemSearchBox items={items} onSearch={onSearch} />\n\t\t\t\t\t\t</SearchContainer>\n\t\t\t\t\t\t<ColumnarMenuList {...menuListProps} />\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t},\n\t\t\t[onSearch, items],\n\t\t)\n\n\t\tconst menuProps = {\n\t\t\titems: filtered,\n\t\t\tonRenderMenuList: renderMenuList,\n\t\t\tonItemClick,\n\t\t\tonDismiss: onSearchReset,\n\t\t}\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<ColumnarMenu text={text} {...menuProps} />\n\t\t\t\t{showButton && (\n\t\t\t\t\t<IconButton iconProps={{ iconName: 'Add' }} onClick={onButtonClick} />\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Container = styled.div`\n\twidth: 240px;\n\tdisplay: flex;\n\talign-items: center;\n`\n\nconst SearchContainer = styled.div`\n\tborder-bottom: 1px solid\n\t\t${({ theme }) => theme.application().lowContrast().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const VerticalSpacer = styled.div`\n\tmargin-top: 12px;\n`\n\nexport const CenteredColumn = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n`\n\nexport const VerbContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n`\n\nexport const LeftAlignedColumn = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n`\n\nexport const LeftAlignedRow = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\talign-items: flex-end;\n\tmargin-bottom: 8px;\n`\n\nexport const LeftAlignedRowWithGap = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\talign-items: flex-end;\n\tmargin-bottom: 8px;\n\tgap: 12px;\n`\n\n/**\n * For explanatory text below an input,\n */\nexport const InputExplainer = styled.div`\n\tfont-size: 0.85em;\n\tcolor: ${({ theme }) => theme.application().midHighContrast().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type {\n\tIContextualMenuItem,\n\tIContextualMenuListProps,\n} from '@fluentui/react'\nimport { ContextualMenuItemType } from '@fluentui/react'\nimport { merge } from 'lodash-es'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nexport const ColumnarMenuList: React.FC<IContextualMenuListProps> = memo(\n\tfunction ColumnarMenuList(props) {\n\t\tconst { defaultMenuItemRenderer, items } = props\n\t\tconst formatted: IContextualMenuItem[] = useMemo(() => {\n\t\t\treturn items.map(item =>\n\t\t\t\tmerge({}, item, {\n\t\t\t\t\titemProps,\n\t\t\t\t\tsectionProps: item.sectionProps\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\titems: item.sectionProps.items.map(subitem =>\n\t\t\t\t\t\t\t\t\tmerge({}, subitem, {\n\t\t\t\t\t\t\t\t\t\titemProps,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: undefined,\n\t\t\t\t}),\n\t\t\t)\n\t\t}, [items])\n\t\treturn (\n\t\t\t<MenuLayout>\n\t\t\t\t{formatted.map(item => {\n\t\t\t\t\tconst { key } = item\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Column key={`menu-group-${key}`}>\n\t\t\t\t\t\t\t<ColumnHeader>{item.sectionProps?.title}</ColumnHeader>\n\t\t\t\t\t\t\t{item.itemType === ContextualMenuItemType.Section ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t{item.sectionProps?.items.map(subitem =>\n\t\t\t\t\t\t\t\t\t\tdefaultMenuItemRenderer(subitem as any),\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\tdefaultMenuItemRenderer(item as any)\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Column>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</MenuLayout>\n\t\t)\n\t},\n)\n\nconst itemProps = {\n\tstyles: {\n\t\troot: {\n\t\t\tpaddingLeft: 8,\n\t\t\theight: 28,\n\t\t\tlineHeight: 28,\n\t\t},\n\t\titem: {\n\t\t\tlistStyleType: 'none',\n\t\t},\n\t},\n}\nconst MenuLayout = styled.div`\n\tdisplay: flex;\n\tpadding: 8px 0 8px 0;\n\tgap: 12px;\n`\n\nconst Column = styled.div`\n\tmin-width: 120px;\n`\n\nconst ColumnHeader = styled.div`\n\tpadding: 0 12px 0 12px;\n\tmargin-bottom: 8px;\n\tfont-weight: bold;\n\tcolor: ${({ theme }) => theme.application().accent().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { IDetailsGroupDividerProps, IGroup } from '@fluentui/react'\nimport { IconButton } from '@fluentui/react'\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Else, If, Then } from 'react-if'\nimport styled from 'styled-components'\n\nimport { useIntersection } from '../../common/index.js'\n\ninterface GroupHeaderProps {\n\tprops: IDetailsGroupDividerProps\n\tlazyLoadGroups: boolean\n\tcolumnName?: string\n}\n\nexport const GroupHeader: React.FC<GroupHeaderProps> = memo(\n\tfunction GroupHeader({ columnName, props, children, lazyLoadGroups }) {\n\t\tconst { group, onToggleCollapse } = props\n\t\tconst ref = useRef<HTMLDivElement>()\n\t\t// whether the element toggle is manual or by visibility on scroll\n\t\tconst [manualToggle, setManualToggle] = useState(false)\n\n\t\t// trigger as soon as the element becomes visible\n\t\tconst inViewport = useIntersection(ref.current, '0px')\n\n\t\tconst countChildren = useCallback((children: IGroup[]) => {\n\t\t\tlet total = 0\n\t\t\tchildren.forEach(child => {\n\t\t\t\ttotal += child.count\n\t\t\t\ttotal += child.children ? countChildren(child.children) : 0\n\t\t\t})\n\t\t\treturn total\n\t\t}, [])\n\n\t\tuseEffect(() => {\n\t\t\tif (inViewport && group?.isCollapsed && onToggleCollapse) {\n\t\t\t\tonToggleCollapse(group)\n\t\t\t}\n\t\t}, [inViewport, group, onToggleCollapse])\n\n\t\tconst onManualLevelToggle = useCallback(() => {\n\t\t\tsetManualToggle(true)\n\t\t\tonToggleCollapse && onToggleCollapse(group as IGroup)\n\t\t}, [group, onToggleCollapse, setManualToggle])\n\n\t\tconst shouldLazyLoad = useMemo((): boolean => {\n\t\t\treturn lazyLoadGroups && (group?.level as number) > 0 && !manualToggle\n\t\t}, [group, lazyLoadGroups, manualToggle])\n\n\t\treturn (\n\t\t\t<HeaderContainer\n\t\t\t\t// uses the ref to toggle if element is into view if the user didn't toggled it with the button\n\t\t\t\tref={(element: HTMLDivElement) =>\n\t\t\t\t\t(ref.current = shouldLazyLoad ? element : undefined)\n\t\t\t\t}\n\t\t\t\tgroupLevel={group?.level as number}\n\t\t\t>\n\t\t\t\t<LevelButton\n\t\t\t\t\tonClick={onManualLevelToggle}\n\t\t\t\t\ticonProps={{\n\t\t\t\t\t\ticonName: group?.isCollapsed ? 'ChevronRight' : 'ChevronDown',\n\t\t\t\t\t}}\n\t\t\t\t></LevelButton>\n\t\t\t\t<If condition={!!children}>\n\t\t\t\t\t<Then>{children}</Then>\n\t\t\t\t\t<Else>\n\t\t\t\t\t\t<HeaderDetailsText>\n\t\t\t\t\t\t\t<Bold>\n\t\t\t\t\t\t\t\t{columnName ? `${columnName}  - ` : ''}\n\t\t\t\t\t\t\t\t{group?.name}\n\t\t\t\t\t\t\t</Bold>\n\t\t\t\t\t\t</HeaderDetailsText>\n\t\t\t\t\t\t<HeaderDetailsText>Children: {group?.count}</HeaderDetailsText>\n\t\t\t\t\t\t{group?.children && (\n\t\t\t\t\t\t\t<HeaderDetailsText>\n\t\t\t\t\t\t\t\tTotal Items: {countChildren(group?.children)}\n\t\t\t\t\t\t\t</HeaderDetailsText>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Else>\n\t\t\t\t</If>\n\t\t\t</HeaderContainer>\n\t\t)\n\t},\n)\n\nconst HeaderContainer = styled.div<{ groupLevel: number }>`\n\tpadding-left: ${({ groupLevel }) => `${groupLevel * 12}px`};\n\tdisplay: flex;\n\tgap: 8px;\n`\n\nconst LevelButton = styled(IconButton)`\n\twidth: 5%;\n`\n\nconst HeaderDetailsText = styled.span`\n\talign-self: center;\n`\n\nconst Bold = styled.b``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Criterion } from '@data-wrangling-components/core'\nimport {\n\tBooleanComparisonOperator,\n\tDataType,\n\tFilterCompareType,\n\tNumericComparisonOperator,\n\tStringComparisonOperator,\n} from '@data-wrangling-components/core'\nimport type { IDropdownOption } from '@fluentui/react'\nimport { IconButton } from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { InputExplainer } from '../../../common/styles.js'\nimport { EnumDropdown } from '../../../controls/EnumDropdown.js'\nimport { ColumnOrValueComboBox } from '../../../controls/index.js'\nimport { narrowDropdownStyles } from '../../../controls/styles.js'\nimport {\n\tuseColumnTyping,\n\tuseIsEmpty,\n\tusePlaceholderText,\n} from './FilterFunction.hooks.js'\n\nexport interface FilterFunctionProps {\n\ttable: ColumnTable\n\tcolumn: string\n\tcriterion: Criterion\n\tonChange?: (filter?: Criterion) => void\n\tsuppressLabels?: boolean\n}\n/**\n * Just the comparison logic/ops for a filter.\n * Input table and source column is expected to be edited elsewhere and configured as the step input.\n * This is split out from FilterInputs to allow just the comparison logic to be reused elsewhere.\n */\nexport const FilterFunction: React.FC<FilterFunctionProps> = memo(\n\tfunction FilterFunction({\n\t\ttable,\n\t\tcolumn,\n\t\tcriterion,\n\t\tonChange,\n\t\tsuppressLabels = false,\n\t}) {\n\t\tconst handleOpChange = useCallback(\n\t\t\t(_e: React.FormEvent<HTMLDivElement>, opt?: IDropdownOption) => {\n\t\t\t\tonChange &&\n\t\t\t\t\tonChange({\n\t\t\t\t\t\t...criterion,\n\t\t\t\t\t\toperator: opt?.key as\n\t\t\t\t\t\t\t| StringComparisonOperator\n\t\t\t\t\t\t\t| NumericComparisonOperator\n\t\t\t\t\t\t\t| BooleanComparisonOperator,\n\t\t\t\t\t})\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst handleComboBoxChange = useCallback(\n\t\t\t(_e, option, _index, value) => {\n\t\t\t\tconst update = {\n\t\t\t\t\t...criterion,\n\t\t\t\t\ttype: option ? FilterCompareType.Column : FilterCompareType.Value,\n\t\t\t\t\tvalue: option ? option.key : value,\n\t\t\t\t}\n\t\t\t\tonChange && onChange(update)\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst { type, columnFilter } = useColumnTyping(table, column)\n\n\t\tconst operatorDropdown = useMemo(() => {\n\t\t\tconst shared = {\n\t\t\t\trequired: !suppressLabels,\n\t\t\t\tlabel: suppressLabels ? undefined : 'Function',\n\t\t\t\tselectedKey: criterion.operator,\n\t\t\t\tonChange: handleOpChange,\n\t\t\t\tstyles: leftStyles,\n\t\t\t}\n\t\t\tif (column) {\n\t\t\t\tif (type === DataType.String) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<EnumDropdown enumeration={StringComparisonOperator} {...shared} />\n\t\t\t\t\t)\n\t\t\t\t} else if (type === DataType.Boolean) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<EnumDropdown enumeration={BooleanComparisonOperator} {...shared} />\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t\t// map to nicer \"math like\" terse labels for numeric operations\n\t\t\t// (the default will use the friendly enum keys)\n\t\t\tconst labels = {\n\t\t\t\t'=': '=',\n\t\t\t\t'!=': '!=',\n\t\t\t\t'<': '<',\n\t\t\t\t'<=': '<=',\n\t\t\t\t'>': '>',\n\t\t\t\t'>=': '>=',\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<EnumDropdown\n\t\t\t\t\tenumeration={NumericComparisonOperator}\n\t\t\t\t\t{...shared}\n\t\t\t\t\tlabels={labels}\n\t\t\t\t/>\n\t\t\t)\n\t\t}, [type, column, criterion, handleOpChange, suppressLabels])\n\n\t\tconst isEmpty = useIsEmpty(criterion)\n\n\t\tconst handleDeleteClick = useCallback(\n\t\t\t() => onChange && onChange(),\n\t\t\t[onChange],\n\t\t)\n\n\t\tconst placeholder = usePlaceholderText(type)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<SideBySide>\n\t\t\t\t\t{operatorDropdown}\n\t\t\t\t\t<ColumnOrValueComboBox\n\t\t\t\t\t\trequired={!suppressLabels}\n\t\t\t\t\t\ttable={table}\n\t\t\t\t\t\tfilter={columnFilter}\n\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\tlabel={suppressLabels ? undefined : 'Comparison value'}\n\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\ttext={criterion.value ? `${criterion.value}` : undefined}\n\t\t\t\t\t\tonChange={handleComboBoxChange}\n\t\t\t\t\t\tstyles={narrowDropdownStyles}\n\t\t\t\t\t/>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\ttitle={'Remove this criterion'}\n\t\t\t\t\t\ticonProps={{ iconName: 'Delete' }}\n\t\t\t\t\t\tonClick={handleDeleteClick}\n\t\t\t\t\t/>\n\t\t\t\t</SideBySide>\n\t\t\t\t{type === DataType.String ? (\n\t\t\t\t\t<InputExplainer>\n\t\t\t\t\t\tString comparisons are not case-sensitive\n\t\t\t\t\t</InputExplainer>\n\t\t\t\t) : null}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nconst SideBySide = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\talign-items: flex-end;\n`\n\nconst leftStyles = {\n\troot: {\n\t\t...narrowDropdownStyles.root,\n\t\tmarginRight: 12,\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Criterion, FilterStep } from '@data-wrangling-components/core'\nimport { BooleanOperator, NodeInput } from '@data-wrangling-components/core'\nimport { ActionButton } from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { useHandleDropdownChange, useLoadTable } from '../../common/hooks.js'\nimport { LeftAlignedRow } from '../../common/styles.js'\nimport { EnumDropdown } from '../../controls/EnumDropdown.js'\nimport type { StepComponentProps } from '../../types.js'\nimport { FilterFunction } from '../shared/index.js'\n\n/**\n * Provides inputs for a Filter step.\n */\nexport const Filter: React.FC<StepComponentProps> = memo(function Filter({\n\tstep,\n\tstore,\n\ttable,\n\tonChange,\n\tinput,\n}) {\n\tconst internal = useMemo(() => step as FilterStep, [step])\n\tconst tbl = useLoadTable(\n\t\tinput || internal.input[NodeInput.Source]?.node,\n\t\ttable,\n\t\tstore,\n\t)\n\n\tconst handleButtonClick = useCallback(() => {\n\t\tonChange &&\n\t\t\tonChange({\n\t\t\t\t...internal,\n\t\t\t\targs: {\n\t\t\t\t\t...internal.args,\n\t\t\t\t\tcriteria: [...(internal.args.criteria || []), {}],\n\t\t\t\t},\n\t\t\t})\n\t}, [internal, onChange])\n\n\tconst handleFilterChange = useCallback(\n\t\t(criterion: Criterion | undefined, index: number) => {\n\t\t\tconst criteria = [...internal.args.criteria]\n\t\t\tif (criterion === undefined) {\n\t\t\t\tcriteria.splice(index, 1)\n\t\t\t} else {\n\t\t\t\tcriteria[index] = criterion\n\t\t\t}\n\t\t\tonChange &&\n\t\t\t\tonChange({\n\t\t\t\t\t...internal,\n\t\t\t\t\targs: {\n\t\t\t\t\t\t...internal.args,\n\t\t\t\t\t\tcriteria,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t},\n\t\t[internal, onChange],\n\t)\n\n\tconst handleLogicalChange = useHandleDropdownChange(\n\t\tinternal,\n\t\t'args.logical',\n\t\tonChange,\n\t)\n\tconst filters = useFilters(\n\t\ttbl,\n\t\tinternal.args.column,\n\t\tinternal.args.criteria,\n\t\thandleFilterChange,\n\t)\n\treturn (\n\t\t<Container>\n\t\t\t{filters}\n\t\t\t<ActionButton\n\t\t\t\tonClick={handleButtonClick}\n\t\t\t\ticonProps={{ iconName: 'Add' }}\n\t\t\t\tdisabled={!tbl}\n\t\t\t>\n\t\t\t\tAdd criteria\n\t\t\t</ActionButton>\n\t\t\t{internal.args.criteria.length > 1 ? (\n\t\t\t\t<LeftAlignedRow>\n\t\t\t\t\t<EnumDropdown\n\t\t\t\t\t\tlabel={'Logical combination'}\n\t\t\t\t\t\tenumeration={BooleanOperator}\n\t\t\t\t\t\tlabels={{\n\t\t\t\t\t\t\tor: 'OR',\n\t\t\t\t\t\t\tand: 'AND',\n\t\t\t\t\t\t\tnor: 'NOR',\n\t\t\t\t\t\t\tnand: 'NAND',\n\t\t\t\t\t\t\txor: 'XOR',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tselectedKey={internal.args.logical}\n\t\t\t\t\t\tonChange={handleLogicalChange}\n\t\t\t\t\t/>\n\t\t\t\t</LeftAlignedRow>\n\t\t\t) : null}\n\t\t</Container>\n\t)\n})\n\nfunction useFilters(\n\ttable: ColumnTable | undefined,\n\tcolumn: string,\n\tcriteria: Criterion[],\n\tonChange: any,\n) {\n\tif (!table) {\n\t\treturn null\n\t}\n\n\treturn criteria.map((criterion, index) => {\n\t\tconst handleChange = (f?: Criterion) => onChange(f, index)\n\t\treturn (\n\t\t\t<Vertical key={`filter-function-${index}`} index={index}>\n\t\t\t\t<FilterFunction\n\t\t\t\t\ttable={table}\n\t\t\t\t\tcolumn={column}\n\t\t\t\t\tcriterion={criterion}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tsuppressLabels={index > 0}\n\t\t\t\t/>\n\t\t\t</Vertical>\n\t\t)\n\t})\n}\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n`\n\nconst Vertical = styled.div<{ index: number }>`\n\tdisplay: flex;\n\tflex-direction: column;\n\tmargin-top: ${({ index }) => (index > 0 ? 6 : 0)}px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { memo } from 'react'\n\nimport type { StepComponentProps } from '../../types.js'\nimport { Filter } from '../Filter/Filter.js'\n\n/**\n * Provides inputs for a Binarize step.\n */\nexport const Binarize: React.FC<StepComponentProps> = memo(function Binarize(\n\tprops,\n) {\n\treturn <Filter {...props} />\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type {\n\tIDropdownOption,\n\tIDropdownProps,\n\tISelectableOption,\n} from '@fluentui/react'\nimport { Dropdown } from '@fluentui/react'\nimport type { IRenderFunction } from '@fluentui/utilities'\nimport { memo, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { dropdownStyles } from './styles.js'\n\nexport interface MultiDropdownProps extends IDropdownProps {\n\tonSelectAllOrNone?: (options: IDropdownOption[]) => void\n}\n\n/**\n * Dropdown wrapper to manage multi-select with a select all/none helper.\n */\nexport const MultiDropdown: React.FC<MultiDropdownProps> = memo(\n\tfunction MultiDropdown({\n\t\toptions,\n\t\tselectedKeys,\n\t\tonSelectAllOrNone,\n\t\t...props\n\t}) {\n\t\tconst opts = useMemo(() => {\n\t\t\tconst hash = (selectedKeys || ([] as any)).reduce(\n\t\t\t\t(acc: Record<string, boolean>, cur: any) => {\n\t\t\t\t\tacc[cur] = true\n\t\t\t\t\treturn acc\n\t\t\t\t},\n\t\t\t\t{},\n\t\t\t)\n\t\t\tconst main: IDropdownOption[] = options.map(option => {\n\t\t\t\tconst selected = !!hash[option.key]\n\t\t\t\treturn {\n\t\t\t\t\t...option,\n\t\t\t\t\tselected,\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn [\n\t\t\t\t...main,\n\t\t\t\t{\n\t\t\t\t\tkey: '--divider--',\n\t\t\t\t\ttext: '-',\n\t\t\t\t\titemType: 1,\n\t\t\t\t\tselected: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: '--actions--',\n\t\t\t\t\ttext: '',\n\t\t\t\t\titemType: 2,\n\t\t\t\t\tdata: true,\n\t\t\t\t\tselected: false,\n\t\t\t\t},\n\t\t\t] as IDropdownOption[]\n\t\t}, [options, selectedKeys])\n\n\t\tconst handleSelectAllOrNone = useCallback(\n\t\t\t(all: boolean) => {\n\t\t\t\tonSelectAllOrNone && onSelectAllOrNone(all ? options : [])\n\t\t\t},\n\t\t\t[options, onSelectAllOrNone],\n\t\t)\n\n\t\tconst handleRenderOption: IRenderFunction<ISelectableOption<any>> =\n\t\t\tuseCallback(\n\t\t\t\toption => {\n\t\t\t\t\tif (option?.data) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Selector>\n\t\t\t\t\t\t\t\t<Link onClick={() => handleSelectAllOrNone(true)}>All</Link>\n\t\t\t\t\t\t\t\t<Sep>|</Sep>\n\t\t\t\t\t\t\t\t<Link onClick={() => handleSelectAllOrNone(false)}>None</Link>\n\t\t\t\t\t\t\t</Selector>\n\t\t\t\t\t\t)\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn <span>{option?.text}</span>\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t[handleSelectAllOrNone],\n\t\t\t)\n\n\t\treturn (\n\t\t\t<Dropdown\n\t\t\t\trequired\n\t\t\t\tmultiSelect\n\t\t\t\toptions={opts}\n\t\t\t\tselectedKeys={selectedKeys}\n\t\t\t\tstyles={dropdownStyles}\n\t\t\t\tonRenderOption={handleRenderOption}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t)\n\t},\n)\n\nconst Selector = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-around;\n`\nconst Link = styled.a`\n\tcursor: pointer;\n`\n\nconst Sep = styled.div`\n\tmargin-left: 4px;\n\tmargin-right: 4px;\n\tcolor: ${({ theme }) => theme.application().lowContrast().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { ColumnListStep } from '@data-wrangling-components/core'\nimport { NodeInput } from '@data-wrangling-components/core'\nimport type { IDropdownOption } from '@fluentui/react'\nimport { memo, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { MultiDropdown } from '../../../controls/MultiDropdown.js'\nimport { useLoadTable } from '../../../index.js'\nimport type { StepSubcomponentProps } from '../../../types.js'\n\n/**\n * Provides inputs for a step that needs lists of columns.\n */\nexport const ColumnListInputs: React.FC<StepSubcomponentProps> = memo(\n\tfunction ColumnListInputs({ step, store, table, onChange, input, label }) {\n\t\tconst tbl = useLoadTable(\n\t\t\tinput || step.input[NodeInput.Source]?.node,\n\t\t\ttable,\n\t\t\tstore,\n\t\t)\n\n\t\tconst internal = useMemo(() => step as ColumnListStep, [step])\n\n\t\tconst handleColumnChange = useCallback(\n\t\t\t(_event?: React.FormEvent<HTMLDivElement>, option?: IDropdownOption) => {\n\t\t\t\tconst { columns = [] } = internal.args\n\t\t\t\tlet update = [...columns]\n\t\t\t\tif (option) {\n\t\t\t\t\tif (option.selected) {\n\t\t\t\t\t\tupdate.push(option.key as string)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupdate = update.filter(c => c !== option.key)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tonChange &&\n\t\t\t\t\tonChange({\n\t\t\t\t\t\t...internal,\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t...internal.args,\n\t\t\t\t\t\t\tcolumns: update,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t},\n\t\t\t[internal, onChange],\n\t\t)\n\n\t\tconst handleSelectAllOrNone = useCallback(\n\t\t\t(options: IDropdownOption[]) => {\n\t\t\t\tonChange &&\n\t\t\t\t\tonChange({\n\t\t\t\t\t\t...internal,\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t...internal.args,\n\t\t\t\t\t\t\tcolumns: options.map(o => o.key),\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t},\n\t\t\t[onChange, internal],\n\t\t)\n\n\t\tconst options = useMemo(() => {\n\t\t\treturn (\n\t\t\t\ttbl?.columnNames().map(name => ({\n\t\t\t\t\tkey: name,\n\t\t\t\t\ttext: name,\n\t\t\t\t})) || []\n\t\t\t)\n\t\t}, [tbl])\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t{tbl ? (\n\t\t\t\t\t<MultiDropdown\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tlabel={label || 'Columns'}\n\t\t\t\t\t\tplaceholder={'Select columns'}\n\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\tselectedKeys={internal.args.columns}\n\t\t\t\t\t\tonChange={handleColumnChange}\n\t\t\t\t\t\tonSelectAllOrNone={handleSelectAllOrNone}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { ConvertStep } from '@data-wrangling-components/core'\nimport { DataType, NodeInput, ParseType } from '@data-wrangling-components/core'\nimport { TextField } from '@fluentui/react'\nimport cloneDeep from 'lodash-es/cloneDeep.js'\nimport set from 'lodash-es/set.js'\nimport { memo, useCallback, useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\n\nimport {\n\tuseHandleDropdownChange,\n\tuseHandleTextfieldChange,\n\tuseLoadTable,\n} from '../../common/hooks.js'\nimport { LeftAlignedColumn } from '../../common/index.js'\nimport { DateFormatPatternCombobox } from '../../controls/DateFormatPatternCombobox.js'\nimport { EnumDropdown } from '../../controls/EnumDropdown.js'\nimport { dropdownStyles } from '../../controls/styles.js'\nimport type { StepComponentProps } from '../../types.js'\nimport { ColumnListInputs } from '../shared/index.js'\nimport { getColumnType } from '../shared/TypingFunction/TypingFunction.js'\n\n/**\n * Provides inputs for a Convert step.\n */\nexport const Convert: React.FC<StepComponentProps> = memo(function Convert({\n\tstep,\n\tstore,\n\ttable,\n\tonChange,\n\tinput,\n}) {\n\tconst internal = useMemo(() => step as ConvertStep, [step])\n\tconst tbl = useLoadTable(\n\t\tinput || internal.input[NodeInput.Source]?.node,\n\t\ttable,\n\t\tstore,\n\t)\n\tconst [inputColumnDate, setInputColumnDate] = useState<boolean>()\n\n\tconst handleTypeChange = useHandleDropdownChange(\n\t\tinternal,\n\t\t'args.type',\n\t\tonChange,\n\t)\n\n\tconst handleRadixChange = useHandleTextfieldChange(\n\t\tinternal,\n\t\t'args.radix',\n\t\tonChange,\n\t)\n\n\tconst handleComboBoxChange = useCallback(\n\t\t(_e, option, _index, value) => {\n\t\t\tconst update = cloneDeep(step)\n\t\t\tset(update, 'args.formatPattern', option ? option.key : value)\n\t\t\tonChange && onChange(update)\n\t\t},\n\t\t[step, onChange],\n\t)\n\n\tuseEffect(() => {\n\t\tsetInputColumnDate(false)\n\t\tinternal.args.columns.forEach(column => {\n\t\t\tconst type = getColumnType(tbl, column)\n\n\t\t\tif (type === DataType.Date) setInputColumnDate(true)\n\t\t})\n\t}, [internal.args.columns, tbl])\n\n\treturn (\n\t\t<Container>\n\t\t\t<LeftAlignedColumn>\n\t\t\t\t<ColumnListInputs\n\t\t\t\t\tlabel={'Columns to convert'}\n\t\t\t\t\tstep={step}\n\t\t\t\t\tstore={store}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedColumn>\n\t\t\t<LeftAlignedColumn>\n\t\t\t\t<EnumDropdown\n\t\t\t\t\trequired\n\t\t\t\t\tlabel={'Data type'}\n\t\t\t\t\tenumeration={ParseType}\n\t\t\t\t\tselectedKey={internal.args.type}\n\t\t\t\t\tonChange={handleTypeChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedColumn>\n\t\t\t{internal.args.type === ParseType.Integer ? (\n\t\t\t\t<LeftAlignedColumn>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel={'Base (radix)'}\n\t\t\t\t\t\tvalue={internal.args.radix ? `${internal.args.radix}` : ''}\n\t\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\t\tonChange={handleRadixChange}\n\t\t\t\t\t/>\n\t\t\t\t</LeftAlignedColumn>\n\t\t\t) : null}\n\n\t\t\t{inputColumnDate || internal.args.type === ParseType.Date ? (\n\t\t\t\t<LeftAlignedColumn>\n\t\t\t\t\t<DateFormatPatternCombobox\n\t\t\t\t\t\trequired={internal.args.type === ParseType.Date}\n\t\t\t\t\t\tlabel={'Date format pattern'}\n\t\t\t\t\t\tplaceholder={'pattern'}\n\t\t\t\t\t\ttext={\n\t\t\t\t\t\t\tinternal.args.formatPattern\n\t\t\t\t\t\t\t\t? `${internal.args.formatPattern}`\n\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonChange={handleComboBoxChange}\n\t\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\t/>\n\t\t\t\t</LeftAlignedColumn>\n\t\t\t) : null}\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tflex-wrap: wrap;\n\talign-content: flex-start;\n\tflex-direction: column;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { memo } from 'react'\n\nimport type { StepComponentProps } from '../../types.js'\nimport { ColumnListInputs } from '../shared/index.js'\n\n/**\n * Provides inputs for a ColumnListOperation step.\n */\nexport const ColumnListOperation: React.FC<StepComponentProps> = memo(\n\tfunction ColumnListOperation(props) {\n\t\treturn <ColumnListInputs {...props} />\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { EraseStep } from '@data-wrangling-components/core'\nimport { TextField } from '@fluentui/react'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport {\n\tLeftAlignedColumn,\n\tuseHandleTextfieldChange,\n} from '../../common/index.js'\nimport { dropdownStyles } from '../../controls/styles.js'\nimport type { StepComponentProps } from '../../types.js'\nimport { ColumnListInputs } from '../shared/index.js'\n\n/**\n * Just the to/value inputs for an impute.\n * Input table is expected to be edited elsewhere and configured as the step input.\n */\nexport const Erase: React.FC<StepComponentProps> = memo(function Erase({\n\tstep,\n\tstore,\n\tonChange,\n}) {\n\tconst internal = useMemo(() => step as EraseStep, [step])\n\n\tconst handleValueChange = useHandleTextfieldChange(\n\t\tinternal,\n\t\t'args.value',\n\t\tonChange,\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<LeftAlignedColumn>\n\t\t\t\t<ColumnListInputs\n\t\t\t\t\tlabel={'Columns to erase'}\n\t\t\t\t\tstep={step}\n\t\t\t\t\tstore={store}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedColumn>\n\t\t\t<LeftAlignedColumn>\n\t\t\t\t<TextField\n\t\t\t\t\trequired\n\t\t\t\t\tlabel={'Value to be erased'}\n\t\t\t\t\tvalue={internal.args.value && `${internal.args.value}`}\n\t\t\t\t\tplaceholder={'text, number, or boolean'}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tonChange={handleValueChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedColumn>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tflex-wrap: wrap;\n\talign-content: flex-start;\n\tflex-direction: column;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { FetchStep } from '@data-wrangling-components/core'\nimport { Position, SpinButton, TextField } from '@fluentui/react'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { dropdownStyles } from '../../controls/styles.js'\nimport {\n\tLeftAlignedRow,\n\tuseHandleSpinButtonChange,\n\tuseHandleTextfieldChange,\n} from '../../index.js'\nimport type { StepComponentProps } from '../../types'\n\n/**\n * Provides inputs for a Fetch step.\n */\nexport const Fetch: React.FC<StepComponentProps> = memo(function Fetch({\n\tstep,\n\tonChange,\n}) {\n\tconst internal = useMemo(() => step as FetchStep, [step])\n\n\tconst handleUrlChange = useHandleTextfieldChange(\n\t\tinternal,\n\t\t'args.url',\n\t\tonChange,\n\t)\n\n\tconst handleDelimiterChange = useHandleTextfieldChange(\n\t\tinternal,\n\t\t'args.delimiter',\n\t\tonChange,\n\t)\n\n\tconst handleAutoMaxChange = useHandleSpinButtonChange(\n\t\tinternal,\n\t\t'args.autoMax',\n\t\tonChange,\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<TextField\n\t\t\t\t\trequired\n\t\t\t\t\tlabel={'URL'}\n\t\t\t\t\tvalue={internal.args.url && `${internal.args.url}`}\n\t\t\t\t\tplaceholder={'URL to public dataset'}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tonChange={handleUrlChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<TextField\n\t\t\t\t\tlabel={'Delimiter'}\n\t\t\t\t\tvalue={internal.args.delimiter && `${internal.args.delimiter}`}\n\t\t\t\t\tplaceholder={'Column delimiter'}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tonChange={handleDelimiterChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<SpinButton\n\t\t\t\t\tkey={`Automax`}\n\t\t\t\t\tlabel={'Automax'}\n\t\t\t\t\tlabelPosition={Position.top}\n\t\t\t\t\tmin={0}\n\t\t\t\t\tmax={10000000}\n\t\t\t\t\tstep={1}\n\t\t\t\t\tvalue={internal.args.autoMax ? `${internal.args.autoMax}` : undefined}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tonChange={handleAutoMaxChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { FillStep } from '@data-wrangling-components/core'\nimport { TextField } from '@fluentui/react'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { LeftAlignedRow, useHandleTextfieldChange } from '../../common/index.js'\nimport { dropdownStyles } from '../../controls/styles.js'\nimport type { StepComponentProps } from '../../types.js'\n\n/**\n * Provides inputs for a Fill step.\n */\nexport const Fill: React.FC<StepComponentProps> = memo(function Fill({\n\tstep,\n\tonChange,\n}) {\n\tconst internal = useMemo(() => step as FillStep, [step])\n\n\tconst handleValueChange = useHandleTextfieldChange(\n\t\tinternal,\n\t\t'args.value',\n\t\tonChange,\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<TextField\n\t\t\t\t\trequired\n\t\t\t\t\tlabel={'Fill value'}\n\t\t\t\t\tvalue={internal.args.value && `${internal.args.value}`}\n\t\t\t\t\tplaceholder={'text, number, or boolean'}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tonChange={handleValueChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { FoldStep } from '@data-wrangling-components/core'\nimport { TextField } from '@fluentui/react'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { LeftAlignedRow, useHandleTextfieldChange } from '../../common/index.js'\nimport { dropdownStyles } from '../../controls/styles.js'\nimport type { StepComponentProps } from '../../types.js'\nimport { ColumnListInputs } from '../shared/index.js'\n\n/**\n * Provides inputs for a step that needs lists of columns.\n */\nexport const Fold: React.FC<StepComponentProps> = memo(function Fold({\n\tstep,\n\tstore,\n\ttable,\n\tonChange,\n\tinput,\n}) {\n\tconst internal = useMemo(() => step as FoldStep, [step])\n\n\tconst handleToChange = useHandleTextfieldChange(\n\t\tinternal,\n\t\t'args.to[0]',\n\t\tonChange,\n\t)\n\tconst handleToChange2 = useHandleTextfieldChange(\n\t\tinternal,\n\t\t'args.to[1]',\n\t\tonChange,\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<ColumnListInputs\n\t\t\t\t\tstep={step}\n\t\t\t\t\tstore={store}\n\t\t\t\t\ttable={table}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tinput={input}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<TextField\n\t\t\t\t\trequired\n\t\t\t\t\tlabel={'Key name to use'}\n\t\t\t\t\tplaceholder={'Key name to use'}\n\t\t\t\t\tvalue={internal.args.to !== undefined ? internal.args.to[0] : ''}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tonChange={handleToChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<TextField\n\t\t\t\t\trequired\n\t\t\t\t\tlabel={'Value name to use'}\n\t\t\t\t\tplaceholder={'Value name to use'}\n\t\t\t\t\tvalue={internal.args.to !== undefined ? internal.args.to[1] : ''}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tonChange={handleToChange2}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { ImputeStep } from '@data-wrangling-components/core'\nimport { TextField } from '@fluentui/react'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport {\n\tLeftAlignedColumn,\n\tuseHandleTextfieldChange,\n} from '../../common/index.js'\nimport { dropdownStyles } from '../../controls/styles.js'\nimport type { StepComponentProps } from '../../types.js'\nimport { ColumnListInputs } from '../shared/index.js'\n\n/**\n * Just the to/value inputs for an impute.\n * Input table is expected to be edited elsewhere and configured as the step input.\n */\nexport const Impute: React.FC<StepComponentProps> = memo(function Impute({\n\tstep,\n\tstore,\n\tonChange,\n}) {\n\tconst internal = useMemo(() => step as ImputeStep, [step])\n\n\tconst handleValueChange = useHandleTextfieldChange(\n\t\tinternal,\n\t\t'args.value',\n\t\tonChange,\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<LeftAlignedColumn>\n\t\t\t\t<ColumnListInputs\n\t\t\t\t\tlabel={'Columns to impute'}\n\t\t\t\t\tstep={step}\n\t\t\t\t\tstore={store}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedColumn>\n\t\t\t<LeftAlignedColumn>\n\t\t\t\t<TextField\n\t\t\t\t\trequired\n\t\t\t\t\tlabel={'Fill value'}\n\t\t\t\t\tvalue={internal.args.value && `${internal.args.value}`}\n\t\t\t\t\tplaceholder={'text, number, or boolean'}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tonChange={handleValueChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedColumn>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tflex-wrap: wrap;\n\talign-content: flex-start;\n\tflex-direction: column;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { JoinStep } from '@data-wrangling-components/core'\nimport { JoinStrategy } from '@data-wrangling-components/core'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { useHandleDropdownChange } from '../../common/hooks.js'\nimport { LeftAlignedColumn } from '../../common/index.js'\nimport { EnumDropdown } from '../../controls/EnumDropdown.js'\nimport { dropdownStyles } from '../../controls/styles.js'\nimport type { StepComponentProps } from '../../types.js'\nimport { JoinInputs } from '../shared/index.js'\n\n/**\n * Provides inputs for a Join step.\n */\nexport const Join: React.FC<StepComponentProps> = memo(function Join({\n\tstep,\n\tstore,\n\ttable,\n\tonChange,\n}) {\n\tconst internal = useMemo(() => step as JoinStep, [step])\n\n\tconst handleJoinStrategyChange = useHandleDropdownChange(\n\t\tinternal,\n\t\t'args.strategy',\n\t\tonChange,\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<JoinInputs step={step} store={store} table={table} onChange={onChange} />\n\t\t\t<LeftAlignedColumn>\n\t\t\t\t<EnumDropdown\n\t\t\t\t\trequired\n\t\t\t\t\tlabel={'Join strategy'}\n\t\t\t\t\tenumeration={JoinStrategy}\n\t\t\t\t\tselectedKey={internal.args.strategy || JoinStrategy.Inner}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tonChange={handleJoinStrategyChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedColumn>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tflex-wrap: wrap;\n\talign-content: flex-start;\n\tflex-direction: column;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { LookupStep } from '@data-wrangling-components/core'\nimport { NodeInput } from '@data-wrangling-components/core'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { LeftAlignedColumn } from '../../common/index.js'\nimport type { StepComponentProps } from '../../types.js'\nimport { ColumnListInputs, JoinInputs } from '../shared/index.js'\n\n/**\n * Provides inputs for a Lookup step.\n */\nexport const Lookup: React.FC<StepComponentProps> = memo(function Lookup({\n\tstep,\n\tstore,\n\ttable,\n\tonChange,\n}) {\n\tconst internal = useMemo(() => step as LookupStep, [step])\n\n\treturn (\n\t\t<Container>\n\t\t\t<JoinInputs\n\t\t\t\tlabel=\"lookup\"\n\t\t\t\tstep={step}\n\t\t\t\tstore={store}\n\t\t\t\ttable={table}\n\t\t\t\tonChange={onChange}\n\t\t\t/>\n\t\t\t<LeftAlignedColumn>\n\t\t\t\t<ColumnListInputs\n\t\t\t\t\tlabel={'Columns to copy'}\n\t\t\t\t\tstep={step}\n\t\t\t\t\tstore={store}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tinput={internal.input[NodeInput.Other]?.node}\n\t\t\t\t/>\n\t\t\t</LeftAlignedColumn>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tflex-wrap: wrap;\n\talign-content: flex-start;\n\tflex-direction: column;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { OneHotStep } from '@data-wrangling-components/core'\nimport { TextField } from '@fluentui/react'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { LeftAlignedRow, useHandleTextfieldChange } from '../../common/index.js'\nimport { dropdownStyles } from '../../controls/styles.js'\nimport type { StepComponentProps } from '../../types.js'\n\n/**\n * Provides inputs for a OneHot step.\n */\nexport const OneHot: React.FC<StepComponentProps> = memo(function OneHot({\n\tstep,\n\tonChange,\n}) {\n\tconst internal = useMemo(() => step as OneHotStep, [step])\n\n\tconst handlePrefixChange = useHandleTextfieldChange(\n\t\tinternal,\n\t\t'args.prefix',\n\t\tonChange,\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<TextField\n\t\t\t\t\tlabel={'Prefix'}\n\t\t\t\t\tvalue={internal.args.prefix && `${internal.args.prefix}`}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tonChange={handlePrefixChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { OrderbyInstruction } from '@data-wrangling-components/core'\nimport { SortDirection } from '@data-wrangling-components/core'\nimport { IconButton } from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport { TableColumnDropdown } from './TableColumnDropdown.js'\n\nexport interface SortInstructionProps {\n\ttable?: ColumnTable\n\torder: OrderbyInstruction\n\tonChange?: (order: OrderbyInstruction) => void\n\tonDelete?: () => void\n}\n\n/**\n * Provides a column dropdown, asc/desc toggle, and delete button for editing a table sort.\n */\nexport const SortInstruction: React.FC<SortInstructionProps> = memo(\n\tfunction SortInstruction({ table, order, onChange, onDelete }) {\n\t\tconst { column, direction } = order\n\t\tconst checked = direction === SortDirection.Ascending\n\t\tconst directionName = checked ? 'Ascending' : 'Descending'\n\n\t\tconst handleColumnChange = useCallback(\n\t\t\t(_e, opt) => {\n\t\t\t\tconst update = {\n\t\t\t\t\t...order,\n\t\t\t\t\tcolumn: opt.key,\n\t\t\t\t}\n\t\t\t\tonChange && onChange(update)\n\t\t\t},\n\t\t\t[order, onChange],\n\t\t)\n\n\t\tconst handleDirectionClick = useCallback(() => {\n\t\t\tconst update = {\n\t\t\t\t...order,\n\t\t\t\tdirection:\n\t\t\t\t\torder.direction === SortDirection.Descending\n\t\t\t\t\t\t? SortDirection.Ascending\n\t\t\t\t\t\t: SortDirection.Descending,\n\t\t\t}\n\t\t\tonChange && onChange(update)\n\t\t}, [order, onChange])\n\n\t\tconst handleDeleteClick = useCallback(\n\t\t\t() => onDelete && onDelete(),\n\t\t\t[onDelete],\n\t\t)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<TableColumnDropdown\n\t\t\t\t\ttable={table}\n\t\t\t\t\tlabel={undefined}\n\t\t\t\t\tselectedKey={column}\n\t\t\t\t\tonChange={handleColumnChange}\n\t\t\t\t/>\n\t\t\t\t<IconButton\n\t\t\t\t\ttoggle\n\t\t\t\t\tchecked={checked}\n\t\t\t\t\ttitle={directionName}\n\t\t\t\t\ticonProps={{ iconName: directionName }}\n\t\t\t\t\tonClick={handleDirectionClick}\n\t\t\t\t/>\n\t\t\t\t<IconButton\n\t\t\t\t\ttitle={'Remove this sort'}\n\t\t\t\t\ticonProps={{ iconName: 'Delete' }}\n\t\t\t\t\tonClick={handleDeleteClick}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type {\n\tOrderbyInstruction,\n\tOrderbyStep,\n\tStep,\n} from '@data-wrangling-components/core'\nimport { NodeInput, SortDirection } from '@data-wrangling-components/core'\nimport { ActionButton } from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport set from 'lodash-es/set.js'\nimport { memo, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { useLoadTable } from '../../common/index.js'\nimport { SortInstruction } from '../../controls/index.js'\nimport type { StepComponentProps } from '../../types.js'\n\n/**\n * Provides inputs for an OrderBy step.\n */\nexport const Orderby: React.FC<StepComponentProps> = memo(function Orderby({\n\tstep,\n\tstore,\n\ttable,\n\tonChange,\n\tinput,\n}) {\n\tconst internal = useMemo(() => step as OrderbyStep, [step])\n\n\tconst tbl = useLoadTable(\n\t\tinput || step.input[NodeInput.Source]?.node,\n\t\ttable,\n\t\tstore,\n\t)\n\n\tconst sorts = useSorts(internal, tbl, onChange)\n\n\tconst handleButtonClick = useCallback(() => {\n\t\tonChange &&\n\t\t\tonChange({\n\t\t\t\t...internal,\n\t\t\t\targs: {\n\t\t\t\t\t...internal.args,\n\t\t\t\t\torders: [...(internal.args.orders || []), newSort(tbl)],\n\t\t\t\t},\n\t\t\t})\n\t}, [internal, tbl, onChange])\n\n\treturn (\n\t\t<Container>\n\t\t\t{sorts}\n\t\t\t<ActionButton\n\t\t\t\tonClick={handleButtonClick}\n\t\t\t\ticonProps={{ iconName: 'Add' }}\n\t\t\t\tdisabled={!tbl}\n\t\t\t>\n\t\t\t\tAdd sort\n\t\t\t</ActionButton>\n\t\t</Container>\n\t)\n})\n\nfunction newSort(table?: ColumnTable): OrderbyInstruction {\n\tconst column = table?.columnNames()[0] as string\n\tconst direction = SortDirection.Ascending\n\treturn {\n\t\tcolumn,\n\t\tdirection,\n\t}\n}\n\nfunction useSorts(\n\tstep: OrderbyStep,\n\ttable?: ColumnTable,\n\tonChange?: (step: Step) => void,\n) {\n\treturn useMemo(() => {\n\t\treturn (step.args.orders || []).map((order, index) => {\n\t\t\tconst handleSortChange = (order: OrderbyInstruction) => {\n\t\t\t\tconst update = { ...step }\n\t\t\t\tset(update, `args.orders[${index}]`, order)\n\t\t\t\tonChange && onChange(update)\n\t\t\t}\n\n\t\t\tconst handleDeleteClick = () => {\n\t\t\t\tconst update = { ...step }\n\t\t\t\tupdate.args.orders.splice(index, 1)\n\t\t\t\tonChange && onChange(update)\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<SortInstruction\n\t\t\t\t\tkey={`orderby-${order.column}-${index}`}\n\t\t\t\t\ttable={table}\n\t\t\t\t\torder={order}\n\t\t\t\t\tonChange={handleSortChange}\n\t\t\t\t\tonDelete={handleDeleteClick}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\t}, [step, table, onChange])\n}\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n\tgap: 12px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { PivotStep } from '@data-wrangling-components/core'\nimport {\n\tFieldAggregateOperation,\n\tNodeInput,\n} from '@data-wrangling-components/core'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport {\n\tLeftAlignedRow,\n\tuseHandleDropdownChange,\n\tuseLoadTable,\n} from '../../common/index.js'\nimport { EnumDropdown } from '../../controls/EnumDropdown.js'\nimport { TableColumnDropdown } from '../../controls/index.js'\nimport type { StepComponentProps } from '../../types.js'\n\n/**\n * Just the group/column/op inputs for an aggregation.\n * Input table is expected to be edited elsewhere and configured as the step input.\n */\nexport const Pivot: React.FC<StepComponentProps> = memo(function Pivot({\n\tstep,\n\tstore,\n\ttable,\n\tonChange,\n\tinput,\n}) {\n\tconst internal = useMemo(() => step as PivotStep, [step])\n\n\tconst tbl = useLoadTable(\n\t\tinput || internal.input[NodeInput.Source]?.node,\n\t\ttable,\n\t\tstore,\n\t)\n\n\tconst handleKeyColumnChange = useHandleDropdownChange(\n\t\tinternal,\n\t\t'args.key',\n\t\tonChange,\n\t)\n\n\tconst handleValueColumnChange = useHandleDropdownChange(\n\t\tinternal,\n\t\t'args.value',\n\t\tonChange,\n\t)\n\n\tconst handleOpChange = useHandleDropdownChange(\n\t\tinternal,\n\t\t'args.operation',\n\t\tonChange,\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<TableColumnDropdown\n\t\t\t\t\trequired\n\t\t\t\t\ttable={tbl}\n\t\t\t\t\tlabel={'Column used as key'}\n\t\t\t\t\tselectedKey={internal.args.key}\n\t\t\t\t\tonChange={handleKeyColumnChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<TableColumnDropdown\n\t\t\t\t\trequired\n\t\t\t\t\ttable={tbl}\n\t\t\t\t\tlabel={'Column used as value'}\n\t\t\t\t\tselectedKey={internal.args.value}\n\t\t\t\t\tonChange={handleValueColumnChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<EnumDropdown\n\t\t\t\t\trequired\n\t\t\t\t\tenumeration={FieldAggregateOperation}\n\t\t\t\t\tlabel={'Function'}\n\t\t\t\t\tselectedKey={internal.args.operation}\n\t\t\t\t\tonChange={handleOpChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n\talign-content: flex-start;\n\tjustify-content: flex-start;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type {\n\tDataType,\n\tRecodeStep,\n\tValue,\n} from '@data-wrangling-components/core'\nimport { coerce, NodeInput } from '@data-wrangling-components/core'\nimport type { IDropdownOption } from '@fluentui/react'\nimport { ActionButton, Icon, IconButton, TextField } from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { useColumnType, useLoadTable } from '../../common/index.js'\nimport { ColumnValueDropdown } from '../../controls/index.js'\nimport type { StepComponentProps } from '../../types.js'\nimport {\n\tuseColumnValues,\n\tuseDisabled,\n\tuseHandleAddButtonClick,\n\tuseHandleRecodeChange,\n\tuseRecodeDelete,\n} from './hooks.js'\n\n/**\n * Provides inputs for a RecodeStep.\n */\nexport const Recode: React.FC<StepComponentProps> = memo(function Recode({\n\tstep,\n\tstore,\n\ttable,\n\tonChange,\n\tinput,\n}) {\n\tconst internal = useMemo(() => step as RecodeStep, [step])\n\n\tconst tbl = useLoadTable(\n\t\tinput || step.input[NodeInput.Source]?.node,\n\t\ttable,\n\t\tstore,\n\t)\n\n\tconst values = useColumnValues(internal, tbl)\n\tconst dataType = useColumnType(tbl, internal.args.column)\n\n\tconst handleRecodeChange = useHandleRecodeChange(internal, onChange)\n\tconst handleRecodeDelete = useRecodeDelete(internal, onChange)\n\tconst handleButtonClick = useHandleAddButtonClick(internal, values, onChange)\n\n\tconst columnPairs = useRecodePairs(\n\t\ttbl,\n\t\tinternal,\n\t\tvalues,\n\t\tdataType,\n\t\thandleRecodeChange,\n\t\thandleRecodeDelete,\n\t)\n\n\tconst disabled = useDisabled(internal, values)\n\n\treturn (\n\t\t<Container>\n\t\t\t{columnPairs}\n\t\t\t<ActionButton\n\t\t\t\tonClick={handleButtonClick}\n\t\t\t\ticonProps={{ iconName: 'Add' }}\n\t\t\t\tdisabled={disabled}\n\t\t\t>\n\t\t\t\tAdd mapping\n\t\t\t</ActionButton>\n\t\t</Container>\n\t)\n})\n\nfunction useRecodePairs(\n\ttable: ColumnTable | undefined,\n\tinternal: RecodeStep,\n\tvalues: Value[],\n\tdataType: DataType,\n\tonChange: (previous: Value, oldvalue: Value, newvalue: Value) => void,\n\tonDelete: (value: Value) => void,\n) {\n\treturn useMemo(() => {\n\t\tconst { map } = internal.args\n\t\treturn Object.entries(map || {}).map((valuePair, index) => {\n\t\t\t// the old value will always come off the map as a string key\n\t\t\t// coerce it to the column type for proper comparison\n\t\t\tconst [o, newvalue] = valuePair\n\t\t\tconst oldvalue = coerce(o, dataType)\n\t\t\tconst valueFilter = (value: Value) => {\n\t\t\t\tif (value === oldvalue) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\tif (internal.args.map && internal.args.map[value]) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tconst handleSourceChange = (\n\t\t\t\t_e: React.FormEvent<HTMLDivElement>,\n\t\t\t\topt?: IDropdownOption<any> | undefined,\n\t\t\t) => onChange(oldvalue, opt?.key || oldvalue, newvalue)\n\t\t\tconst handleTextChange = (\n\t\t\t\t_e: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n\t\t\t\tnewValue?: string,\n\t\t\t) => {\n\t\t\t\t// this does force the new value to match the old type, preventing mappings like 0 -> false\n\t\t\t\tconst val = coerce(newValue, dataType)\n\t\t\t\tonChange(oldvalue, oldvalue, val)\n\t\t\t}\n\t\t\tconst handleDeleteClick = () => onDelete(oldvalue)\n\t\t\treturn (\n\t\t\t\t<ColumnPair key={`column-Recode-${oldvalue}-${index}`}>\n\t\t\t\t\t<ColumnValueDropdown\n\t\t\t\t\t\tcolumn={internal.args.column}\n\t\t\t\t\t\ttable={table}\n\t\t\t\t\t\tvalues={values}\n\t\t\t\t\t\tfilter={valueFilter}\n\t\t\t\t\t\tlabel={undefined}\n\t\t\t\t\t\tselectedKey={oldvalue}\n\t\t\t\t\t\tonChange={handleSourceChange}\n\t\t\t\t\t\tstyles={{\n\t\t\t\t\t\t\troot: {\n\t\t\t\t\t\t\t\twidth: 130,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<Icon\n\t\t\t\t\t\ticonName={'Forward'}\n\t\t\t\t\t\tstyles={{ root: { marginLeft: 4, marginRight: 4 } }}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tplaceholder={'New value'}\n\t\t\t\t\t\tvalue={newvalue}\n\t\t\t\t\t\tonChange={handleTextChange}\n\t\t\t\t\t\tstyles={{ root: { width: 130 } }}\n\t\t\t\t\t/>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\ttitle={'Remove this Recode'}\n\t\t\t\t\t\ticonProps={{ iconName: 'Delete' }}\n\t\t\t\t\t\tonClick={handleDeleteClick}\n\t\t\t\t\t/>\n\t\t\t\t</ColumnPair>\n\t\t\t)\n\t\t})\n\t}, [table, internal, values, dataType, onChange, onDelete])\n}\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n\tgap: 12px;\n`\n\nconst ColumnPair = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { RenameStep } from '@data-wrangling-components/core'\nimport { NodeInput } from '@data-wrangling-components/core'\nimport type { IDropdownOption } from '@fluentui/react'\nimport {\n\tActionButton,\n\tIcon,\n\tIconButton,\n\tLabel,\n\tTextField,\n} from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { useColumnRecordDelete, useLoadTable } from '../../common/index.js'\nimport { TableColumnDropdown } from '../../controls/index.js'\nimport type { StepComponentProps } from '../../types.js'\nimport {\n\tuseDisabled,\n\tuseHandleAddButtonClick,\n\tuseHandleColumnChange,\n} from './hooks.js'\n\n/**\n * Provides inputs for a RenameStep.\n */\nexport const Rename: React.FC<StepComponentProps> = memo(function Rename({\n\tstep,\n\tstore,\n\ttable,\n\tonChange,\n\tinput,\n}) {\n\tconst internal = useMemo(() => step as RenameStep, [step])\n\n\tconst tbl = useLoadTable(\n\t\tinput || step.input[NodeInput.Source]?.node,\n\t\ttable,\n\t\tstore,\n\t)\n\n\tconst handleColumnChange = useHandleColumnChange(internal, onChange)\n\tconst handleColumnDelete = useColumnRecordDelete(internal, onChange)\n\tconst handleButtonClick = useHandleAddButtonClick(internal, tbl, onChange)\n\n\tconst columnPairs = useColumnPairs(\n\t\ttbl,\n\t\tinternal,\n\t\thandleColumnChange,\n\t\thandleColumnDelete,\n\t)\n\n\tconst disabled = useDisabled(internal, tbl)\n\n\treturn (\n\t\t<Container>\n\t\t\t<Label>Column renames</Label>\n\t\t\t{columnPairs}\n\t\t\t<ActionButton\n\t\t\t\tonClick={handleButtonClick}\n\t\t\t\ticonProps={{ iconName: 'Add' }}\n\t\t\t\tdisabled={disabled}\n\t\t\t>\n\t\t\t\tAdd rename\n\t\t\t</ActionButton>\n\t\t</Container>\n\t)\n})\n\nfunction useColumnPairs(\n\ttable: ColumnTable | undefined,\n\tinternal: RenameStep,\n\tonChange: (previous: string, oldName: string, newName: string) => void,\n\tonDelete: (name: string) => void,\n) {\n\treturn useMemo(() => {\n\t\tconst { columns } = internal.args\n\t\treturn Object.entries(columns || {}).map((column, index) => {\n\t\t\tconst [oldname, newname] = column\n\t\t\tconst columnFilter = (name: string) => {\n\t\t\t\tif (name === oldname) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\tif (internal.args.columns && internal.args.columns[name]) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tconst handleColumnChange = (\n\t\t\t\t_e: React.FormEvent<HTMLDivElement>,\n\t\t\t\topt?: IDropdownOption<any> | undefined,\n\t\t\t) => onChange(oldname, (opt?.key as string) || oldname, newname)\n\t\t\tconst handleTextChange = (\n\t\t\t\t_e: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n\t\t\t\tnewValue?: string,\n\t\t\t) => {\n\t\t\t\tonChange(oldname, oldname, newValue ?? '')\n\t\t\t}\n\t\t\tconst handleDeleteClick = () => onDelete(oldname)\n\t\t\treturn (\n\t\t\t\t<ColumnPair key={`column-rename-${oldname}-${index}`}>\n\t\t\t\t\t<TableColumnDropdown\n\t\t\t\t\t\ttable={table}\n\t\t\t\t\t\tfilter={columnFilter}\n\t\t\t\t\t\tlabel={undefined}\n\t\t\t\t\t\tselectedKey={oldname}\n\t\t\t\t\t\tonChange={handleColumnChange}\n\t\t\t\t\t\tstyles={{\n\t\t\t\t\t\t\troot: {\n\t\t\t\t\t\t\t\twidth: 130,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<Icon\n\t\t\t\t\t\ticonName={'Forward'}\n\t\t\t\t\t\tstyles={{ root: { marginLeft: 4, marginRight: 4 } }}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tplaceholder={'New name'}\n\t\t\t\t\t\tvalue={newname}\n\t\t\t\t\t\tonChange={handleTextChange}\n\t\t\t\t\t\tstyles={{ root: { width: 130 } }}\n\t\t\t\t\t/>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\ttitle={'Remove this rename'}\n\t\t\t\t\t\ticonProps={{ iconName: 'Delete' }}\n\t\t\t\t\t\tonClick={handleDeleteClick}\n\t\t\t\t\t/>\n\t\t\t\t</ColumnPair>\n\t\t\t)\n\t\t})\n\t}, [table, internal, onChange, onDelete])\n}\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n\tgap: 12px;\n`\n\nconst ColumnPair = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { RollupStep } from '@data-wrangling-components/core'\nimport { FieldAggregateOperation } from '@data-wrangling-components/core'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { LeftAlignedRow, useHandleDropdownChange } from '../../common/index.js'\nimport { EnumDropdown } from '../../controls/EnumDropdown.js'\nimport type { StepComponentProps } from '../../types.js'\n/**\n * Just the column/op inputs for an rollup.\n * Input table is expected to be edited elsewhere and configured as the step input.\n */\nexport const Rollup: React.FC<StepComponentProps> = memo(function Rollup({\n\tstep,\n\tonChange,\n}) {\n\tconst internal = useMemo(() => step as RollupStep, [step])\n\n\tconst handleOpChange = useHandleDropdownChange(\n\t\tinternal,\n\t\t'args.operation',\n\t\tonChange,\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<EnumDropdown\n\t\t\t\t\trequired\n\t\t\t\t\tenumeration={FieldAggregateOperation}\n\t\t\t\t\tlabel={'Function'}\n\t\t\t\t\tselectedKey={internal.args.operation}\n\t\t\t\t\tonChange={handleOpChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { SampleStep } from '@data-wrangling-components/core'\nimport { Position, SpinButton } from '@fluentui/react'\nimport { format } from 'd3-format'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport {\n\tLeftAlignedRow,\n\tuseHandleSpinButtonChange,\n} from '../../common/index.js'\nimport type { StepComponentProps } from '../../types.js'\n\nconst whole = format('d')\n\n/**\n * Provides inputs for a Sample step.\n */\nexport const Sample: React.FC<StepComponentProps> = memo(function Sample({\n\tstep,\n\tonChange,\n}) {\n\tconst internal = useMemo(() => step as SampleStep, [step])\n\n\tconst handleSizeChange = useHandleSpinButtonChange(\n\t\tinternal,\n\t\t'args.size',\n\t\tonChange,\n\t)\n\n\tconst handlePercentChange = useHandleSpinButtonChange(\n\t\tinternal,\n\t\t'args.proportion',\n\t\tonChange,\n\t\tval => {\n\t\t\tif (val != null) {\n\t\t\t\treturn +val / 100\n\t\t\t}\n\t\t},\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<SpinButton\n\t\t\t\t\tlabel={'Number of rows'}\n\t\t\t\t\tlabelPosition={Position.top}\n\t\t\t\t\tmin={0}\n\t\t\t\t\tstep={1}\n\t\t\t\t\tdisabled={!!internal.args.proportion}\n\t\t\t\t\tvalue={internal.args.size ? `${internal.args.size}` : ''}\n\t\t\t\t\tstyles={spinStyles}\n\t\t\t\t\tonChange={handleSizeChange}\n\t\t\t\t/>\n\t\t\t\t<Or>or</Or>\n\t\t\t\t<SpinButton\n\t\t\t\t\tlabel={'Row percentage'}\n\t\t\t\t\tlabelPosition={Position.top}\n\t\t\t\t\tmin={0}\n\t\t\t\t\tmax={100}\n\t\t\t\t\tstep={1}\n\t\t\t\t\tdisabled={!!internal.args.size}\n\t\t\t\t\tvalue={\n\t\t\t\t\t\tinternal.args.proportion\n\t\t\t\t\t\t\t? `${whole(internal.args.proportion * 100)}`\n\t\t\t\t\t\t\t: ''\n\t\t\t\t\t}\n\t\t\t\t\tstyles={spinStyles}\n\t\t\t\t\tonChange={handlePercentChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n`\n\nconst Or = styled.div`\n\tmargin-left: 8px;\n\tmargin-right: 8px;\n\theight: 100%;\n\tdisplay: flex;\n\talign-items: center;\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n`\n\nconst spinStyles = {\n\troot: {\n\t\twidth: 120,\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type {\n\tSpreadArgs,\n\tSpreadStep,\n\tStep,\n} from '@data-wrangling-components/core'\nimport { NodeInput } from '@data-wrangling-components/core'\nimport { ActionButton, Label } from '@fluentui/react'\nimport set from 'lodash-es/set.js'\nimport { memo, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { useHandleDropdownChange, useLoadTable } from '../../common/index.js'\nimport { ColumnSpread } from '../../controls/ColumnSpread.js'\nimport { TableColumnDropdown } from '../../controls/index.js'\nimport type { StepComponentProps } from '../../types.js'\n\n/**\n * Provides inputs for a step that needs lists of columns.\n */\nexport const Spread: React.FC<StepComponentProps> = memo(function Spread({\n\tstep,\n\tstore,\n\ttable,\n\tonChange,\n\tinput,\n}) {\n\tconst internal = useMemo(() => step as SpreadStep, [step])\n\n\tconst tbl = useLoadTable(\n\t\tinput || step.input[NodeInput.Source]?.node,\n\t\ttable,\n\t\tstore,\n\t)\n\tconst columns = useColumns(internal, onChange)\n\n\tconst handleButtonClick = useCallback(() => {\n\t\tonChange &&\n\t\t\tonChange({\n\t\t\t\t...internal,\n\t\t\t\targs: {\n\t\t\t\t\t...internal.args,\n\t\t\t\t\tto: [...internal.args.to, next(internal.args.to)],\n\t\t\t\t},\n\t\t\t})\n\t}, [internal, onChange])\n\n\tconst handleColumnChange = useHandleDropdownChange(\n\t\tstep,\n\t\t'args.column',\n\t\tonChange,\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<TableColumnDropdown\n\t\t\t\trequired\n\t\t\t\ttable={tbl}\n\t\t\t\tlabel={'Column to spread'}\n\t\t\t\tselectedKey={(step.args as SpreadArgs).column}\n\t\t\t\tonChange={handleColumnChange}\n\t\t\t/>\n\n\t\t\t<Label>New column names</Label>\n\n\t\t\t{columns}\n\t\t\t<ActionButton\n\t\t\t\tonClick={handleButtonClick}\n\t\t\t\ticonProps={{ iconName: 'Add' }}\n\t\t\t\tdisabled={!tbl}\n\t\t\t>\n\t\t\t\tAdd column\n\t\t\t</ActionButton>\n\t\t</Container>\n\t)\n})\n\nfunction next(columns: string[]): string {\n\treturn `New column (${columns.length})`\n}\n\nfunction useColumns(step: SpreadStep, onChange?: (step: Step) => void) {\n\treturn useMemo(() => {\n\t\treturn (step.args.to || []).map((column: string, index: number) => {\n\t\t\tconst handleColumnChange = (col: string) => {\n\t\t\t\tconst update = { ...step }\n\t\t\t\tset(update, `args.to[${index}]`, col)\n\t\t\t\tonChange && onChange(update)\n\t\t\t}\n\n\t\t\tconst handleDeleteClick = () => {\n\t\t\t\tconst update = { ...step }\n\t\t\t\tupdate.args.to.splice(index, 1)\n\t\t\t\tonChange && onChange(update)\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<ColumnSpread\n\t\t\t\t\tkey={`column-list-${index}`}\n\t\t\t\t\tcolumn={column}\n\t\t\t\t\tonChange={handleColumnChange}\n\t\t\t\t\tonDelete={handleDeleteClick}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\t}, [step, onChange])\n}\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n\tgap: 12px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { PivotStep } from '@data-wrangling-components/core'\nimport { NodeInput } from '@data-wrangling-components/core'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport {\n\tLeftAlignedRow,\n\tuseHandleDropdownChange,\n\tuseLoadTable,\n} from '../../common/index.js'\nimport { TableColumnDropdown } from '../../controls/index.js'\nimport type { StepComponentProps } from '../../types'\n\n/**\n * Just the group/column/op inputs for an aggregation.\n * Input table is expected to be edited elsewhere and configured as the step input.\n */\nexport const Unfold: React.FC<StepComponentProps> = memo(function Unfold({\n\tstep,\n\tstore,\n\ttable,\n\tonChange,\n\tinput,\n}) {\n\tconst internal = useMemo(() => step as PivotStep, [step])\n\n\tconst tbl = useLoadTable(\n\t\tinput || internal.input[NodeInput.Source]?.node,\n\t\ttable,\n\t\tstore,\n\t)\n\n\tconst handleKeyColumnChange = useHandleDropdownChange(\n\t\tinternal,\n\t\t'args.key',\n\t\tonChange,\n\t)\n\n\tconst handleValueColumnChange = useHandleDropdownChange(\n\t\tinternal,\n\t\t'args.value',\n\t\tonChange,\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<TableColumnDropdown\n\t\t\t\t\trequired\n\t\t\t\t\ttable={tbl}\n\t\t\t\t\tlabel={'Column used as key'}\n\t\t\t\t\tselectedKey={internal.args.key}\n\t\t\t\t\tonChange={handleKeyColumnChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t\t<LeftAlignedRow>\n\t\t\t\t<TableColumnDropdown\n\t\t\t\t\trequired\n\t\t\t\t\ttable={tbl}\n\t\t\t\t\tlabel={'Column used as value'}\n\t\t\t\t\tselectedKey={internal.args.value}\n\t\t\t\t\tonChange={handleValueColumnChange}\n\t\t\t\t/>\n\t\t\t</LeftAlignedRow>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n\talign-content: flex-start;\n\tjustify-content: flex-start;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { memo } from 'react'\n\nimport type { StepComponentProps } from '../../types.js'\n\n/**\n * Provides inputs for an ungroup step.\n */\nexport const NoParameters: React.FC<StepComponentProps> = memo(\n\tfunction NoParameters() {\n\t\treturn null\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Step } from '@data-wrangling-components/core'\n\nimport type { StepComponentProps } from './types.js'\nimport {\n\tAggregate,\n\tBin,\n\tBinarize,\n\tBooleanLogic,\n\tColumnListOperation,\n\tConvert,\n\tDerive,\n\tErase,\n\tFetch,\n\tFill,\n\tFilter,\n\tFold,\n\tImpute,\n\tJoin,\n\tLookup,\n\tMerge,\n\tNoParameters,\n\tOneHot,\n\tOrderby,\n\tPivot,\n\tRecode,\n\tRename,\n\tRollup,\n\tSample,\n\tSetOperation,\n\tSpread,\n\tUnfold,\n\tWindow,\n} from './verbs/index.js'\n\nconst verb: Record<string, React.FC<StepComponentProps>> = {\n\taggregate: Aggregate,\n\tbin: Bin,\n\tbinarize: Binarize,\n\tboolean: BooleanLogic,\n\tconcat: SetOperation,\n\tconvert: Convert,\n\tdedupe: ColumnListOperation,\n\tderive: Derive,\n\tdifference: SetOperation,\n\terase: Erase,\n\tfetch: Fetch,\n\tfill: Fill,\n\tfilter: Filter,\n\tfold: Fold,\n\tgroupby: ColumnListOperation,\n\tintersect: SetOperation,\n\timpute: Impute,\n\tjoin: Join,\n\tlookup: Lookup,\n\tmerge: Merge,\n\tonehot: OneHot,\n\torderby: Orderby,\n\tpivot: Pivot,\n\trecode: Recode,\n\trename: Rename,\n\trollup: Rollup,\n\tsample: Sample,\n\tselect: ColumnListOperation,\n\tspread: Spread,\n\tunfold: Unfold,\n\tungroup: NoParameters,\n\tunion: SetOperation,\n\tunorder: NoParameters,\n\tunroll: ColumnListOperation,\n\twindow: Window,\n}\n\n/**\n * Given a Step definition, returns the correct React component function.\n * @param step -\n */\nexport function selectStepComponent(step: Step): React.FC<StepComponentProps> {\n\tconst result = verb[step.verb]\n\tif (!result) {\n\t\tthrow new Error(`verb ${step.verb} not found`)\n\t}\n\treturn result\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { isOutputColumnStep, NodeInput } from '@data-wrangling-components/core'\nimport isNil from 'lodash-es/isNil.js'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport type { DescriptionRow, VerbDescriptionProps } from '../types.js'\n\nexport const VerbDescription: React.FC<VerbDescriptionProps> = memo(\n\tfunction VerbDescription({\n\t\tstep,\n\t\trows,\n\t\tshowInput,\n\t\tshowOutput,\n\t\tshowOutputColumn,\n\t\tstyle,\n\t}) {\n\t\tconst rws = useMemo(() => {\n\t\t\tfunction loop(rows: DescriptionRow[]) {\n\t\t\t\treturn rows.map((row, index) => (\n\t\t\t\t\t<Row\n\t\t\t\t\t\tkey={`verb-description-row-${row.value}-${index}`}\n\t\t\t\t\t\ttitle={row.title}\n\t\t\t\t\t>\n\t\t\t\t\t\t<KeyValue>\n\t\t\t\t\t\t\t{row.before ? <Key>{row.before}</Key> : null}\n\t\t\t\t\t\t\t{isNil(row.value) ? (\n\t\t\t\t\t\t\t\t<Unset />\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<Value title={row.value}>{row.value}</Value>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{row.after ? <Key>{row.after}</Key> : null}\n\t\t\t\t\t\t</KeyValue>\n\t\t\t\t\t\t{row.sub ? loop(row.sub) : null}\n\t\t\t\t\t</Row>\n\t\t\t\t))\n\t\t\t}\n\t\t\treturn loop(rows)\n\t\t}, [rows])\n\t\tconst shouldShowOutputColumn = showOutputColumn && isOutputColumnStep(step)\n\t\tconst input = step.input[NodeInput.Source]?.node\n\t\treturn (\n\t\t\t<Container style={style}>\n\t\t\t\t<Verb>{step.verb}</Verb>\n\t\t\t\t{showInput ? (\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<KeyValue>\n\t\t\t\t\t\t\t<Key>table</Key>\n\t\t\t\t\t\t\t{!input ? <Unset /> : <Value>{input}</Value>}\n\t\t\t\t\t\t</KeyValue>\n\t\t\t\t\t</Row>\n\t\t\t\t) : null}\n\t\t\t\t{rws}\n\t\t\t\t{showOutput ? (\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<KeyValue>\n\t\t\t\t\t\t\t<Key>into table</Key>\n\t\t\t\t\t\t\t{!step.id ? <Unset /> : <Value>{step.id}</Value>}\n\t\t\t\t\t\t</KeyValue>\n\t\t\t\t\t</Row>\n\t\t\t\t) : null}\n\t\t\t\t{shouldShowOutputColumn ? (\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<KeyValue>\n\t\t\t\t\t\t\t<Key>as column</Key>\n\t\t\t\t\t\t\t{!(step.args as any).to ? (\n\t\t\t\t\t\t\t\t<Unset />\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<Value>{(step.args as any).to}</Value>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</KeyValue>\n\t\t\t\t\t</Row>\n\t\t\t\t) : null}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n\tmin-height: 180px;\n`\n\nconst Verb = styled.div`\n\ttext-transform: uppercase;\n\tfont-weight: bold;\n\talign-items: center;\n\twidth: 100%;\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n`\n\nconst Row = styled.div`\n\tpadding-left: 8px;\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nconst KeyValue = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tgap: 4px;\n`\n\nconst Key = styled.div``\n\nconst Unset = styled.div`\n\tcolor: ${({ theme }) => theme.application().lowContrast().hex()};\n\t&:before {\n\t\tcontent: 'unset';\n\t}\n`\n\nconst Value = styled.div`\n\tmax-width: 240px;\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n\tfont-weight: bold;\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { AggregateStep } from '@data-wrangling-components/core'\nimport { memo, useMemo } from 'react'\n\nimport { VerbDescription } from '../../index.js'\nimport type { StepDescriptionProps } from '../../types.js'\n\nexport const AggregateDescription: React.FC<StepDescriptionProps> = memo(\n\tfunction AggregateDescription(props) {\n\t\tconst rows = useMemo(() => {\n\t\t\tconst internal = props.step as AggregateStep\n\t\t\tconst { args } = internal\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tbefore: 'group by',\n\t\t\t\t\tvalue: args.groupby,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbefore: 'rollup column',\n\t\t\t\t\tvalue: args.column,\n\t\t\t\t\tsub: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbefore: 'with function',\n\t\t\t\t\t\t\tvalue: args.operation,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t]\n\t\t}, [props])\n\t\treturn <VerbDescription {...props} rows={rows} />\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Step, TableStore } from '@data-wrangling-components/core'\nimport flow from 'lodash-es/flow.js'\nimport { memo, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport {\n\tselectStepComponent,\n\tselectStepDescription,\n\twithInputColumnDropdown,\n\twithInputTableDropdown,\n\twithOutputColumnTextfield,\n} from '../../index.js'\n\ninterface StepComponentProps {\n\tstep: Step\n\tstore: TableStore\n\tindex: number\n\tonChange: (step: Step, index: number) => void\n}\n\n/**\n * Let's us render the Steps in a loop while memoing all the functions\n */\nexport const StepComponent: React.FC<StepComponentProps> = memo(\n\tfunction StepComponent({ step, store, index, onChange }) {\n\t\tconst Component = useMemo(() => selectStepComponent(step), [step])\n\t\tconst Description = useMemo(() => selectStepDescription(step), [step])\n\t\tconst WithAllArgs = useMemo(\n\t\t\t() =>\n\t\t\t\tflow(\n\t\t\t\t\twithInputColumnDropdown(),\n\t\t\t\t\twithOutputColumnTextfield(),\n\t\t\t\t\twithInputTableDropdown(),\n\t\t\t\t)(Component),\n\t\t\t[Component],\n\t\t)\n\t\tconst handleStepChange = useCallback(\n\t\t\tstep => onChange(step, index),\n\t\t\t[index, onChange],\n\t\t)\n\t\treturn (\n\t\t\t<Container className=\"step-component\">\n\t\t\t\t<WithAllArgs step={step} store={store} onChange={handleStepChange} />\n\t\t\t\t<DescriptionContainer>\n\t\t\t\t\t<Description step={step} showInput showOutput showOutputColumn />\n\t\t\t\t</DescriptionContainer>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Container = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tgap: 36px;\n`\n\nconst DescriptionContainer = styled.div`\n\tmargin-top: 8px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Specification } from '@data-wrangling-components/core'\nimport type { DetailsListFeatures } from '@data-wrangling-components/react'\nimport { StatsColumnType } from '@data-wrangling-components/react'\nimport type { FileWithPath } from '@data-wrangling-components/utilities'\nimport {\n\tFileCollection,\n\tFileExtensions,\n\tFileMimeType,\n\tFileType,\n} from '@data-wrangling-components/utilities'\nimport type { IDropdownOption, IDropdownStyles } from '@fluentui/react'\nimport { Checkbox, Dropdown } from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { FileDrop } from '~components/FileDrop'\n\nimport { useLoadSpecFile, useLoadTableFiles } from './DebugPage.hooks'\nimport { ExamplesDropdown } from './ExamplesDropdown'\n\nconst options: IDropdownOption[] = Object.values(StatsColumnType).map(o => {\n\treturn { key: o, text: o } as IDropdownOption\n})\n\nconst dropdownStyles: Partial<IDropdownStyles> = {\n\tdropdown: { marginTop: '4px' },\n}\nexport interface ControlBarProps {\n\tselected?: Specification\n\tonSelectSpecification?: (spec: Specification | undefined) => void\n\tonLoadFiles?: (files: Map<string, ColumnTable>) => void\n\tfeatures: DetailsListFeatures\n\tonFeaturesChange?: (features: DetailsListFeatures) => void\n\tcompact: boolean\n\tonCompactChange: (auto: boolean) => void\n\tautoType: boolean\n\tonAutoTypeChange: (autoType: boolean) => void\n}\n\nexport const ControlBar: React.FC<ControlBarProps> = memo(function ControlBar({\n\tselected,\n\tonSelectSpecification,\n\tonLoadFiles,\n\tfeatures,\n\tonFeaturesChange,\n\tcompact,\n\tonCompactChange,\n\tautoType,\n\tonAutoTypeChange,\n}) {\n\tconst loadFiles = useLoadTableFiles()\n\tconst loadSpec = useLoadSpecFile()\n\tconst [fileCollection, setFileCollection] = useState<FileCollection>(\n\t\tnew FileCollection(),\n\t)\n\n\tconst updateFileCollection = useCallback(\n\t\tasync (files: FileWithPath[]) => {\n\t\t\tawait fileCollection.add(files)\n\t\t\tsetFileCollection(fileCollection)\n\t\t},\n\t\t[fileCollection, setFileCollection],\n\t)\n\n\tconst handleDropCSV = useCallback(\n\t\tasync (fc: FileCollection) => {\n\t\t\tconst files = fc.list(FileType.csv)\n\t\t\tif (!files.length) return\n\t\t\tupdateFileCollection(files)\n\t\t\tconst loaded = await loadFiles(files)\n\t\t\tonLoadFiles && onLoadFiles(loaded)\n\t\t},\n\t\t[onLoadFiles, loadFiles, updateFileCollection],\n\t)\n\tconst handleDropJSON = useCallback(\n\t\tasync (fc: FileCollection) => {\n\t\t\t// ignore any after the first. I suppose we could auto-link the steps, but that's dangerous\n\t\t\tconst files = fc.list(FileType.json)\n\t\t\tconst first = files[0]\n\t\t\tif (!first) return\n\t\t\tupdateFileCollection([first])\n\t\t\tconst spec = await loadSpec(first)\n\t\t\tonSelectSpecification && onSelectSpecification(spec)\n\t\t},\n\t\t[onSelectSpecification, loadSpec, updateFileCollection],\n\t)\n\tconst handleDropZip = useCallback(\n\t\t(fileCollection: FileCollection) => {\n\t\t\tsetFileCollection(fileCollection)\n\t\t\thandleDropCSV(fileCollection)\n\t\t\thandleDropJSON(fileCollection)\n\t\t},\n\t\t[handleDropCSV, handleDropJSON, setFileCollection],\n\t)\n\n\tconst handleSmartHeadersChange = useCallback(\n\t\t(e, checked?: boolean) =>\n\t\t\tonFeaturesChange &&\n\t\t\tonFeaturesChange({ ...features, smartHeaders: checked }),\n\t\t[features, onFeaturesChange],\n\t)\n\n\tconst handleFeaturesChange = useCallback(\n\t\t(propName: string, checked?: boolean) =>\n\t\t\tonFeaturesChange &&\n\t\t\tonFeaturesChange({ ...features, [propName]: checked }),\n\t\t[features, onFeaturesChange],\n\t)\n\n\tconst handleStatsColumnTypeChange = useCallback(\n\t\t(e: any, option: IDropdownOption | undefined) => {\n\t\t\tconst selectedKeys = features.statsColumnTypes || []\n\t\t\tconst selectedTypes = option?.selected\n\t\t\t\t? [...selectedKeys, option.key as StatsColumnType]\n\t\t\t\t: selectedKeys.filter(key => key !== option?.key)\n\n\t\t\tonFeaturesChange &&\n\t\t\t\toption &&\n\t\t\t\tonFeaturesChange({\n\t\t\t\t\t...features,\n\t\t\t\t\tstatsColumnTypes: selectedTypes,\n\t\t\t\t})\n\t\t},\n\t\t[features, onFeaturesChange],\n\t)\n\tconst handleArrayFeaturesChange = useCallback(\n\t\t(propName: string, checked?: boolean) => {\n\t\t\tonFeaturesChange &&\n\t\t\t\tonFeaturesChange({\n\t\t\t\t\t...features,\n\t\t\t\t\t[propName]: checked,\n\t\t\t\t})\n\t\t},\n\n\t\t[features, onFeaturesChange],\n\t)\n\n\tconst handleCompactChange = useCallback(\n\t\t(e, checked) => onCompactChange(checked),\n\t\t[onCompactChange],\n\t)\n\n\tconst handleAutoTypeChange = useCallback(\n\t\t(e, checked) => onAutoTypeChange(checked),\n\t\t[onAutoTypeChange],\n\t)\n\treturn (\n\t\t<Container>\n\t\t\t<ExamplesContainer>\n\t\t\t\t<Examples>\n\t\t\t\t\t<ExamplesDropdown onChange={onSelectSpecification} />\n\t\t\t\t</Examples>\n\t\t\t\t<Description>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{selected\n\t\t\t\t\t\t\t? selected.description\n\t\t\t\t\t\t\t: 'Description for the selected example will show here'}\n\t\t\t\t\t</p>\n\t\t\t\t</Description>\n\t\t\t</ExamplesContainer>\n\t\t\t<ControlBlock>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Auto-type columns'}\n\t\t\t\t\t\tchecked={autoType}\n\t\t\t\t\t\tonChange={handleAutoTypeChange}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Smart headers'}\n\t\t\t\t\t\tchecked={features.smartHeaders}\n\t\t\t\t\t\tonChange={handleSmartHeadersChange}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Column header stats'}\n\t\t\t\t\t\tchecked={features.statsColumnHeaders}\n\t\t\t\t\t\tdisabled={features.smartHeaders}\n\t\t\t\t\t\tonChange={(e, checked) =>\n\t\t\t\t\t\t\thandleFeaturesChange('statsColumnHeaders', checked)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\tdisabled={!features.statsColumnHeaders && !features.smartHeaders}\n\t\t\t\t\t\tonChange={handleStatsColumnTypeChange}\n\t\t\t\t\t\tmultiSelect\n\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\tselectedKeys={features.statsColumnTypes}\n\t\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Column header histograms'}\n\t\t\t\t\t\tchecked={features.histogramColumnHeaders}\n\t\t\t\t\t\tdisabled={features.smartHeaders}\n\t\t\t\t\t\tonChange={(e, checked) =>\n\t\t\t\t\t\t\thandleFeaturesChange('histogramColumnHeaders', checked)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t</ControlBlock>\n\t\t\t<ControlBlock>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Smart cells'}\n\t\t\t\t\t\tchecked={features.smartCells}\n\t\t\t\t\t\tonChange={(e, checked) =>\n\t\t\t\t\t\t\thandleFeaturesChange('smartCells', checked)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Number magnitude'}\n\t\t\t\t\t\tchecked={features.showNumberMagnitude}\n\t\t\t\t\t\tdisabled={features.smartCells}\n\t\t\t\t\t\tonChange={(e, checked) =>\n\t\t\t\t\t\t\thandleFeaturesChange('showNumberMagnitude', checked)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Boolean symbol'}\n\t\t\t\t\t\tchecked={features.showBooleanSymbol}\n\t\t\t\t\t\tdisabled={features.smartCells}\n\t\t\t\t\t\tonChange={(e, checked) =>\n\t\t\t\t\t\t\thandleFeaturesChange('showBooleanSymbol', checked)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Format date'}\n\t\t\t\t\t\tchecked={features.showDateFormatted}\n\t\t\t\t\t\tdisabled={features.smartCells}\n\t\t\t\t\t\tonChange={(e, checked) =>\n\t\t\t\t\t\t\thandleFeaturesChange('showDateFormatted', checked)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t</ControlBlock>\n\t\t\t<ControlBlock>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Sparkbar'}\n\t\t\t\t\t\tchecked={!!features.showSparkbar}\n\t\t\t\t\t\tdisabled={features.smartCells}\n\t\t\t\t\t\tonChange={(e, checked) =>\n\t\t\t\t\t\t\thandleArrayFeaturesChange('showSparkbar', checked)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Sparkline'}\n\t\t\t\t\t\tchecked={!!features.showSparkline}\n\t\t\t\t\t\tdisabled={features.smartCells}\n\t\t\t\t\t\tonChange={(e, checked) =>\n\t\t\t\t\t\t\thandleArrayFeaturesChange('showSparkline', checked)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Categorical bar'}\n\t\t\t\t\t\tchecked={!!features.showCategoricalBar}\n\t\t\t\t\t\tdisabled={features.smartCells}\n\t\t\t\t\t\tonChange={(e, checked) =>\n\t\t\t\t\t\t\thandleArrayFeaturesChange('showCategoricalBar', checked)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Multivalues on dropdown'}\n\t\t\t\t\t\tchecked={!!features.showDropdown}\n\t\t\t\t\t\tdisabled={features.smartCells}\n\t\t\t\t\t\tonChange={(e, checked) =>\n\t\t\t\t\t\t\thandleArrayFeaturesChange('showDropdown', checked)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t\t<Control>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tlabel={'Compact rows'}\n\t\t\t\t\t\tchecked={compact}\n\t\t\t\t\t\tonChange={handleCompactChange}\n\t\t\t\t\t/>\n\t\t\t\t</Control>\n\t\t\t</ControlBlock>\n\t\t\t<DropBlock>\n\t\t\t\t<Drop>\n\t\t\t\t\t<FileDrop onDrop={handleDropCSV} />\n\t\t\t\t</Drop>\n\t\t\t\t<Drop>\n\t\t\t\t\t<FileDrop\n\t\t\t\t\t\tonDrop={handleDropJSON}\n\t\t\t\t\t\textensions={[FileExtensions.json]}\n\t\t\t\t\t/>\n\t\t\t\t</Drop>\n\t\t\t\t<Drop>\n\t\t\t\t\t<FileDrop onDrop={handleDropZip} extensions={[FileMimeType.zip]} />\n\t\t\t\t</Drop>\n\t\t\t</DropBlock>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tpadding: 0 12px 12px;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\theight: 170px;\n\tmargin-bottom: 2rem;\n`\n\nconst Examples = styled.div``\nconst ExamplesContainer = styled.div``\n\nconst Description = styled.div`\n\twidth: 400px;\n\tflex-direction: column;\n\tjustify-content: center;\n`\n\nconst ControlBlock = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 8px;\n`\n\nconst Control = styled.div`\n\twidth: 200px;\n`\n\nconst DropBlock = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n\tgap: 10px;\n`\n\nconst Drop = styled.div`\n\twidth: 160px;\n\theight: 50px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { DetailsListFeatures } from '@data-wrangling-components/react'\nimport {\n\tArqueroDetailsList,\n\tArqueroTableHeader,\n\tcreateDefaultHeaderCommandBar,\n\tdownloadCommand,\n\tvisibleColumnsCommand,\n} from '@data-wrangling-components/react'\nimport type { IColumn, IDropdownOption } from '@fluentui/react'\nimport { useThematic } from '@thematic/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useCallback, useEffect, useMemo, useState } from 'react'\nimport type { SetterOrUpdater } from 'recoil'\nimport styled from 'styled-components'\n\nexport interface ColumnConfig {\n\twidth?: number\n\ticonName?: string\n}\n\nexport type ColumnConfigMap = Record<string, ColumnConfig>\n\nexport interface TableProps {\n\tname?: string\n\ttable: ColumnTable\n\tconfig: ColumnConfigMap\n\tfeatures?: DetailsListFeatures\n\tcompact?: boolean\n\tonRenameTable?: (name: string) => void\n}\n\nexport const Table: React.FC<TableProps> = memo(function Table({\n\tname,\n\ttable,\n\tconfig = {},\n\tfeatures = {},\n\tcompact,\n\tonRenameTable,\n}) {\n\tconst [selectedColumn, setSelectedColumn] = useState<string | undefined>()\n\tconst [visibleColumns, setVisibleColumns] = useState<string[]>(\n\t\ttable.columnNames(),\n\t)\n\n\tuseEffect(() => {\n\t\tsetVisibleColumns(table.columnNames())\n\t}, [table, setVisibleColumns])\n\n\tconst columns = useMemo(() => {\n\t\treturn Object.entries(config).map(([key, conf]) => ({\n\t\t\tkey,\n\t\t\tname: key,\n\t\t\tfieldName: key,\n\t\t\tminWidth: conf.width,\n\t\t\ticonName: conf.iconName,\n\t\t})) as IColumn[]\n\t}, [config])\n\n\tconst handleColumnClick = useCallback(\n\t\t(evt?: React.MouseEvent<HTMLElement>, column?: IColumn) =>\n\t\t\tsetSelectedColumn(column?.key),\n\t\t[setSelectedColumn],\n\t)\n\n\tconst handleCellDropdownSelect = useCallback(\n\t\t(\n\t\t\tevt: React.FormEvent<HTMLDivElement>,\n\t\t\toption?: IDropdownOption<any> | undefined,\n\t\t) => {\n\t\t\tconsole.log('option selected: ', option)\n\t\t\talert(`Value selected: ${option?.text}`)\n\t\t},\n\t\t[],\n\t)\n\n\tconst commandBar = useCommandBar(table, visibleColumns, setVisibleColumns)\n\tconst farCommandBar = useFarCommandBar(table)\n\n\treturn (\n\t\t<Container className=\"table-container\">\n\t\t\t<ArqueroTableHeader\n\t\t\t\ttable={table}\n\t\t\t\tname={name}\n\t\t\t\tshowRowCount={true}\n\t\t\t\tshowColumnCount={true}\n\t\t\t\tcommandBar={commandBar}\n\t\t\t\tfarCommandBar={farCommandBar}\n\t\t\t\tvisibleColumns={visibleColumns}\n\t\t\t\tonRenameTable={onRenameTable}\n\t\t\t/>\n\t\t\t<TableContainer>\n\t\t\t\t<ArqueroDetailsList\n\t\t\t\t\ttable={table}\n\t\t\t\t\tcolumns={columns}\n\t\t\t\t\tfeatures={features}\n\t\t\t\t\tcompact={compact}\n\t\t\t\t\tselectedColumn={selectedColumn}\n\t\t\t\t\tonColumnClick={handleColumnClick}\n\t\t\t\t\tonCellDropdownSelect={handleCellDropdownSelect}\n\t\t\t\t\tisColumnClickable\n\t\t\t\t\tisSortable\n\t\t\t\t\tshowColumnBorders\n\t\t\t\t\tisHeadersFixed\n\t\t\t\t\tvisibleColumns={visibleColumns}\n\t\t\t\t/>\n\t\t\t</TableContainer>\n\t\t</Container>\n\t)\n})\n\nfunction useCommandBar(\n\ttable: ColumnTable,\n\tvisibleColumns: string[],\n\tupdateColumns: SetterOrUpdater<string[]>,\n) {\n\tconst theme = useThematic()\n\n\tconst handleColumnCheckChange = useCallback(\n\t\t(column: string, checked: boolean) => {\n\t\t\tupdateColumns(previous => {\n\t\t\t\tif (checked) {\n\t\t\t\t\t// order doesn't matter here\n\t\t\t\t\treturn [...(previous || []), column]\n\t\t\t\t} else {\n\t\t\t\t\treturn [...(previous || [])].filter(col => col !== column)\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\t[updateColumns],\n\t)\n\n\tconst items = useMemo(\n\t\t() => [\n\t\t\tvisibleColumnsCommand(table, visibleColumns, handleColumnCheckChange),\n\t\t],\n\t\t[table, visibleColumns, handleColumnCheckChange],\n\t)\n\n\treturn useMemo(\n\t\t() => createDefaultHeaderCommandBar({ items }, theme),\n\t\t[items, theme],\n\t)\n}\n\nfunction useFarCommandBar(table: ColumnTable) {\n\tconst theme = useThematic()\n\tconst items = useMemo(() => [downloadCommand(table)], [table])\n\treturn useMemo(\n\t\t() => createDefaultHeaderCommandBar({ items }, theme, true),\n\t\t[items, theme],\n\t)\n}\n\nconst Container = styled.div`\n\twidth: 600px;\n\theight: 400px;\n\tborder: 1px solid ${({ theme }) => theme.application().faint().hex()};\n`\n\nconst TableContainer = styled.div`\n\theight: 364px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { TableContainer } from '@data-wrangling-components/core'\nimport type { DetailsListFeatures } from '@data-wrangling-components/react'\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\nimport type { ColumnConfigMap } from './Table'\nimport { Table } from './Table'\n\nexport interface InputTablesProps {\n\ttables: Map<string, TableContainer>\n\tconfig: ColumnConfigMap\n\tfeatures?: DetailsListFeatures\n\tcompact?: boolean\n}\n\nexport const InputTables: React.FC<InputTablesProps> = memo(\n\tfunction InputTables({ tables, config, features, compact }) {\n\t\treturn (\n\t\t\t<TablesContainer>\n\t\t\t\t{Array.from(tables).map(([key, container]) => (\n\t\t\t\t\t<Table\n\t\t\t\t\t\tkey={`table-${key}`}\n\t\t\t\t\t\tname={key}\n\t\t\t\t\t\ttable={container.table!}\n\t\t\t\t\t\tconfig={config}\n\t\t\t\t\t\tfeatures={features}\n\t\t\t\t\t\tcompact={compact}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</TablesContainer>\n\t\t)\n\t},\n)\n\nconst TablesContainer = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tgap: 12px;\n\twidth: 100%;\n\tjustify-content: space-between;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Separator } from '@fluentui/react'\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\nexport interface SectionProps {\n\ttitle: string\n\tsubtitle?: string\n}\n\nexport const Section: React.FC<SectionProps> = memo(function Section({\n\ttitle,\n\tsubtitle,\n\tchildren,\n}) {\n\treturn (\n\t\t<Container className=\"section\">\n\t\t\t<Titles>\n\t\t\t\t<H1>{title}</H1>\n\t\t\t\t<H2>{subtitle}</H2>\n\t\t\t</Titles>\n\t\t\t<StyledSeparator vertical />\n\t\t\t<ChildrenContainer>{children}</ChildrenContainer>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.section`\n\twidth: 100%;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\tmargin-bottom: 40px;\n`\n\nconst Titles = styled.div`\n\twidth: 200px;\n\ttext-align: right;\n\ttext-transform: uppercase;\n`\n\nconst H1 = styled.h1`\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n\tcolor: ${({ theme }) => theme.application().lowContrast().hex()};\n`\n\nconst H2 = styled.h2`\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n\tcolor: ${({ theme }) => theme.application().accent().hex()};\n`\n\nconst StyledSeparator = styled(Separator)`\n\tmargin-left: 8px;\n\tmargin-right: 36px;\n`\n\nconst ChildrenContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n/* eslint-disable @essex/adjacent-await */\nimport type {\n\tSpecification,\n\tStep,\n\tTableContainer,\n\tVerb,\n} from '@data-wrangling-components/core'\nimport type { DetailsListFeatures } from '@data-wrangling-components/react'\nimport {\n\tStatsColumnType,\n\tStepComponent,\n\tStepSelector,\n\tusePipeline,\n} from '@data-wrangling-components/react'\nimport { IconButton, PrimaryButton } from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useCallback, useMemo, useState } from 'react'\nimport { from } from 'rxjs'\nimport styled from 'styled-components'\n\nimport { ControlBar } from './ControlBar'\nimport {\n\tuseInputTableList,\n\tuseInputTables,\n\tuseTableStore,\n} from './DebugPage.hooks'\nimport { InputTables } from './InputTables'\nimport { Section } from './Section'\nimport { Table } from './Table'\n\nconst columns = {\n\tID: {\n\t\twidth: 50,\n\t\ticonName: 'FavoriteStarFill',\n\t},\n}\n\nconst DEFAULT_STATS = [\n\tStatsColumnType.Type,\n\tStatsColumnType.Min,\n\tStatsColumnType.Max,\n\tStatsColumnType.Distinct,\n\tStatsColumnType.Invalid,\n]\n\nexport const DebugPage: React.FC = memo(function DebugPage() {\n\tconst [autoType, setAutoType] = useState<boolean>(true)\n\t// this is special to the test example,\n\t// a running app needs to maintain its own list of uploaded files\n\tconst [inputList, setInputs] = useInputTableList()\n\tconst store = useTableStore(autoType)\n\tconst inputTables = useInputTables(inputList, store)\n\tconst [steps, setSteps] = useState<Step[]>([])\n\tconst pipeline = usePipeline(store, steps)\n\tconst [result, setResult] = useState<ColumnTable | undefined>()\n\tconst [outputs, setOutputs] = useState<Map<string, TableContainer>>(\n\t\tnew Map<string, TableContainer>(),\n\t)\n\tconst [exampleSpec, setExampleSpec] = useState<Specification | undefined>()\n\n\tconst [features, setFeatures] = useState<DetailsListFeatures>({\n\t\tstatsColumnHeaders: true,\n\t\tstatsColumnTypes: DEFAULT_STATS,\n\t})\n\tconst [compact, setCompact] = useState<boolean>(true)\n\n\tconst handleCreateStep = useCallback(\n\t\t(verb: Verb) => {\n\t\t\tsetSteps(pipeline.create(verb))\n\t\t},\n\t\t[pipeline, setSteps],\n\t)\n\n\tconst handleStepChange = useCallback(\n\t\t(step: Step, index: number) => setSteps(pipeline.update(step, index)),\n\t\t[setSteps, pipeline],\n\t)\n\n\tconst handleRunClick = useCallback(async () => {\n\t\tconst res = await pipeline.run()\n\t\tconst output = store.toMap()\n\t\tpipeline.print()\n\t\tstore.print()\n\t\tsetResult(res.table)\n\t\tsetOutputs(output)\n\t}, [pipeline, store, setResult, setOutputs])\n\n\tconst handleExampleSpecChange = useCallback(\n\t\tasync spec => {\n\t\t\t// TODO: we need an autorun option on the pipeline to populate data for the next step as they are added\n\t\t\t// otherwise we can't fill in dropdowns with column names, for example\n\t\t\tsetExampleSpec(spec)\n\t\t\tpipeline.clear()\n\t\t\tpipeline.addAll(spec.steps)\n\t\t\t// the pipeline will transform the steps into a consistent format - string shorthands are\n\t\t\t// unpacked into object forms.\n\t\t\tsetSteps(pipeline.steps)\n\t\t\tconst res = await pipeline.run()\n\t\t\tconst output = store.toMap()\n\t\t\tstore.print()\n\t\t\tsetResult(res.table)\n\t\t\tsetOutputs(output)\n\t\t},\n\t\t[pipeline, store, setExampleSpec, setSteps, setOutputs, setResult],\n\t)\n\n\tconst handleDropFiles = useCallback(\n\t\t(loaded: Map<string, ColumnTable>) => {\n\t\t\tloaded.forEach((table, name) => {\n\t\t\t\tstore.set(name, from([{ id: name, table }]))\n\t\t\t})\n\t\t\tstore.print()\n\t\t\tsetInputs(prev => [...prev, ...Array.from(loaded.keys())])\n\t\t},\n\t\t[store, setInputs],\n\t)\n\n\tconst downloadUrl = useMemo(() => {\n\t\tconst blob = new Blob([JSON.stringify({ steps }, null, 4)])\n\t\treturn URL.createObjectURL(blob)\n\t}, [steps])\n\n\treturn (\n\t\t<Container>\n\t\t\t<Workspace className=\"arquero-workspace\">\n\t\t\t\t<ControlBar\n\t\t\t\t\tselected={exampleSpec}\n\t\t\t\t\tonSelectSpecification={handleExampleSpecChange}\n\t\t\t\t\tonLoadFiles={handleDropFiles}\n\t\t\t\t\tfeatures={features}\n\t\t\t\t\tonFeaturesChange={setFeatures}\n\t\t\t\t\tcompact={compact}\n\t\t\t\t\tonCompactChange={setCompact}\n\t\t\t\t\tautoType={autoType}\n\t\t\t\t\tonAutoTypeChange={setAutoType}\n\t\t\t\t/>\n\t\t\t\t<InputsSection>\n\t\t\t\t\t<Section title=\"Inputs\">\n\t\t\t\t\t\t<InputTables\n\t\t\t\t\t\t\ttables={inputTables}\n\t\t\t\t\t\t\tconfig={columns}\n\t\t\t\t\t\t\tfeatures={features}\n\t\t\t\t\t\t\tcompact={compact}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Section>\n\t\t\t\t</InputsSection>\n\t\t\t\t{steps.map((step, index) => {\n\t\t\t\t\tconst output = outputs?.get(step.output?.target)?.table\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<StepBlock key={`step-${index}`} className=\"step-block\">\n\t\t\t\t\t\t\t<Section title={`Step ${index + 1}`} subtitle={step.verb}>\n\t\t\t\t\t\t\t\t<StepsColumn className=\"steps-column\">\n\t\t\t\t\t\t\t\t\t<StepComponent\n\t\t\t\t\t\t\t\t\t\tkey={`step-${index}`}\n\t\t\t\t\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\t\t\t\t\tstore={store}\n\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t\tonChange={handleStepChange}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</StepsColumn>\n\t\t\t\t\t\t\t\t<OutputsColumn className=\"outputs-column\">\n\t\t\t\t\t\t\t\t\t{output ? (\n\t\t\t\t\t\t\t\t\t\t<TableSection\n\t\t\t\t\t\t\t\t\t\t\tkey={`output-${index}`}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"table-section\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\t\t\t\t\t\tname={step.id}\n\t\t\t\t\t\t\t\t\t\t\t\ttable={output}\n\t\t\t\t\t\t\t\t\t\t\t\tconfig={columns}\n\t\t\t\t\t\t\t\t\t\t\t\tfeatures={features}\n\t\t\t\t\t\t\t\t\t\t\t\tcompact={compact}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</TableSection>\n\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t</OutputsColumn>\n\t\t\t\t\t\t\t</Section>\n\t\t\t\t\t\t</StepBlock>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t\t<Section\n\t\t\t\t\ttitle={`${steps.length} step${steps.length !== 1 ? 's' : ''}`}\n\t\t\t\t\tsubtitle={'FINAL RESULT'}\n\t\t\t\t>\n\t\t\t\t\t{result ? (\n\t\t\t\t\t\t<TableSection className=\"table-section\">\n\t\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\t\ttable={result}\n\t\t\t\t\t\t\t\tconfig={columns}\n\t\t\t\t\t\t\t\tfeatures={features}\n\t\t\t\t\t\t\t\tcompact={compact}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</TableSection>\n\t\t\t\t\t) : null}\n\t\t\t\t</Section>\n\t\t\t\t<Commands>\n\t\t\t\t\t<StepSelector onCreate={handleCreateStep} showButton />\n\t\t\t\t\t<Buttons>\n\t\t\t\t\t\t<PrimaryButton\n\t\t\t\t\t\t\tonClick={handleRunClick}\n\t\t\t\t\t\t\tstyles={{ root: { width: 180 } }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRun all\n\t\t\t\t\t\t</PrimaryButton>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\ttitle={'Save pipeline as JSON'}\n\t\t\t\t\t\t\ticonProps={{ iconName: 'Download' }}\n\t\t\t\t\t\t\thref={downloadUrl}\n\t\t\t\t\t\t\tdownload={'pipeline.json'}\n\t\t\t\t\t\t\ttype={'application/json'}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Buttons>\n\t\t\t\t</Commands>\n\t\t\t</Workspace>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\tpadding: 0px 20px 0px 20px;\n`\n\nconst Workspace = styled.div`\n\twidth: 100%;\n`\n\nconst Commands = styled.div`\n\twidth: 200px;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 12px;\n\tjustify-content: space-between;\n`\n\nconst Buttons = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\n\nconst StepBlock = styled.div`\n\tdisplay: flex;\n`\n\nconst InputsSection = styled.div`\n\tmargin-bottom: 80px;\n`\n\nconst TableSection = styled.div`\n\tmax-height: 400px;\n`\n\nconst StepsColumn = styled.div`\n\twidth: 600px;\n`\n\nconst OutputsColumn = styled.div`\n\tmargin-left: 40px;\n\tdisplay: flex;\n\tflex-direction: column;\n`\n","export default \"This is a debugging page for the data wrangling components. The default tables shown are fake test data that exhibits several qualities we want to be able to test (for example, missing cells, duplicate rows, etc.).\\n\\nTo use this app, either (a) select an example pipeline from the dropdown at top left, or (b) add individual steps and run them.\\n\\nTo add steps, select the step type from the dropdown at bottom left and click the + button. The step configuration interface will appear - fill in the parameters and click \\\"Run\\\".\\n\\nEach step you add will appear below the previous steps. Whenever you run the pipeline, the output of each step will be shown to it's right. The final pipeline output will be displayed at the very bottom of the page.\\n\";","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport type {\n\tColumnMetadata,\n\tTableMetadata,\n} from '@data-wrangling-components/core'\nimport { introspect } from '@data-wrangling-components/core'\nimport {\n\tArqueroDetailsList,\n\tArqueroTableHeader,\n\tcreateDefaultCommandBar,\n\tcreateDefaultHeaderCommandBar,\n\tcreateLazyLoadingGroupHeader,\n} from '@data-wrangling-components/react'\nimport type {\n\tIColumn,\n\tICommandBarItemProps,\n\tIDetailsColumnProps,\n\tIDetailsGroupDividerProps,\n} from '@fluentui/react'\nimport { Pivot, PivotItem } from '@fluentui/react'\nimport { useThematic } from '@thematic/react'\nimport { loadCSV } from 'arquero'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport type { Struct } from 'arquero/dist/types/table/transformable'\nimport type { SetStateAction } from 'react'\nimport { memo, useCallback, useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\n/**\n * This is just a rudimentary page to load a large table for profiling the ArqueroDetailsList rendering.\n */\nexport const PerfPage: React.FC = memo(function PerfMage() {\n\tconst [table, setTable] = useState<ColumnTable | undefined>()\n\tconst [tableName, setTableName] = useState('Table1')\n\tconst [groupedTable, setGroupedTable] = useState<ColumnTable | undefined>()\n\tconst [groupedMetadata, setGroupedMetadata] = useState<\n\t\tTableMetadata | undefined\n\t>()\n\tconst [metadata, setMetadata] = useState<TableMetadata | undefined>()\n\n\tuseEffect(() => {\n\t\tconst f = async () => {\n\t\t\tlet root = await loadCSV('data/stocks.csv', {\n\t\t\t\tautoMax: 1000000,\n\t\t\t})\n\t\t\tconst grouped = root.groupby(['Symbol', 'Month'])\n\t\t\tconst groupedMeta = introspect(root, true)\n\t\t\tsetGroupedTable(grouped)\n\t\t\tsetGroupedMetadata(groupedMeta)\n\t\t\troot.ungroup()\n\t\t\t// make sure we have a large enough number of rows to impact rendering perf\n\t\t\tfor (let i = 0; i < 10; i++) {\n\t\t\t\troot = root.concat(root)\n\t\t\t}\n\t\t\tconsole.time('root meta')\n\t\t\tconst meta = introspect(root, true)\n\t\t\tconsole.timeEnd('root meta')\n\t\t\tsetTable(root)\n\t\t\tsetMetadata(meta)\n\t\t}\n\t\tf()\n\t}, [])\n\n\tconst commandBar = useCommandBar(table, metadata, setTable, setMetadata)\n\tconst columnCommands = useColumnCommands()\n\n\tconst customGroupHeader = useCallback(\n\t\t(\n\t\t\tmeta?: ColumnMetadata,\n\t\t\tcolumnName?: string,\n\t\t\tprops?: IDetailsGroupDividerProps | undefined,\n\t\t) => {\n\t\t\tconst custom = <h3>{meta?.name}</h3>\n\t\t\treturn createLazyLoadingGroupHeader(props, custom, columnName, meta)\n\t\t},\n\t\t[],\n\t)\n\n\tconst columns = useMemo((): IColumn[] | undefined => {\n\t\tif (!table) return undefined\n\t\treturn table.columnNames().map(x => {\n\t\t\treturn {\n\t\t\t\tname: x,\n\t\t\t\tkey: x,\n\t\t\t\tfieldName: x,\n\t\t\t\tminWidth: 180,\n\t\t\t} as IColumn\n\t\t})\n\t}, [table])\n\n\tif (!table || !metadata || !groupedTable || !groupedMetadata) {\n\t\treturn null\n\t}\n\n\treturn (\n\t\t<Container>\n\t\t\t<Pivot>\n\t\t\t\t<PivotItem style={{ width: '96vw' }} key={'table'} headerText={'table'}>\n\t\t\t\t\t<Table>\n\t\t\t\t\t\t<ArqueroTableHeader\n\t\t\t\t\t\t\ttable={table}\n\t\t\t\t\t\t\tname={tableName}\n\t\t\t\t\t\t\tcommandBar={commandBar}\n\t\t\t\t\t\t\tonRenameTable={name => setTableName(name)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ArqueroDetailsList\n\t\t\t\t\t\t\ttable={table}\n\t\t\t\t\t\t\tmetadata={metadata}\n\t\t\t\t\t\t\tfeatures={{\n\t\t\t\t\t\t\t\tsmartCells: true,\n\t\t\t\t\t\t\t\tsmartHeaders: true,\n\t\t\t\t\t\t\t\tcommandBar: [columnCommands],\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\tisSortable\n\t\t\t\t\t\t\tisHeadersFixed\n\t\t\t\t\t\t\tisStriped\n\t\t\t\t\t\t\tshowColumnBorders\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Table>\n\t\t\t\t</PivotItem>\n\t\t\t\t<PivotItem key={'empty'} headerText={'empty'} />\n\t\t\t\t<PivotItem key={'grouped'} headerText={'grouped'}>\n\t\t\t\t\t<Table>\n\t\t\t\t\t\t<ArqueroTableHeader table={groupedTable} />\n\t\t\t\t\t\t<ArqueroDetailsList\n\t\t\t\t\t\t\ttable={groupedTable}\n\t\t\t\t\t\t\tmetadata={groupedMetadata}\n\t\t\t\t\t\t\tfeatures={{\n\t\t\t\t\t\t\t\tsmartCells: true,\n\t\t\t\t\t\t\t\tsmartHeaders: true,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonRenderGroupHeader={customGroupHeader}\n\t\t\t\t\t\t\tisSortable\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Table>\n\t\t\t\t</PivotItem>\n\t\t\t</Pivot>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tpadding: 0px 20px 0px 20px;\n`\n\nconst Table = styled.div`\n\tmargin-top: 12px;\n\theight: calc(100vh - 220px);\n`\n\nfunction useColumnCommands() {\n\treturn useCallback((props?: IDetailsColumnProps) => {\n\t\tconst items = [\n\t\t\t{\n\t\t\t\tkey: 'add',\n\t\t\t\ttext: 'Add',\n\t\t\t\ticonOnly: true,\n\t\t\t\ticonProps: { iconName: 'Add' },\n\t\t\t\tonClick: () => console.log('add', props),\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'edit',\n\t\t\t\ttext: 'Edit',\n\t\t\t\ticonOnly: true,\n\t\t\t\ticonProps: { iconName: 'Edit' },\n\t\t\t\tonClick: () => console.log('edit', props),\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'delete',\n\t\t\t\ttext: 'Delete',\n\t\t\t\ticonOnly: true,\n\t\t\t\ticonProps: { iconName: 'Delete' },\n\t\t\t\tonClick: () => console.log('delete', props),\n\t\t\t},\n\t\t] as ICommandBarItemProps[]\n\t\treturn createDefaultCommandBar({\n\t\t\titems,\n\t\t\tstyles: {\n\t\t\t\troot: {\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t}, [])\n}\n\nfunction useCommandBar(\n\ttable: ColumnTable | undefined,\n\tmetadata: TableMetadata | undefined,\n\tsetTable: React.Dispatch<SetStateAction<ColumnTable | undefined>>,\n\tsetMetadata: React.Dispatch<SetStateAction<TableMetadata | undefined>>,\n) {\n\tconst theme = useThematic()\n\tconst addNewColumn = useCallback(() => {\n\t\tif (!table || !metadata) return\n\t\tconsole.time('new column')\n\t\tconst newTable = table.derive(\n\t\t\t{ [`New ${Math.round(Math.random() * 100)}`]: (d: Struct) => d.Close },\n\t\t\t{ before: 'Date' },\n\t\t)\n\t\tconsole.timeEnd('new column')\n\t\t// since we're just appending, we can reuse the prior stats\n\t\tconsole.time('new meta')\n\t\tconst newColumns = newTable.columnNames(name => !metadata.columns[name])\n\t\tconst newMetadata = introspect(newTable, true, newColumns)\n\t\tconsole.timeEnd('new meta')\n\t\tsetMetadata({\n\t\t\t...newMetadata,\n\t\t\tcolumns: {\n\t\t\t\t...metadata.columns,\n\t\t\t\t...newMetadata.columns,\n\t\t\t},\n\t\t})\n\t\tsetTable(newTable)\n\t}, [table, setMetadata, setTable, metadata])\n\treturn useMemo(() => {\n\t\treturn createDefaultHeaderCommandBar(\n\t\t\t{\n\t\t\t\titems: [\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: 'add-column',\n\t\t\t\t\t\ttext: 'Add column',\n\t\t\t\t\t\ticonProps: {\n\t\t\t\t\t\t\ticonName: 'Add',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonClick: addNewColumn,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\ttheme,\n\t\t)\n\t}, [theme, addNewColumn])\n}\n","export default \"This page is intended to provide a simple way of assessing pipeline and rendering performance using a dev tools profiler.\\n\\nBy default a largish table is renderered on the main tab. You can toggle between this and the other tabs to assess whether rendering remains fast even with component mount/unmount.\\n\\nThe empty tab has nothing on it so you can easily compare how quickly an empty component renders compared to the fill table.\\n\\nThe grouped tab has a large table grouped by multiple columns to evaluate grouping performance and how the table's virtual rendering is affected.\\n\";","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { TableStore } from '@data-wrangling-components/core'\nimport index from '@data-wrangling-components/guidance'\nimport {\n\tCallout,\n\tDirectionalHint,\n\tIconButton,\n\tPrimaryButton,\n} from '@fluentui/react'\nimport { useBoolean } from '@fluentui/react-hooks'\nimport React, { memo } from 'react'\nimport styled from 'styled-components'\n\nimport { Guidance } from '../Guidance/index.js'\nimport type { TableTransformModalProps } from '../index.js'\nimport { StepSelector } from '../index.js'\nimport {\n\tuseHandleTableRunClick,\n\tuseHandleTableStepArgs,\n\tuseInternalTableStep,\n\tuseModalStyles,\n} from './TableTransformModal.hooks.js'\n\nexport const TableTransformModal: React.FC<TableTransformModalProps> = memo(\n\tfunction TableTransformModal({\n\t\tonDismiss,\n\t\tstore,\n\t\tonTransformRequested,\n\t\tstep,\n\t\tnextInputTable,\n\t\tstyles,\n\t\t...props\n\t}) {\n\t\tconst [isGuidanceVisible, { toggle: toggleIsGuidanceVisible }] =\n\t\t\tuseBoolean(false)\n\t\tconst { internal, setInternal, handleVerbChange } = useInternalTableStep(\n\t\t\tstep,\n\t\t\tnextInputTable,\n\t\t\tstore as TableStore,\n\t\t)\n\n\t\tconst StepArgs = useHandleTableStepArgs(internal, !!step)\n\n\t\tconst handleRunClick = useHandleTableRunClick(\n\t\t\tinternal,\n\t\t\tonTransformRequested,\n\t\t)\n\n\t\tconst adaptedStyles = useModalStyles(\n\t\t\tstyles,\n\t\t\tisGuidanceVisible,\n\t\t\t!!internal?.verb,\n\t\t)\n\t\treturn (\n\t\t\t<Callout\n\t\t\t\tonDismissed={() => setInternal(undefined)}\n\t\t\t\tstyles={adaptedStyles}\n\t\t\t\tdirectionalHint={DirectionalHint.rightBottomEdge}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<Header>\n\t\t\t\t\t<Title>{step ? 'Edit step' : 'New step'}</Title>\n\t\t\t\t\t{onDismiss && (\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\ticonProps={iconProps.cancel}\n\t\t\t\t\t\t\tariaLabel=\"Close popup modal\"\n\t\t\t\t\t\t\tonClick={() => onDismiss()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</Header>\n\n\t\t\t\t<ContainerBody showGuidance={isGuidanceVisible}>\n\t\t\t\t\t<StepComponentContainer>\n\t\t\t\t\t\t<StepSelectorContainer>\n\t\t\t\t\t\t\t<StepSelector\n\t\t\t\t\t\t\t\tplaceholder=\"Select a verb\"\n\t\t\t\t\t\t\t\tverb={internal?.verb}\n\t\t\t\t\t\t\t\tonCreate={handleVerbChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{internal?.verb ? (\n\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\tonClick={toggleIsGuidanceVisible}\n\t\t\t\t\t\t\t\t\ticonProps={{ iconName: 'Info' }}\n\t\t\t\t\t\t\t\t\tchecked={isGuidanceVisible}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</StepSelectorContainer>\n\t\t\t\t\t\t{internal && StepArgs && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<StepArgs\n\t\t\t\t\t\t\t\t\tstep={internal}\n\t\t\t\t\t\t\t\t\tstore={store}\n\t\t\t\t\t\t\t\t\tonChange={setInternal}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ButtonContainer>\n\t\t\t\t\t\t\t\t\t<PrimaryButton onClick={handleRunClick}>Save</PrimaryButton>\n\t\t\t\t\t\t\t\t</ButtonContainer>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</StepComponentContainer>\n\t\t\t\t\t{isGuidanceVisible && internal?.verb ? (\n\t\t\t\t\t\t<GuidanceContainer>\n\t\t\t\t\t\t\t<Guidance\n\t\t\t\t\t\t\t\tname={internal?.verb}\n\t\t\t\t\t\t\t\tindex={index as Record<string, string>}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</GuidanceContainer>\n\t\t\t\t\t) : null}\n\t\t\t\t</ContainerBody>\n\t\t\t</Callout>\n\t\t)\n\t},\n)\n\nconst iconProps = {\n\tcancel: { iconName: 'Cancel' },\n}\n\nconst ContainerBody = styled.div<{ showGuidance: boolean }>`\n\tpadding: 0px 12px 14px 24px;\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tgap: 12px;\n`\n\nconst Header = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tbackground: ${({ theme }) => theme.application().faint().hex()};\n\tmargin-bottom: 12px;\n`\n\nconst Title = styled.h3`\n\tpadding-left: 12px;\n\tmargin: 8px 0 8px 0;\n`\n\nconst StepComponentContainer = styled.div`\n\twidth: 316px;\n\tmax-height: 32rem;\n\toverflow: hidden auto;\n`\n\nconst StepSelectorContainer = styled.div`\n\tmargin-bottom: 8px;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n\nconst ButtonContainer = styled.div`\n\tmargin-top: 8px;\n`\n\nconst GuidanceContainer = styled.div`\n\twidth: 400px;\n\tmax-height: 32rem;\n\toverflow: hidden auto;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { columnTransformVerbs, Verb } from '@data-wrangling-components/core'\nimport { Dropdown, IconButton, Modal, PrimaryButton } from '@fluentui/react'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport type { ColumnTransformModalProps } from '../index.js'\nimport { enumName } from '../util.js'\nimport {\n\tuseHandleRunClick,\n\tuseHandleStepArgs,\n\tuseInternalStep,\n} from './hooks/index.js'\n\n/**\n * This presents a model for creating new columns on a table.\n * It is intended to be invoked from a table or column header.\n */\nexport const ColumnTransformModal: React.FC<ColumnTransformModalProps> = memo(\n\tfunction ColumnTransformModal({\n\t\ttable,\n\t\tstep,\n\t\tonTransformRequested,\n\t\thideInputColumn,\n\t\thideOutputColumn,\n\t\tverbs,\n\t\theaderText,\n\t\tnextInputTable,\n\t\tonDismiss,\n\t\t...props\n\t}) {\n\t\tconst { internal, setInternal, handleVerbChange } = useInternalStep(\n\t\t\tstep,\n\t\t\tnextInputTable,\n\t\t\ttable,\n\t\t)\n\n\t\tconst StepArgs = useHandleStepArgs(\n\t\t\tinternal,\n\t\t\thideInputColumn,\n\t\t\thideOutputColumn,\n\t\t)\n\n\t\tconst handleRunClick = useHandleRunClick(internal, onTransformRequested)\n\n\t\tconst stepOptions = useMemo(() => {\n\t\t\tconst list =\n\t\t\t\tverbs ||\n\t\t\t\tcolumnTransformVerbs(s => s !== Verb.Aggregate && s !== Verb.Rollup)\n\t\t\treturn list.map(key => ({\n\t\t\t\tkey,\n\t\t\t\ttext: enumName(Verb, key)!,\n\t\t\t}))\n\t\t}, [verbs])\n\n\t\treturn (\n\t\t\t<Modal\n\t\t\t\tonDismiss={onDismiss}\n\t\t\t\tonDismissed={() => setInternal(undefined)}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<Header>\n\t\t\t\t\t<Title>{headerText}</Title>\n\t\t\t\t\t{onDismiss && (\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\ticonProps={iconProps.cancel}\n\t\t\t\t\t\t\tariaLabel=\"Close popup modal\"\n\t\t\t\t\t\t\tonClick={() => onDismiss()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</Header>\n\t\t\t\t<Container>\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\tplaceholder={'Choose transform'}\n\t\t\t\t\t\toptions={stepOptions}\n\t\t\t\t\t\tdefaultSelectedKey={internal?.verb || ''}\n\t\t\t\t\t\tonChange={handleVerbChange}\n\t\t\t\t\t/>\n\t\t\t\t\t{StepArgs && internal ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<StepArgs step={internal} table={table} onChange={setInternal} />\n\t\t\t\t\t\t\t<PrimaryButton onClick={handleRunClick}>Run</PrimaryButton>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : null}\n\t\t\t\t</Container>\n\t\t\t</Modal>\n\t\t)\n\t},\n)\n\nconst Header = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tbackground: ${({ theme }) => theme.application().faint().hex()};\n`\n\nconst Title = styled.h3`\n\tpadding-left: 12px;\n\tmargin: 8px 0 8px 0;\n`\n\nconst Container = styled.div`\n\tpadding: 12px;\n`\n\nconst iconProps = {\n\tcancel: { iconName: 'Cancel' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Step } from '@data-wrangling-components/core'\nimport { DocumentCard, DocumentCardActions } from '@fluentui/react'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { selectStepDescription } from '../../selectStepDescription.js'\nimport { useStepActions } from './StepActions.js'\n\nexport const StepCard: React.FC<{\n\tstep: Step\n\tindex: number\n\tonEdit?: (step: Step, index: number) => void\n\tonDelete?: (index: number) => void\n\tonDuplicate?: (step: Step) => void\n\tonSelect?: (name: string) => void\n}> = memo(function StepCard({\n\tstep,\n\tindex,\n\tonEdit,\n\tonDelete,\n\tonDuplicate,\n\tonSelect,\n}) {\n\tconst Description = useMemo(() => selectStepDescription(step), [step])\n\tconst stepActions = useStepActions(\n\t\tstep,\n\t\tindex,\n\t\tonEdit,\n\t\tonDelete,\n\t\tonDuplicate,\n\t\tonSelect,\n\t)\n\n\treturn (\n\t\t<Card styles={styles.card}>\n\t\t\t<CardContent>\n\t\t\t\t<Description step={step} showInput showOutput showOutputColumn />\n\t\t\t</CardContent>\n\t\t\t<DocumentCardActions\n\t\t\t\tclassName={`step-card-${index}`}\n\t\t\t\tstyles={styles.actions}\n\t\t\t\tactions={stepActions}\n\t\t\t/>\n\t\t</Card>\n\t)\n})\n\nconst styles = {\n\tcard: {\n\t\troot: {\n\t\t\tminWidth: 'unset',\n\t\t},\n\t},\n\tactions: { root: { padding: 'unset' } },\n}\n\nconst CardContent = styled.div`\n\tpadding: 8px;\n`\n\nconst Card = styled(DocumentCard)`\n\tmin-width: fit-content;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-between;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\nexport interface DetailTextProps {\n\ttext: string\n\tstyle?: React.CSSProperties\n}\n\nexport const DetailText: React.FC<DetailTextProps> = memo(function DetailText({\n\ttext,\n\tstyle,\n}) {\n\treturn <Text style={style}>{text}</Text>\n})\n\nconst Text = styled.div`\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Step } from '@data-wrangling-components/core'\nimport { DefaultButton } from '@fluentui/react'\nimport { memo, useEffect, useRef } from 'react'\nimport styled from 'styled-components'\n\nimport { StepCard } from '../../index.js'\nimport { DetailText } from '../../PrepareData/DetailText/index.js'\n\nexport const StepsList: React.FC<{\n\tsteps?: Step[]\n\tonDeleteClicked?: (index: number) => void\n\tonEditClicked?: (step: Step, index: number) => void\n\tonDuplicateClicked?: (step: Step) => void\n\tonSelect?: (name: string) => void\n\tonStartNewStep?: () => void\n\tbuttonId?: string\n}> = memo(function StepsList({\n\tsteps,\n\tonDeleteClicked,\n\tonEditClicked,\n\tonDuplicateClicked,\n\tonSelect,\n\tonStartNewStep,\n\tbuttonId,\n}) {\n\tconst ref = useRef<HTMLDivElement>(null)\n\n\tuseEffect(() => {\n\t\tconst f = () => {\n\t\t\tref?.current?.scrollIntoView(false)\n\t\t}\n\t\tf()\n\t}, [steps])\n\n\treturn (\n\t\t<Container>\n\t\t\t{steps?.map((_step, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<StepCard\n\t\t\t\t\t\tonDelete={onDeleteClicked}\n\t\t\t\t\t\tonEdit={onEditClicked}\n\t\t\t\t\t\tonDuplicate={onDuplicateClicked}\n\t\t\t\t\t\tonSelect={onSelect}\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tstep={_step}\n\t\t\t\t\t\tindex={index}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t})}\n\n\t\t\t{onStartNewStep && (\n\t\t\t\t<ButtonContainer ref={ref}>\n\t\t\t\t\t<DefaultButton\n\t\t\t\t\t\tstyles={addButtonStyles}\n\t\t\t\t\t\ticonProps={iconProps.add}\n\t\t\t\t\t\tonClick={onStartNewStep}\n\t\t\t\t\t\tid={buttonId}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd step\n\t\t\t\t\t</DefaultButton>\n\t\t\t\t\t{!steps?.length && (\n\t\t\t\t\t\t<DetailText text=\"Add your first preparation step\" />\n\t\t\t\t\t)}\n\t\t\t\t</ButtonContainer>\n\t\t\t)}\n\t\t</Container>\n\t)\n})\n\nconst addButtonStyles = {\n\troot: { padding: '0 4px 0 6px', whiteSpace: 'nowrap' },\n}\n\nconst iconProps = {\n\tadd: { iconName: 'Add' },\n}\n\nconst Container = styled.div`\n\tdisplay: flex;\n\toverflow: auto;\n\tcolumn-gap: 12px;\n`\n\nconst ButtonContainer = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tgap: 18px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Step } from '@data-wrangling-components/core'\nimport { DialogConfirm } from '@essex/themed-components'\nimport React, { memo } from 'react'\nimport styled from 'styled-components'\n\nimport type {\n\tColumnTransformModalProps,\n\tTableTransformModalProps,\n} from '../../index.js'\nimport {\n\tColumnTransformModal,\n\tTableTransformModal,\n\tuseDeleteConfirm,\n} from '../../index.js'\nimport { StepsType } from '../../types.js'\nimport { StepsList } from '../index.js'\nimport { useManageSteps } from './hooks/index.js'\n\ninterface ManageStepsProps\n\textends TableTransformModalProps,\n\t\tColumnTransformModalProps {\n\tonSave: (step: Step, index?: number | undefined) => void\n\tonDelete?: ((args: any) => void) | undefined\n\ttype?: StepsType\n\tonSelect?: (name: string) => void\n\tsteps?: Step[]\n}\n\nexport const ManageSteps: React.FC<ManageStepsProps> = memo(\n\tfunction ManageSteps({\n\t\tonDelete,\n\t\tonSave,\n\t\tonSelect,\n\t\tstore,\n\t\tsteps,\n\t\ttype = StepsType.Table,\n\t\ttable,\n\t\t...props\n\t}) {\n\t\tconst {\n\t\t\tonDeleteClicked,\n\t\t\ttoggleDeleteModalOpen,\n\t\t\tisDeleteModalOpen,\n\t\t\tonConfirmDelete,\n\t\t} = useDeleteConfirm(onDelete)\n\n\t\tconst {\n\t\t\tstep,\n\t\t\tonDuplicateClicked,\n\t\t\tonEditClicked,\n\t\t\tonCreate,\n\t\t\tonDismissTransformModal,\n\t\t\tonStartNewStep,\n\t\t\tisTransformModalOpen,\n\t\t\taddStepButtonId,\n\t\t\teditorTarget,\n\t\t} = useManageSteps(type, store, table, onSave)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<StepsList\n\t\t\t\t\tonDeleteClicked={onDeleteClicked}\n\t\t\t\t\tonSelect={onSelect}\n\t\t\t\t\tonEditClicked={onEditClicked}\n\t\t\t\t\tsteps={steps}\n\t\t\t\t\tonDuplicateClicked={onDuplicateClicked}\n\t\t\t\t\tonStartNewStep={onStartNewStep}\n\t\t\t\t\tbuttonId={addStepButtonId}\n\t\t\t\t/>\n\n\t\t\t\t<div>\n\t\t\t\t\t{type === StepsType.Table && isTransformModalOpen && (\n\t\t\t\t\t\t<TableTransformModal\n\t\t\t\t\t\t\ttarget={editorTarget}\n\t\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\t\tonTransformRequested={onCreate}\n\t\t\t\t\t\t\tisOpen={isTransformModalOpen}\n\t\t\t\t\t\t\tstore={store}\n\t\t\t\t\t\t\tonDismiss={onDismissTransformModal}\n\t\t\t\t\t\t\t// HACK\n\t\t\t\t\t\t\tstyles={{ calloutMain: { overflow: 'hidden' } } as any}\n\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{type === StepsType.Column && table && (\n\t\t\t\t\t\t<ColumnTransformModal\n\t\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\t\ttable={table}\n\t\t\t\t\t\t\tonTransformRequested={onCreate}\n\t\t\t\t\t\t\tisOpen={isTransformModalOpen}\n\t\t\t\t\t\t\tonDismiss={onDismissTransformModal}\n\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{onDelete && (\n\t\t\t\t\t\t<DialogConfirm\n\t\t\t\t\t\t\ttoggle={toggleDeleteModalOpen}\n\t\t\t\t\t\t\ttitle=\"Are you sure you want to delete this step?\"\n\t\t\t\t\t\t\tsubText={\n\t\t\t\t\t\t\t\ttype === StepsType.Table\n\t\t\t\t\t\t\t\t\t? 'You will also lose any table transformations made after this step.'\n\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tshow={isDeleteModalOpen}\n\t\t\t\t\t\t\tonConfirm={onConfirmDelete}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Container = styled.div`\n\twidth: 97%;\n\tdisplay: grid;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { TableMetadata } from '@data-wrangling-components/core'\nimport type { IDetailsColumnProps, IRenderFunction } from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\nimport type { SaveMetadataFunction } from '../../index.js'\nimport {\n\tArqueroDetailsList,\n\tArqueroTableHeader,\n\tStatsColumnType,\n} from '../../index.js'\nimport { DetailText } from '../DetailText/index.js'\nimport { useToggleTableFeatures } from '../hooks/index.js'\n\nconst statsColumnTypes = [\n\tStatsColumnType.Type,\n\tStatsColumnType.Min,\n\tStatsColumnType.Max,\n\tStatsColumnType.Distinct,\n\tStatsColumnType.Invalid,\n]\n\nexport const PreviewTable: React.FC<{\n\ttable?: ColumnTable\n\tname?: string\n\tmetadata?: TableMetadata\n\theaderCommandBar?: IRenderFunction<IDetailsColumnProps>[]\n\tonChangeMetadata?: SaveMetadataFunction\n}> = memo(function PreviewTable({\n\ttable,\n\theaderCommandBar,\n\tname,\n\tmetadata,\n\tonChangeMetadata,\n}) {\n\tconst { tableFeatures } = useToggleTableFeatures()\n\n\treturn (\n\t\t<>\n\t\t\t{table ? (\n\t\t\t\t<Container>\n\t\t\t\t\t<ArqueroTableHeader name={name} table={table} />\n\t\t\t\t\t<ArqueroDetailsList\n\t\t\t\t\t\tisSortable\n\t\t\t\t\t\tcompact\n\t\t\t\t\t\tshowColumnBorders\n\t\t\t\t\t\tisHeadersFixed\n\t\t\t\t\t\tmetadata={metadata}\n\t\t\t\t\t\tonChangeMetadata={onChangeMetadata}\n\t\t\t\t\t\tfeatures={{\n\t\t\t\t\t\t\t...tableFeatures,\n\t\t\t\t\t\t\tstatsColumnTypes: statsColumnTypes,\n\t\t\t\t\t\t\tcommandBar: headerCommandBar ? headerCommandBar : undefined,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\ttable={table}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t) : (\n\t\t\t\t<TextContainer>\n\t\t\t\t\t<DetailText text=\"(No table selected)\" />\n\t\t\t\t</TextContainer>\n\t\t\t)}\n\t\t</>\n\t)\n})\n\nconst Container = styled.div`\n\toverflow: auto;\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n\tborder: 1px solid ${({ theme }) => theme.application().faint().hex()};\n`\n\nconst TextContainer = styled.div`\n\tdisplay: flex;\n\theight: 100%;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const ListContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\talign-items: center;\n\twidth: 100%;\n\tgap: 18px;\n`\n\nexport const viewButtonStyles = { root: { padding: '0 4px 0 6px' } }\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Step, TableContainer } from '@data-wrangling-components/core'\nimport type { IDetailsColumnProps, IRenderFunction } from '@fluentui/react'\nimport { Icon } from '@fluentui/react'\nimport { useBoolean } from '@fluentui/react-hooks'\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\nimport { ManageSteps } from '../../Steps/index.js'\nimport { PreviewTable } from '../index.js'\nimport { TableListBar } from '../TableListBar/TableListBar.js'\nimport { useBusinessLogic } from './PrepareDataFull.hooks.js'\n\nexport const PrepareDataFull: React.FC<{\n\ttables: TableContainer[]\n\tonUpdateSteps: (steps: Step[]) => void\n\tonOutputTable?: (table: TableContainer) => void\n\tsteps?: Step[]\n\toutputHeaderCommandBar?: IRenderFunction<IDetailsColumnProps>[]\n\tstepsPosition?: 'bottom' | 'middle'\n}> = memo(function PrepareDataFull({\n\ttables,\n\tonUpdateSteps,\n\tsteps,\n\toutputHeaderCommandBar,\n\tonOutputTable,\n\tstepsPosition = 'bottom',\n}) {\n\tconst [isCollapsed, { toggle: toggleCollapsed }] = useBoolean(true)\n\tconst {\n\t\tselectedTable,\n\t\tselectedTableName,\n\t\tsetSelectedTableName,\n\t\tonDeleteStep,\n\t\tonSaveStep,\n\t\tstore,\n\t\tlastTableName,\n\t\tderived,\n\t\tselectedMetadata,\n\t\tonUpdateMetadata,\n\t\ttablesLoading,\n\t} = useBusinessLogic(tables, onUpdateSteps, steps, onOutputTable)\n\n\treturn (\n\t\t<Container>\n\t\t\t<InputContainer>\n\t\t\t\t<SectionTitle>Tables</SectionTitle>\n\t\t\t\t<TableListBar\n\t\t\t\t\tloading={tablesLoading}\n\t\t\t\t\tinputs={tables}\n\t\t\t\t\tderived={derived}\n\t\t\t\t\tselected={selectedTableName}\n\t\t\t\t\tonSelect={setSelectedTableName}\n\t\t\t\t/>\n\t\t\t</InputContainer>\n\n\t\t\t<StepsTrayContainer\n\t\t\t\tstepsPosition={stepsPosition}\n\t\t\t\tisCollapsed={isCollapsed}\n\t\t\t\tclassName=\"steps\"\n\t\t\t>\n\t\t\t\t<SectionTitle isCollapsed={isCollapsed} onClick={toggleCollapsed}>\n\t\t\t\t\tSteps <Icon iconName=\"ChevronDown\" />\n\t\t\t\t</SectionTitle>\n\t\t\t\t<StepsContainer>\n\t\t\t\t\t<ManageSteps\n\t\t\t\t\t\tnextInputTable={lastTableName}\n\t\t\t\t\t\tonDelete={onDeleteStep}\n\t\t\t\t\t\tonSave={onSaveStep}\n\t\t\t\t\t\tonSelect={setSelectedTableName}\n\t\t\t\t\t\tstore={store}\n\t\t\t\t\t\tsteps={steps}\n\t\t\t\t\t/>\n\t\t\t\t</StepsContainer>\n\t\t\t</StepsTrayContainer>\n\n\t\t\t<OutputContainer stepsPosition={stepsPosition} isCollapsed={isCollapsed}>\n\t\t\t\t<SectionTitle>Preview</SectionTitle>\n\t\t\t\t<PreviewTable\n\t\t\t\t\tonChangeMetadata={onUpdateMetadata}\n\t\t\t\t\theaderCommandBar={outputHeaderCommandBar}\n\t\t\t\t\ttable={selectedTable}\n\t\t\t\t\tmetadata={selectedMetadata}\n\t\t\t\t\tname={selectedTableName}\n\t\t\t\t/>\n\t\t\t</OutputContainer>\n\t\t</Container>\n\t)\n})\n\nconst GAP = 18\nconst INPUT_HEIGHT = 60\nconst STEPS_HEIGHT = 280\nconst COLLAPSED_STEPS_HEIGHT = 50\n\nconst SectionTitle = styled.span<{ isCollapsed?: boolean }>`\n\tmargin: 0 ${GAP}px 0 ${GAP}px;\n\tfont-weight: bold;\n\twriting-mode: vertical-rl;\n\tfont-size: 15px;\n\talign-self: center;\n\ttext-transform: uppercase;\n\tcolor: ${({ theme }) => theme.application().lowMidContrast().hex()};\n\ttransform: ${({ isCollapsed }) =>\n\t\tisCollapsed ? 'translate(2rem, 0) rotate(-90deg)' : 'rotate(180deg)'};\n\tcursor: pointer;\n\tdisplay: flex;\n\tgap: 0.5rem;\n\talign-items: center;\n`\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-flow: column;\n\theight: 100%;\n\twidth: 100%;\n\tpadding: ${GAP}px 0 ${GAP}px 0;\n\tgap: ${GAP}px;\n\tposition: relative;\n`\n\nconst InputContainer = styled.div`\n\tdisplay: flex;\n\tmin-height: ${INPUT_HEIGHT}px;\n\tflex: 0 1 ${INPUT_HEIGHT}px;\n\tpadding-right: ${GAP}px;\n\torder: 1;\n`\n\nconst OutputContainer = styled.div<{\n\tstepsPosition: string\n\tisCollapsed: boolean\n}>`\n\tflex: 1 1 auto;\n\tdisplay: flex;\n\tpadding-right: ${GAP}px;\n\tmax-height: ${({ isCollapsed }) =>\n\t\t`calc(100% - ${\n\t\t\tINPUT_HEIGHT + (isCollapsed ? 0 : STEPS_HEIGHT) + GAP * 4\n\t\t}px)`};\n\torder: ${({ stepsPosition }) => (stepsPosition === 'bottom' ? 2 : 3)};\n`\n\nconst StepsTrayContainer = styled.div<{\n\tstepsPosition: string\n\tisCollapsed: boolean\n}>`\n\tdisplay: flex;\n\tmin-height: ${({ isCollapsed }) =>\n\t\tisCollapsed ? 'unset' : STEPS_HEIGHT + 'px'};\n\tbackground-color: ${({ theme }) => theme.application().faint().hex()};\n\tpadding: 0;\n\torder: ${({ stepsPosition }) => (stepsPosition === 'bottom' ? 3 : 2)};\n\theight: ${({ isCollapsed }) =>\n\t\tisCollapsed ? COLLAPSED_STEPS_HEIGHT + 'px' : 'auto'};\n\toverflow: ${({ isCollapsed }) => (isCollapsed ? 'hidden' : 'auto hidden')};\n\t> div {\n\t\tdisplay: ${({ isCollapsed }) => (isCollapsed ? 'none' : 'grid')};\n\t}\n`\nconst StepsContainer = styled.div`\n\tdisplay: flex;\n\theight: 100%;\n\twidth: 100%;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Step, TableContainer } from '@data-wrangling-components/core'\nimport type { DropzoneStyles } from '@data-wrangling-components/react'\nimport {\n\tDropzone,\n\tPrepareDataFull,\n\tProjectMgmtCommandBar,\n\tuseHandleFileUpload,\n} from '@data-wrangling-components/react'\nimport type { FileCollection } from '@data-wrangling-components/utilities'\nimport { FileExtensions } from '@data-wrangling-components/utilities'\nimport { MessageBar, MessageBarType } from '@fluentui/react'\nimport { memo, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { useTablesState } from './hooks'\n\nexport const PrepareDataPage: React.FC = memo(function PrepareDataPage() {\n\tconst [steps, setSteps] = useState<Step[]>([])\n\tconst [outputTable, setOutputTable] = useState<TableContainer>()\n\tconst [tables, updateTables] = useTablesState()\n\tconst handleFileUpload = useHandleFileUpload(setSteps, updateTables)\n\tconst [message, setMessage] = useState<string>()\n\n\tconst handleDropAcceppted = useCallback(\n\t\t(fc: FileCollection) => {\n\t\t\tsetMessage(undefined)\n\t\t\thandleFileUpload(fc)\n\t\t},\n\t\t[setMessage, handleFileUpload],\n\t)\n\n\treturn (\n\t\t<Container className={'prepare-data-page'}>\n\t\t\t<Dropzone\n\t\t\t\tacceptedFileTypes={[\n\t\t\t\t\tFileExtensions.csv,\n\t\t\t\t\tFileExtensions.zip,\n\t\t\t\t\tFileExtensions.json,\n\t\t\t\t]}\n\t\t\t\tonDropAccepted={handleDropAcceppted}\n\t\t\t\tonDropRejected={setMessage}\n\t\t\t\tshowPlaceholder={false}\n\t\t\t\tdropzoneOptions={{ noClick: true }}\n\t\t\t\tstyles={dropzoneStyles as DropzoneStyles}\n\t\t\t/>\n\t\t\t<ProjectMgmtCommandBar\n\t\t\t\ttables={tables}\n\t\t\t\tsteps={steps}\n\t\t\t\toutputTable={outputTable}\n\t\t\t\tonUpdateSteps={setSteps}\n\t\t\t\tonUpdateTables={updateTables}\n\t\t\t\tstyles={mgmtStyles}\n\t\t\t/>\n\t\t\t{message && (\n\t\t\t\t<MessageBar\n\t\t\t\t\tmessageBarType={MessageBarType.severeWarning}\n\t\t\t\t\ttruncated={true}\n\t\t\t\t\tonDismiss={() => setMessage(undefined)}\n\t\t\t\t\tdismissButtonAriaLabel=\"Close\"\n\t\t\t\t\tstyles={{ root: { zIndex: 20 } }}\n\t\t\t\t>\n\t\t\t\t\t{' '}\n\t\t\t\t\t{message}{' '}\n\t\t\t\t</MessageBar>\n\t\t\t)}\n\t\t\t<Wrapper>\n\t\t\t\t<PrepareDataFull\n\t\t\t\t\ttables={tables}\n\t\t\t\t\tsteps={steps}\n\t\t\t\t\tonUpdateSteps={setSteps}\n\t\t\t\t\tonOutputTable={setOutputTable}\n\t\t\t\t/>\n\t\t\t</Wrapper>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\theight: calc(100vh - 80px);\n\tposition: relative;\n`\n\nconst Wrapper = styled.div`\n\theight: 90%;\n`\n\nconst mgmtStyles = {\n\troot: {\n\t\theight: 36,\n\t\tpaddingLeft: 9,\n\t},\n}\n\nconst dropzoneStyles = {\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\twidth: '98%',\n\t\theight: '2rem',\n\t\tborderColor: 'transparent',\n\t\tmargin: '0 1%',\n\t\tpadding: 0,\n\t\tborderRadius: 0,\n\t\toverflow: 'hidden',\n\t},\n\tdragReject: {\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\tzIndex: 100,\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { useMicrosoftConsentBanner } from '@essex/hooks'\nimport type { FC } from 'react'\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\nimport { useTheme } from '../../states/settings.js'\n\nexport const Footer: FC = memo(function Footer() {\n\tconst theme = useTheme()\n\tconst CONSENT_CONF = {\n\t\ttheme: theme.variant,\n\t\telementId: 'cookie-banner',\n\t\tonChange: (c: any) => console.log('CHANGED', c),\n\t}\n\tconst [, manageConsent] = useMicrosoftConsentBanner(CONSENT_CONF)\n\n\treturn (\n\t\t<FooterEl>\n\t\t\t<Container>\n\t\t\t\t<Link href={constants.privacyUrl}>Privacy</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link\n\t\t\t\t\tid={'managecookies'}\n\t\t\t\t\tonClick={manageConsent}\n\t\t\t\t\tstyle={{ color: '#3f75bf' }}\n\t\t\t\t>\n\t\t\t\t\tCookies\n\t\t\t\t</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.termsOfUseUrl}>Terms of Use</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.trademarksUrl}>Trademarks</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.microsoft}>{constants.copyright}</Link>\n\t\t\t</Container>\n\t\t</FooterEl>\n\t)\n})\n\nconst Link: FC<{\n\thref?: string\n\tid?: string\n\tclassName?: string\n\tstyle?: React.CSSProperties\n\tonClick?: () => void\n}> = memo(function Link({ id, className, children, href, style, onClick }) {\n\treturn href == null ? (\n\t\t<LinkDiv style={style} className={className} id={id} onClick={onClick}>\n\t\t\t{children}\n\t\t</LinkDiv>\n\t) : (\n\t\t<LinkA\n\t\t\ttarget=\"_blank\"\n\t\t\trel=\"noreferrer\"\n\t\t\thref={href}\n\t\t\tstyle={style}\n\t\t\tclassName={className}\n\t\t\tid={id}\n\t\t>\n\t\t\t{children}\n\t\t</LinkA>\n\t)\n})\n\nconst FooterEl = styled.footer`\n\twidth: 100%;\n`\n\nconst Container = styled.div`\n\twidth: 500px;\n\theight: 20px;\n\tfont-size: 12px;\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n\talign-content: center;\n\tjustify-content: space-between;\n\tmargin: auto;\n`\n\nconst constants = {\n\tprivacyUrl: 'https://go.microsoft.com/fwlink/?LinkId=521839',\n\ttermsOfUseUrl: 'https://go.microsoft.com/fwlink/?LinkID=206977',\n\ttrademarksUrl: 'https://www.microsoft.com/trademarks',\n\tmicrosoft: 'https://www.microsoft.com',\n\tcopyright: `©️ ${new Date().getFullYear()} Microsoft`,\n}\n\nconst LinkDiv = styled.div`\n\tcursor: pointer;\n`\nconst LinkA = styled.a`\n\tcursor: pointer;\n\ttext-decoration: none !important;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { Guidance } from '@data-wrangling-components/react'\nimport { Panel, Toggle } from '@fluentui/react'\nimport { memo, useCallback, useMemo } from 'react'\nimport { Link, useLocation } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { useSettings } from '~states/settings'\n\nimport { useGuidanceIndex } from '../../hooks/index.js'\nimport { setDarkMode } from '../../localStorageHandler/localStorageHandler.js'\n\nexport interface NavPanelProps {\n\tisOpen: boolean\n\tonDismiss: () => void\n}\n\nexport const NavPanel: React.FC<NavPanelProps> = memo(function NavPanel({\n\tisOpen,\n\tonDismiss,\n}: NavPanelProps) {\n\tconst [settings, setSettings] = useSettings()\n\tconst index = useGuidanceIndex()\n\tconst location = useLocation()\n\n\tconst setDarkModeStatus = useCallback(\n\t\tasync (ev: React.MouseEvent<HTMLElement>, checked?: boolean) => {\n\t\t\tconst checkedValue = checked ? true : false\n\t\t\tsetSettings({ ...settings, isDarkMode: checkedValue })\n\t\t\tawait setDarkMode(checkedValue)\n\t\t},\n\t\t[settings, setSettings],\n\t)\n\n\tconst name = useMemo((): string => {\n\t\tswitch (location.pathname) {\n\t\t\tcase '/debug':\n\t\t\t\treturn 'debugPage'\n\t\t\tcase '/performance':\n\t\t\t\treturn 'perfPage'\n\t\t\tcase '/prepare':\n\t\t\tdefault:\n\t\t\t\treturn 'prepareDataPage'\n\t\t}\n\t}, [location])\n\n\treturn (\n\t\t<Panel\n\t\t\tisLightDismiss\n\t\t\tisOpen={isOpen}\n\t\t\tonDismiss={onDismiss}\n\t\t\tcloseButtonAriaLabel=\"Close\"\n\t\t\theaderText=\"Menu\"\n\t\t>\n\t\t\t<SettingsSection>\n\t\t\t\t<H3>Settings</H3>\n\t\t\t\t<Toggle\n\t\t\t\t\tlabel=\"Dark Mode\"\n\t\t\t\t\tonText=\"On\"\n\t\t\t\t\toffText=\"Off\"\n\t\t\t\t\tonChange={setDarkModeStatus}\n\t\t\t\t\tchecked={settings.isDarkMode}\n\t\t\t\t/>\n\t\t\t</SettingsSection>\n\n\t\t\t<HelpSection>\n\t\t\t\t<H3>Help</H3>\n\t\t\t\t<Guidance name={name} index={index} />\n\t\t\t</HelpSection>\n\n\t\t\t<LinkSection>\n\t\t\t\t<H3>Links</H3>\n\n\t\t\t\t<ListItem to={'/prepare'}>Prepare Data Page</ListItem>\n\t\t\t\t<ListItem to={'/debug'}>Debug Page</ListItem>\n\t\t\t\t<ListItem to={'/performance'}>Performance Test Page</ListItem>\n\t\t\t</LinkSection>\n\t\t</Panel>\n\t)\n})\n\nconst SettingsSection = styled.div`\n\tmargin-left: 10px;\n`\n\nconst H3 = styled.h3`\n\tmargin-bottom: 10px;\n`\n\nconst HelpSection = styled.div`\n\tmargin-left: 10px;\n\tmargin-top: 20px;\n`\n\nconst LinkSection = styled.div`\n\tmargin-left: 10px;\n\tmargin-top: 20px;\n`\n\nconst ListItem = styled(Link)`\n\tdisplay: block;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { FontIcon, mergeStyles, mergeStyleSets } from '@fluentui/react'\nimport { useBoolean } from '@fluentui/react-hooks'\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\nimport { NavPanel } from '~components/NavPanel'\n\nexport const NavBar = memo(function NavBar() {\n\tconst [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] =\n\t\tuseBoolean(false)\n\n\treturn (\n\t\t<NavBarContainer>\n\t\t\t<HamburgerMenu\n\t\t\t\taria-label=\"CollapseMenu\"\n\t\t\t\ticonName=\"CollapseMenu\"\n\t\t\t\tclassName={classNames.white}\n\t\t\t\tonClick={openPanel}\n\t\t\t/>\n\t\t\t<NavPanel isOpen={isOpen} onDismiss={dismissPanel}></NavPanel>\n\t\t</NavBarContainer>\n\t)\n})\n\nconst iconClass = mergeStyles({\n\tfontSize: 30,\n\theight: 30,\n\twidth: 30,\n\tcursor: 'pointer',\n})\n\nconst classNames = mergeStyleSets({\n\twhite: [{ color: 'white' }, iconClass],\n})\n\nconst NavBarContainer = styled.div``\n\nconst HamburgerMenu = styled(FontIcon)`\n\tfloat: right;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { ThemeVariant } from '@thematic/core'\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\nimport { NavBar } from '~components/NavBar'\n\nexport const Header = memo(function Header() {\n\treturn (\n\t\t<Container>\n\t\t\t<Title>Data Wrangling Components</Title>\n\t\t\t<Subtitle>pipeline builder</Subtitle>\n\t\t\t<NavBar />\n\t\t</Container>\n\t)\n})\n\n// always ensure the header is dark, regardless of mode\nconst Container = styled.div`\n\tpadding: 4px 16px 4px 16px;\n\tbackground: ${({ theme }) =>\n\t\ttheme.variant === ThemeVariant.Light\n\t\t\t? theme.application().highContrast()\n\t\t\t: theme.application().lowContrast()};\n\tborder-bottom: 1px solid\n\t\t${({ theme }) =>\n\t\t\ttheme.variant === ThemeVariant.Light\n\t\t\t\t? theme.application().midHighContrast()\n\t\t\t\t: theme.application().lowMidContrast()};\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n\nconst Title = styled.h1`\n\ttext-transform: uppercase;\n\tfont-size: 28px;\n\tmargin: 0;\n\tcolor: ${({ theme }) =>\n\t\ttheme.variant === ThemeVariant.Light\n\t\t\t? theme.application().lowContrast()\n\t\t\t: theme.application().midHighContrast()};\n\twidth: 70%;\n`\n\nconst Subtitle = styled.h2`\n\tmargin: 0;\n\tfont-weight: normal;\n\tcolor: ${({ theme }) =>\n\t\ttheme.variant === ThemeVariant.Light\n\t\t\t? theme.application().lowMidContrast()\n\t\t\t: theme.application().midHighContrast()};\n\twidth: 20%;\n\ttext-align: right;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Spinner } from '@fluentui/react'\nimport React, { memo, Suspense } from 'react'\nimport styled from 'styled-components'\n\nexport const Layout: React.FC = memo(function Layout({ children }) {\n\treturn (\n\t\t<Container className={'layout-container'}>\n\t\t\t<Suspense fallback={<StyledSpinner />}>\n\t\t\t\t<Content className={'layout-content-container'}>{children}</Content>\n\t\t\t</Suspense>\n\t\t</Container>\n\t)\n})\n\nconst StyledSpinner = styled(Spinner)`\n\tmargin-top: 20px;\n`\nconst Container = styled.div``\n\nconst Content = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Spinner } from '@fluentui/react'\nimport { memo, Suspense } from 'react'\nimport { HashRouter } from 'react-router-dom'\nimport { RecoilRoot } from 'recoil'\nimport styled from 'styled-components'\n\nimport { Footer } from '~components/Footer'\n\nimport { ErrorBoundary } from './ErrorBoundary'\nimport { Header } from './Header'\nimport { Layout } from './Layout'\nimport { RouteOptions } from './RouteOptions'\nimport { StyleContext } from './StyleContext'\n\nexport const App: React.FC = memo(function App() {\n\treturn (\n\t\t<ErrorBoundary>\n\t\t\t<RecoilRoot>\n\t\t\t\t<HashRouter>\n\t\t\t\t\t<Suspense fallback={<Spinner />}>\n\t\t\t\t\t\t<StyleContext>\n\t\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t\t\t<Layout>\n\t\t\t\t\t\t\t\t\t<RouteOptions />\n\t\t\t\t\t\t\t\t</Layout>\n\t\t\t\t\t\t\t\t<Footer />\n\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t</StyleContext>\n\t\t\t\t\t</Suspense>\n\t\t\t\t</HashRouter>\n\t\t\t</RecoilRoot>\n\t\t</ErrorBoundary>\n\t)\n})\n\nconst Container = styled.div``\n"],"names":[],"sourceRoot":""}