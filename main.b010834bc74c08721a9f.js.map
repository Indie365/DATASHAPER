{"version":3,"file":"main.b010834bc74c08721a9f.js","mappings":";;AAQA;;;AAKA;;AAIA;;AAIA;ACVA;AACA;;ACQA;;;;;;ACPA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;AAeA;;AAIA;;;;AAMA;;;;;;AClDA;;AAGA;AAGA;;;ACidA;;;;AC3dA;;;AAGA;;;ACGA;;;AAKA;;;;;;AAQA;;;;ACRA;;;ACTA;;;;AAMA;;AAWA;;;;AAMA;;;AAKA;;AAIA;;;AC9BA;;;;AC8CA;;;ACnDA;;;ACAA;;;;AAMA;;;ACgKA;;;;;AAOA;;;;ACvJA;;;AA2HA;;;;AAMA;;;;AClJA;;;;ACJA;;;;;;AAMA;AAGA;;;;ACkBA;;;;AC3BA;;AAEA;AAGA;;;;;ACyEA;;;;;AAKA;AAGA;;;;AAMA;;;;AAMA;AAGA;;;;AAMA;;;;;AAKA;AClHA;;;;;;;;ACWA;;;;AASA;;;;AAMA;;AAIA;;;;;AAOA;;;;;;;;;;;;ACtCA;AAGA;;ACAA;;;;;;ACGA;;;;AAMA;;;AAGA;AAGA;;;AAGA;AAGA;;;AAKA;;;ACtBA;;ACJA;;ACKA;;AAIA;;;;AAMA;;ACLA;;;;;ACTA;;AAIA;;;;;;AAQA;;;;AAKA;;AAIA;;ACvBA;;;ACSA;;;ACRA;;ACQA;;;;;ACRA;ACLA;ACEA;;;;ACWA;;;;ACHA;;;;;ACGA;;;;AAIA;;AAIA;;;AAKA;;AAtBA;;AA4BA;;;;;AAOA;;AAIA;;AAEA;;AChBA;ACxBA;;;;;;AAMA;AACA;;;;;AAQA;;;;;AAKA;AACA;;AAIA;;AA9BA;AAAA;AAkCA;;AAIA;;;AAMA;AACA;AAIA;AAGA;;AAKA;AAEA;;AAEA;AACA;AAEA;;AAEA;;AAGA;;;;;;;;;;ACjEA;AAGA;;;;ACEA;;;;;;;ACDA;;;ACJA;;AAIA;ACgFA;AAMA;AAiBA;AC1GA;AACA;AACA;;;;ACEA;AACA;;;;;;;;;;;ACTA;ACoFA;;;AAIA;;AAGA;;AAGA;;;;;;;;ACiCA;;;;;;;;;;;;;;;;;;AC5HA;;;;AAyEA;AAEA;;;AAGA;AAEA;ACxFA;;ACoDA;AACA;;;;;;AAOA;;;AAIA;;;;AAKA;;;;;;AAOA;;;;;;ACrEA;;;;;;;;;;AAYA;;AAWA;;;AChBA;;ACNA;;AAKA;;;;;;AAWA;;;;;;AAMA;;AAOA;;AC9BA;;ACGA;;;;AAIA;AACA;AAEA;AAGA;;;;;;;AAOA;;;AAGA;AC1BA;;AAIA;;;AAKA;;;AAIA;;ACXA;;ACEA;;AAIA;;;ACAA;;AAAA;;;;;;;;;;;;;;ACDA","sources":["webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/controls/GroupHeader.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/CommandBar.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/CommandBar.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/Guidance.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbForm/VerbForm.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Filter.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/controls/CalendarPicker.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/controls/CalendarPicker.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/shared/FilterFunction.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/SetOperation.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/SetOperation.hooks.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/controls/SortInstruction.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Orderby.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Recode.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Rename.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Rollup.base.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbs/Sample.styles.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/StepComponent.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/StepSelector.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbForm/VerbDescription.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/verbDescriptions/AggregateDescription.tsx","webpack://@data-wrangling-components/webapp/./src/components/ControlBar.styles.ts","webpack://@data-wrangling-components/webapp/./src/components/Table.styles.ts","webpack://@data-wrangling-components/webapp/./src/components/Table.tsx","webpack://@data-wrangling-components/webapp/./src/components/Section.styles.ts","webpack://@data-wrangling-components/webapp/./src/components/Section.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/StepDescription.tsx","webpack://@data-wrangling-components/webapp/./src/components/StepOutput.styles.ts","webpack://@data-wrangling-components/webapp/./src/components/StepOutput.tsx","webpack://@data-wrangling-components/webapp/./src/pages/DebugPage.styles.ts","webpack://@data-wrangling-components/webapp/./src/pages/PerfPage.styles.ts","webpack://@data-wrangling-components/webapp/./src/pages/PerfPage.base.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/ManageWorkflow.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/StepCard.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/StepCard.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/DetailText.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/DetailText.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/StepList.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/StepList.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/TableTransformModal.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/TableTransformModal.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/PrepareDataFull.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/PreviewTable.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/PreviewTable.tsx","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@data-wrangling-components-react-virtual-03db6ac548/1/javascript/react/src/components/TableListBar.styles.ts","webpack://@data-wrangling-components/webapp/./src/pages/PrepareDataPage.styles.ts","webpack://@data-wrangling-components/webapp/../../.yarn/cache/ajv-npm-8.11.0-83d029789c-5e0ff22680.zip/node_modules/ajv/dist/compile/validate/dataType.js","webpack://@data-wrangling-components/webapp/../../.yarn/cache/ajv-npm-8.11.0-83d029789c-5e0ff22680.zip/node_modules/ajv/dist/vocabularies/applicator/dependencies.js","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@essex-arquero-react-virtual-046a018d16/0/cache/@essex-arquero-react-npm-1.1.0-672e90a6a6-604cf74fa5.zip/node_modules/@essex/arquero-react/dist/ArqueroDetailsList/renderers/CommandBarContainer.js","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@essex-arquero-react-virtual-046a018d16/0/cache/@essex-arquero-react-npm-1.1.0-672e90a6a6-604cf74fa5.zip/node_modules/@essex/arquero-react/dist/ArqueroDetailsList/renderers/EmptyCell.js","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@essex-arquero-react-virtual-046a018d16/0/cache/@essex-arquero-react-npm-1.1.0-672e90a6a6-604cf74fa5.zip/node_modules/@essex/arquero-react/dist/GroupHeader/GroupHeader.js","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@essex-arquero-react-virtual-046a018d16/0/cache/@essex-arquero-react-npm-1.1.0-672e90a6a6-604cf74fa5.zip/node_modules/@essex/arquero-react/dist/ArqueroDetailsList/ArqueroDetailsList.js","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@essex-arquero-react-virtual-046a018d16/0/cache/@essex-arquero-react-npm-1.1.0-672e90a6a6-604cf74fa5.zip/node_modules/@essex/arquero-react/dist/ArqueroTableHeader/TableName.js","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@essex-arquero-react-virtual-046a018d16/0/cache/@essex-arquero-react-npm-1.1.0-672e90a6a6-604cf74fa5.zip/node_modules/@essex/arquero-react/dist/ArqueroTableHeader/constants.js","webpack://@data-wrangling-components/webapp/../../.yarn/__virtual__/@essex-arquero-react-virtual-046a018d16/0/cache/@essex-arquero-react-npm-1.1.0-672e90a6a6-604cf74fa5.zip/node_modules/@essex/arquero-react/dist/ArqueroTableHeader/ArqueroTableHeader.js","webpack://@data-wrangling-components/webapp/./src/components/Footer.styles.ts","webpack://@data-wrangling-components/webapp/./src/components/Footer.tsx","webpack://@data-wrangling-components/webapp/./src/components/Header.styles.ts","webpack://@data-wrangling-components/webapp/./src/components/Header.tsx","webpack://@data-wrangling-components/webapp/./src/components/Layout.styles.ts","webpack://@data-wrangling-components/webapp/./src/components/NavPanel.styles.ts","webpack://@data-wrangling-components/webapp/./src/components/NavPanel.tsx","webpack://@data-wrangling-components/webapp/./src/components/SettingsPanel.styles.ts","webpack://@data-wrangling-components/webapp/./src/components/SettingsPanel.tsx","webpack://@data-wrangling-components/webapp/./src/App/App.tsx"],"sourcesContent":["/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { IconButton } from '@fluentui/react'\nimport styled from 'styled-components'\n\nexport const HeaderContainer = styled.div<{ groupLevel: number }>`\n\tpadding-left: ${({ groupLevel }) => `${groupLevel * 12}px`};\n\tdisplay: flex;\n\tgap: 8px;\n`\n\nexport const LevelButton = styled(IconButton as any)`\n\twidth: 5%;\n`\n\nexport const HeaderDetailsText = styled.span`\n\talign-self: center;\n`\n\nexport const Bold = styled.b``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const CommandBarWrapper = styled.div<{\n\theight?: string\n\tbgColor: string\n\tcolor: string\n}>`\n\tbackground-color: ${({ bgColor }) => bgColor};\n\tcolor: ${({ color }) => color || 'inherit'};\n\twidth: 100%;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { CommandBar as CB } from '@fluentui/react'\nimport { memo } from 'react'\n\nimport {\n\tuseColorDefaults,\n\tuseCommands,\n\tuseCommandStyles,\n\tuseHandleOnDataGrown,\n\tuseHandleOnDataReduce,\n\tuseOverflowButtonProps,\n} from './CommandBar.hooks.js'\nimport { CommandBarWrapper } from './CommandBar.styles.js'\nimport type { CommandBarProps } from './CommandBar.types.js'\n\n/**\n * Extends the fluent command bar to override styles and collapsing for our inverted header\n */\nexport const CommandBar: React.FC<CommandBarProps> = memo(function CommandBar({\n\titems,\n\theight,\n\tbgColor,\n\tcolor,\n\tstyles,\n\t...props\n}) {\n\tconst { foreground, background } = useColorDefaults(color, bgColor)\n\tconst overflowButtonProps = useOverflowButtonProps(background, foreground)\n\tconst handleOnDataReduce = useHandleOnDataReduce(foreground)\n\tconst handleOnDataGrown = useHandleOnDataGrown(foreground)\n\tconst commandStyles = useCommandStyles(styles)\n\tconst fixedItems = useCommands(items, background, foreground)\n\treturn (\n\t\t<CommandBarWrapper bgColor={background} color={foreground}>\n\t\t\t<CB\n\t\t\t\titems={fixedItems}\n\t\t\t\tstyles={commandStyles}\n\t\t\t\toverflowButtonProps={overflowButtonProps}\n\t\t\t\tonDataReduced={handleOnDataReduce}\n\t\t\t\tonDataGrown={handleOnDataGrown}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t</CommandBarWrapper>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { IconButton } from '@fluentui/react'\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n\tposition: relative;\n\n\th1 {\n\t\tmargin-top: 0;\n\t\ttext-transform: uppercase;\n\t\tcolor: ${({ theme }) => theme.application().lowMidContrast().hex()};\n\t}\n\n\th2 {\n\t\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 1rem;\n\n\t\t&.active + .details {\n\t\t\topacity: 1;\n\t\t\theight: auto;\n\t\t\ttransform: translateX(0);\n\t\t\toverflow-x: auto;\n\t\t}\n\t}\n\n\ttable {\n\t\tborder-collapse: collapse;\n\n\t\tth {\n\t\t\tfont-weight: bold;\n\t\t}\n\n\t\ttd,\n\t\tth {\n\t\t\tborder: 1px solid\n\t\t\t\t${({ theme }) => theme.application().lowContrast().hex()};\n\t\t\tpadding: 5px;\n\t\t\ttext-align: center;\n\t\t}\n\t}\n\n\t.details {\n\t\topacity: 0;\n\t\theight: 0;\n\t\ttransition: transform 0.5s ease-in-out;\n\t\ttransform: translateX(100%);\n\t\toverflow-x: hidden;\n\t}\n`\n\nexport const Icon = styled(IconButton as any)`\n\tfont-size: 2.5rem;\n`\n\nexport const ButtonWrapper = styled.div`\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n`\n\nexport const icons = {\n\tback: { iconName: 'Back' },\n\thome: { iconName: 'Home' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const LeftAlignedRow = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\talign-items: flex-end;\n`\n\n/**\n * For explanatory text below an input,\n */\nexport const InputExplainer = styled.div`\n\tfont-size: 0.85em;\n\tcolor: ${({ theme }) => theme.application().midHighContrast().hex()};\n`\n\nexport const dropdownStyles = {\n\troot: {\n\t\twidth: 220,\n\t},\n}\n\n/**\n * For side-by-side dropdowns with a 12px gap\n */\nexport const narrowDropdownStyles = {\n\troot: {\n\t\twidth: 135,\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Step } from '@data-wrangling-components/core'\nimport type { IComboBoxOption, IDropdownOption } from '@fluentui/react'\nimport {\n\tCheckbox,\n\tComboBox,\n\tDropdown,\n\tPosition,\n\tSpinButton,\n\tTextField,\n} from '@fluentui/react'\nimport merge from 'lodash-es/merge.js'\nimport noop from 'lodash-es/noop'\nimport { Fragment, memo, useMemo } from 'react'\nimport { Case, Switch } from 'react-if'\nimport styled from 'styled-components'\n\nimport {\n\tuseCheckboxChangeHandler,\n\tuseComboBoxChangeHandler,\n\tuseComboBoxInputValueChangeHandler,\n\tuseDropdownChangeHandler,\n\tuseSpinButtonChangeHandler,\n\tuseTextFieldChangeHandler,\n} from '../hooks/index.js'\nimport type { StepChangeFunction } from '../types.js'\n\nexport interface FormInputBase<\n\tT,\n\tOnChangeHandler = (step: Step<T>, optionKey: unknown | undefined) => void,\n> {\n\t/**\n\t * The user-friendly form label\n\t */\n\tlabel: string\n\n\t/**\n\t * The placeholder text to show\n\t */\n\tplaceholder?: string\n\n\t/**\n\t * Whether this input is required\n\t */\n\trequired?: boolean\n\n\t/**\n\t * Whether this input is presented\n\t */\n\tif?: boolean\n\n\t/**\n\t * Whether this input is disabled\n\t */\n\tdisabled?: boolean\n\n\t/**\n\t * An optional React component to wrap the input with\n\t */\n\twrapper?: React.ComponentType\n\n\tstyles?: any\n\n\tonChange: OnChangeHandler\n}\n\nexport interface SingleChoiceFormInput<T> extends FormInputBase<T> {\n\ttype: FormInputType.SingleChoice\n\n\t/**\n\t * The form input options (required if type is enum)\n\t */\n\toptions?: IDropdownOption[]\n\n\t/**\n\t * The form input value or selected key (if enum)\n\t */\n\tcurrent: number | string | undefined\n}\n\nexport interface ComboBoxFormInput<T>\n\textends FormInputBase<\n\t\tT,\n\t\t(\n\t\t\tstep: Step<T>,\n\t\t\toption: string | number | undefined,\n\t\t\tvalue: string | undefined,\n\t\t) => void\n\t> {\n\ttype: FormInputType.ComboBox\n\n\t/**\n\t * The form input options (required if type is enum)\n\t */\n\toptions?: IComboBoxOption[]\n\n\t/**\n\t * The form input value or selected key (if enum)\n\t */\n\tcurrent: string | undefined\n\n\tonInputValueChange?: (step: Step<T>, value: string | undefined) => void\n}\n\nexport interface TextFormInput<T> extends FormInputBase<T> {\n\ttype: FormInputType.Text\n\n\t/**\n\t * The form input options (required if type is enum)\n\t */\n\toptions?: IDropdownOption[]\n\n\t/**\n\t * The form input value or selected key (if enum)\n\t */\n\tcurrent: string | undefined\n}\n\nexport interface MultiChoiceFormInput<T> extends FormInputBase<T> {\n\ttype: FormInputType.MultiChoice\n\n\t/**\n\t * The form input options (required if type is enum)\n\t */\n\toptions?: IDropdownOption[]\n\n\t/**\n\t * The form input value or selected key (if enum)\n\t */\n\tcurrent?: string[] | undefined\n}\n\nexport interface CheckboxFormInput<T> extends FormInputBase<T> {\n\ttype: FormInputType.Checkbox\n\n\t/**\n\t * The form input value or selected key (if enum)\n\t */\n\tcurrent: boolean | undefined\n}\n\nexport interface NumberSpinnerFormInput<T> extends FormInputBase<T> {\n\ttype: FormInputType.NumberSpinner\n\tmin?: number\n\tmax?: number\n\tstep?: number\n\t/**\n\t * The form input value or selected key (if enum)\n\t */\n\tcurrent: number | undefined\n}\n\nexport type FormInput<T> =\n\t| SingleChoiceFormInput<T>\n\t| MultiChoiceFormInput<T>\n\t| NumberSpinnerFormInput<T>\n\t| CheckboxFormInput<T>\n\t| TextFormInput<T>\n\t| ComboBoxFormInput<T>\n\nexport enum FormInputType {\n\tSingleChoice = 'single_choice',\n\tMultiChoice = 'multi_choice',\n\tComboBox = 'combobox',\n\tNumberSpinner = 'number_spinner',\n\tCheckbox = 'checkbox',\n\tText = 'text',\n}\n\nexport const VerbForm: React.FC<{\n\tinputs: FormInput<any>[]\n\tstep: Step<any>\n\tonChange?: StepChangeFunction<any>\n}> = memo(function VerbInput({ inputs, step, onChange }) {\n\tconst rows = useMemo(\n\t\t() =>\n\t\t\tinputs.map((input, index) => (\n\t\t\t\t<Input\n\t\t\t\t\tinput={input}\n\t\t\t\t\tstep={step}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tkey={`verb-${input.label}-${index}`}\n\t\t\t\t/>\n\t\t\t)),\n\t\t[inputs, onChange, step],\n\t)\n\treturn <Container>{rows}</Container>\n})\n\nconst Input: React.FC<{\n\tinput: FormInput<unknown>\n\tstep: Step<unknown>\n\tonChange?: StepChangeFunction<unknown>\n}> = memo(function Input({ input, step, onChange }) {\n\tconst condition = input.if ?? true\n\tconst inputType: FormInputType = input.type\n\n\treturn !condition ? null : (\n\t\t<Row>\n\t\t\t<Switch>\n\t\t\t\t<Case condition={inputType === FormInputType.SingleChoice}>\n\t\t\t\t\t<SingleChoiceInput\n\t\t\t\t\t\tinput={input as SingleChoiceFormInput<unknown>}\n\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t/>\n\t\t\t\t</Case>\n\t\t\t\t<Case condition={inputType === FormInputType.MultiChoice}>\n\t\t\t\t\t<MultiChoiceInput\n\t\t\t\t\t\tinput={input as MultiChoiceFormInput<unknown>}\n\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t/>\n\t\t\t\t</Case>\n\t\t\t\t<Case condition={inputType === FormInputType.NumberSpinner}>\n\t\t\t\t\t<NumberSpinnerInput\n\t\t\t\t\t\tinput={input as NumberSpinnerFormInput<unknown>}\n\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t/>\n\t\t\t\t</Case>\n\t\t\t\t<Case condition={inputType === FormInputType.Checkbox}>\n\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\tinput={input as CheckboxFormInput<unknown>}\n\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t/>\n\t\t\t\t</Case>\n\t\t\t\t<Case condition={inputType === FormInputType.Text}>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tinput={input as TextFormInput<unknown>}\n\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t/>\n\t\t\t\t</Case>\n\t\t\t\t<Case condition={inputType === FormInputType.ComboBox}>\n\t\t\t\t\t<ComboBoxInput\n\t\t\t\t\t\tinput={input as ComboBoxFormInput<unknown>}\n\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t/>\n\t\t\t\t</Case>\n\t\t\t</Switch>\n\t\t</Row>\n\t)\n})\n\nconst SingleChoiceInput: React.FC<{\n\tinput: SingleChoiceFormInput<unknown>\n\tstep: Step<unknown>\n\tonChange?: StepChangeFunction<unknown>\n}> = memo(function SingleChoiceInput({\n\tstep,\n\tinput: {\n\t\tlabel,\n\t\tplaceholder,\n\t\tcurrent,\n\t\trequired,\n\t\toptions,\n\t\tdisabled,\n\t\twrapper: Wrapper = Fragment,\n\t\tonChange: updater,\n\t},\n\tonChange,\n}) {\n\tconst dropdownChangeHandler = useDropdownChangeHandler(\n\t\tstep,\n\t\tupdater,\n\t\tonChange,\n\t)\n\treturn (\n\t\t<Wrapper>\n\t\t\t<Dropdown\n\t\t\t\trequired={required}\n\t\t\t\tlabel={label}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tstyles={dropdownStyles}\n\t\t\t\tselectedKey={current as number | string}\n\t\t\t\toptions={options!}\n\t\t\t\tonChange={dropdownChangeHandler}\n\t\t\t/>\n\t\t</Wrapper>\n\t)\n})\n\nconst MultiChoiceInput: React.FC<{\n\tinput: MultiChoiceFormInput<unknown>\n\tstep: Step<unknown>\n\tonChange?: StepChangeFunction<unknown>\n}> = memo(function MultiChoiceInput({\n\tstep,\n\tinput: {\n\t\tlabel,\n\t\tplaceholder,\n\t\tcurrent,\n\t\trequired,\n\t\toptions,\n\t\tdisabled,\n\t\twrapper: Wrapper = Fragment,\n\t\tonChange: updater,\n\t},\n\tonChange,\n}) {\n\tconst dropdownChangeHandler = useDropdownChangeHandler(\n\t\tstep,\n\t\tupdater,\n\t\tonChange,\n\t)\n\treturn (\n\t\t<Wrapper>\n\t\t\t<Dropdown\n\t\t\t\trequired={required}\n\t\t\t\tlabel={label}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tstyles={dropdownStyles}\n\t\t\t\tselectedKeys={current}\n\t\t\t\toptions={options!}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tonChange={dropdownChangeHandler}\n\t\t\t\tmultiSelect\n\t\t\t/>\n\t\t</Wrapper>\n\t)\n})\n\nconst ComboBoxInput: React.FC<{\n\tinput: ComboBoxFormInput<unknown>\n\tstep: Step<unknown>\n\tonChange?: StepChangeFunction<unknown>\n}> = memo(function ComboBoxInput({\n\tstep,\n\tinput: {\n\t\tlabel,\n\t\tplaceholder,\n\t\tcurrent,\n\t\trequired,\n\t\toptions,\n\t\tdisabled,\n\t\twrapper: Wrapper = Fragment,\n\t\tonChange: updater,\n\t\tonInputValueChange,\n\t},\n\tonChange,\n}) {\n\tconst changeHandler = useComboBoxChangeHandler(step, updater, onChange)\n\tconst valueChangeHandler = useComboBoxInputValueChangeHandler(\n\t\tstep,\n\t\tonInputValueChange || noop,\n\t\tonChange,\n\t)\n\treturn (\n\t\t<Wrapper>\n\t\t\t<ComboBox\n\t\t\t\trequired={required}\n\t\t\t\tlabel={label}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tstyles={dropdownStyles}\n\t\t\t\tselectedKey={current as number | string}\n\t\t\t\toptions={options!}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tonChange={changeHandler}\n\t\t\t\tonInputValueChange={valueChangeHandler}\n\t\t\t/>\n\t\t</Wrapper>\n\t)\n})\n\nconst NumberSpinnerInput: React.FC<{\n\tinput: NumberSpinnerFormInput<unknown>\n\tstep: Step<unknown>\n\tonChange?: StepChangeFunction<unknown>\n}> = memo(function NumberSpinnerInput({\n\tstep,\n\tinput: {\n\t\tlabel,\n\t\tplaceholder,\n\t\tcurrent,\n\t\tmin,\n\t\tmax,\n\t\tstep: spinStep,\n\t\tdisabled,\n\t\twrapper: Wrapper = Fragment,\n\t\tonChange: updater,\n\t\tstyles,\n\t},\n\tonChange,\n}) {\n\tconst changeHandler = useSpinButtonChangeHandler(step, updater, onChange)\n\treturn (\n\t\t<Wrapper>\n\t\t\t<SpinButton\n\t\t\t\tlabel={label}\n\t\t\t\tlabelPosition={Position.top}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tmin={min}\n\t\t\t\tmax={max}\n\t\t\t\tstep={spinStep}\n\t\t\t\tvalue={current ? `${current}` : ''}\n\t\t\t\tonChange={changeHandler}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tstyles={merge({}, dropdownStyles, styles)}\n\t\t\t/>\n\t\t</Wrapper>\n\t)\n})\n\nconst CheckboxInput: React.FC<{\n\tinput: CheckboxFormInput<unknown>\n\tstep: Step<unknown>\n\tonChange?: StepChangeFunction<unknown>\n}> = memo(function CheckboxInput({\n\tstep,\n\tinput: {\n\t\tlabel,\n\t\trequired,\n\t\tcurrent,\n\t\twrapper: Wrapper = Fragment,\n\t\tonChange: updater,\n\t\tdisabled,\n\t\tstyles,\n\t},\n\tonChange,\n}) {\n\tconst changeHandler = useCheckboxChangeHandler(step, updater, onChange)\n\treturn (\n\t\t<Wrapper>\n\t\t\t<Checkbox\n\t\t\t\tlabel={label}\n\t\t\t\trequired={required}\n\t\t\t\tchecked={current}\n\t\t\t\tonChange={changeHandler}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tstyles={merge({}, dropdownStyles, styles)}\n\t\t\t/>\n\t\t</Wrapper>\n\t)\n})\n\nconst TextInput: React.FC<{\n\tinput: TextFormInput<unknown>\n\tstep: Step<unknown>\n\tonChange?: StepChangeFunction<unknown>\n}> = memo(function TextInput({\n\tstep,\n\tinput: {\n\t\tlabel,\n\t\tplaceholder,\n\t\trequired,\n\t\tcurrent,\n\t\twrapper: Wrapper = Fragment,\n\t\tonChange: updater,\n\t\tdisabled,\n\t\tstyles,\n\t},\n\tonChange,\n}) {\n\tconst changeHandler = useTextFieldChangeHandler(step, updater, onChange)\n\treturn (\n\t\t<Wrapper>\n\t\t\t<TextField\n\t\t\t\tlabel={label}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\trequired={required}\n\t\t\t\tvalue={current}\n\t\t\t\tonChange={changeHandler}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tstyles={merge({}, dropdownStyles, styles)}\n\t\t\t/>\n\t\t</Wrapper>\n\t)\n})\n\nconst dropdownStyles = {\n\troot: {\n\t\twidth: 220,\n\t},\n}\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nconst Row = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n`\n\nexport const Vertical = styled.div<{ index: number }>`\n\tdisplay: flex;\n\tflex-direction: column;\n\tmargin-top: ${({ index }) => (index > 0 ? 6 : 0)}px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { FontIcon, Label,mergeStyles } from '@fluentui/react'\nimport styled from 'styled-components'\n\nexport const iconClass = mergeStyles({\n\tfontSize: 20,\n\theight: 25,\n\twidth: 25,\n\tmargin: '0 25px',\n})\n\nexport const Container = styled.div`\n\tdisplay: inline;\n`\n\nexport const CalendarContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\n\nexport const CalendarButton = styled(FontIcon)`\n\tdisplay: inline;\n\tfloat: left;\n\tmargin-top: 5px;\n\tmargin-left: 10px;\n\tmargin-right: 0px;\n`\n\nexport const CalendarLabel = styled(Label)`\n\tdisplay: inline;\n\tfloat: left;\n\tmargin-left: 10px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport {\n\tCalendar,\n\tCallout,\n\tdefaultCalendarStrings,\n\tDirectionalHint,\n\tFocusTrapZone,\n} from '@fluentui/react'\nimport { useBoolean } from '@fluentui/react-hooks'\nimport { memo, useCallback,useRef, useState } from 'react'\n\nimport {\n\tCalendarButton,\n\tCalendarContainer,\n\tCalendarLabel,\n\tContainer,\n\ticonClass,\n} from './CalendarPicker.styles.js'\nimport type { CalendarPickerProps } from './CalendarPicker.types.js'\n\nexport const CalendarPicker: React.FC<CalendarPickerProps> = memo(\n\tfunction CalendarPicker({ onSelectDate, disabled, cleanLabel }) {\n\t\tconst [selectedDate, setSelectedDate] = useState<Date>()\n\t\tconst [\n\t\t\tshowCalendar,\n\t\t\t{ toggle: toggleShowCalendar, setFalse: hideCalendar },\n\t\t] = useBoolean(false)\n\t\tconst buttonContainerRef = useRef<HTMLDivElement>(null)\n\n\t\tconst onSelectDateChange = useCallback(\n\t\t\t(date: Date): void => {\n\t\t\t\tsetSelectedDate(date)\n\t\t\t\thideCalendar()\n\t\t\t},\n\t\t\t[hideCalendar],\n\t\t)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<CalendarContainer ref={buttonContainerRef}>\n\t\t\t\t\t<CalendarButton\n\t\t\t\t\t\taria-label=\"Compass\"\n\t\t\t\t\t\ticonName=\"Calendar\"\n\t\t\t\t\t\tclassName={iconClass}\n\t\t\t\t\t\tonClick={!disabled ? toggleShowCalendar : undefined}\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t? { cursor: 'default', color: 'rgb(118, 118, 118)' }\n\t\t\t\t\t\t\t\t: { cursor: 'pointer', color: 'rgb(241, 241, 241)' }\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t{selectedDate !== undefined && !cleanLabel ? (\n\t\t\t\t\t\t<CalendarLabel>\n\t\t\t\t\t\t\t{!cleanLabel ? selectedDate?.toLocaleDateString() : ''}\n\t\t\t\t\t\t</CalendarLabel>\n\t\t\t\t\t) : null}\n\t\t\t\t</CalendarContainer>\n\t\t\t\t{showCalendar && (\n\t\t\t\t\t<Callout\n\t\t\t\t\t\tisBeakVisible={false}\n\t\t\t\t\t\tgapSpace={0}\n\t\t\t\t\t\tdoNotLayer={false}\n\t\t\t\t\t\ttarget={buttonContainerRef}\n\t\t\t\t\t\tdirectionalHint={DirectionalHint.bottomLeftEdge}\n\t\t\t\t\t\tonDismiss={hideCalendar}\n\t\t\t\t\t\tsetInitialFocus\n\t\t\t\t\t>\n\t\t\t\t\t\t<FocusTrapZone isClickableOutsideFocusTrap>\n\t\t\t\t\t\t\t<Calendar\n\t\t\t\t\t\t\t\tonDismiss={hideCalendar}\n\t\t\t\t\t\t\t\tshowMonthPickerAsOverlay\n\t\t\t\t\t\t\t\thighlightSelectedMonth\n\t\t\t\t\t\t\t\tshowGoToToday={false}\n\t\t\t\t\t\t\t\tonSelectDate={(date: Date) => {\n\t\t\t\t\t\t\t\t\tonSelectDate(date)\n\t\t\t\t\t\t\t\t\tonSelectDateChange(date)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvalue={selectedDate}\n\t\t\t\t\t\t\t\t// Calendar uses English strings by default. For localized apps, you must override this prop.\n\t\t\t\t\t\t\t\tstrings={defaultCalendarStrings}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FocusTrapZone>\n\t\t\t\t\t</Callout>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Label, TextField, Toggle } from '@fluentui/react'\nimport styled from 'styled-components'\n\nimport { narrowDropdownStyles } from '../../styles.js'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const SideBySide = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\talign-items: flex-end;\n`\n\nexport const leftStyles = {\n\troot: {\n\t\t...narrowDropdownStyles.root,\n\t\tmarginRight: 12,\n\t},\n}\n\nexport const TextValue = styled(TextField)`\n\tdisplay: inline;\n`\n\nexport const OrLabel = styled(Label)`\n\tdisplay: inline;\n\tpadding-left: 10px;\n\tpadding-right: 10px;\n`\n\nexport const FilterContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\n\nexport const BooleanToggle = styled(Toggle)`\n\tmargin-top: 5px;\n`\n\nexport const spinStyles = {\n\troot: {\n\t\twidth: 120,\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const icons = {\n\tadd: { iconName: 'Add' },\n\tdelete: { iconName: 'Delete' },\n}\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const Tables = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { GraphManager, Step } from '@data-wrangling-components/core'\nimport { IconButton } from '@fluentui/react'\nimport { useMemo } from 'react'\n\nimport { TableDropdown } from '../controls/index.js'\nimport { useSimpleDropdownOptions, useTableNames } from '../hooks/index.js'\nimport { LeftAlignedRow } from '../styles.js'\nimport { icons } from './SetOperation.styles.js'\n\nexport function useOthers(\n\tstep: Step,\n\tonChange?: (step: Step) => void,\n\tstore?: GraphManager,\n): (JSX.Element | null)[] {\n\tconst tableNames = useTableNames(store)\n\tconst tableOptions = useSimpleDropdownOptions(tableNames)\n\treturn useMemo<(JSX.Element | null)[]>(() => {\n\t\treturn (step.input.others || EMPTY).map((input, index) => {\n\t\t\tconst other = input.node\n\n\t\t\t// on delete, remove the input\n\t\t\tconst handleDeleteClick = () => {\n\t\t\t\tonChange?.({\n\t\t\t\t\t...step,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t...step.input,\n\t\t\t\t\t\tothers: (step.input.others || EMPTY).filter(o => o !== input),\n\t\t\t\t\t} as Step['input'],\n\t\t\t\t})\n\t\t\t}\n\t\t\tif (!store) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<LeftAlignedRow key={`set-op-${other}-${index}`}>\n\t\t\t\t\t<TableDropdown\n\t\t\t\t\t\tlabel={''}\n\t\t\t\t\t\toptions={tableOptions}\n\t\t\t\t\t\tselectedKey={other}\n\t\t\t\t\t\tonChange={(_evt, option) => {\n\t\t\t\t\t\t\tconst update = { ...step }\n\t\t\t\t\t\t\tif (option) {\n\t\t\t\t\t\t\t\tinput.node = `${option.key}`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tonChange?.(update)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\ttitle={'Remove this table'}\n\t\t\t\t\t\ticonProps={icons.delete}\n\t\t\t\t\t\tonClick={handleDeleteClick}\n\t\t\t\t\t/>\n\t\t\t\t</LeftAlignedRow>\n\t\t\t)\n\t\t})\n\t}, [step, store, tableOptions, onChange])\n}\n\nconst EMPTY: any[] = []\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n`\n\nexport const icons = {\n\tdelete: { iconName: 'Delete' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const Sorts = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n`\n\nexport const icons = {\n\tadd: { iconName: 'Add' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { RecodeArgs, Step } from '@data-wrangling-components/core'\nimport type { DataType, Value } from '@essex/arquero'\nimport { coerce } from '@essex/arquero'\nimport type { IDropdownOption } from '@fluentui/react'\nimport { ActionButton, Icon, IconButton, TextField } from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { ColumnValueDropdown } from '../controls/index.js'\nimport {\n\tuseColumnType,\n\tuseColumnValueOptions,\n\tuseStepDataTable,\n} from '../hooks/index.js'\nimport type { StepComponentProps } from '../types.js'\nimport {\n\tuseColumnValues,\n\tuseDisabled,\n\tuseHandleAddButtonClick,\n\tuseHandleRecodeChange,\n\tuseRecodeDelete,\n} from './Recode.hooks.js'\n\n/**\n * Provides inputs for a RecodeStep.\n */\nexport const Recode: React.FC<StepComponentProps<RecodeArgs>> = memo(\n\tfunction Recode({ step, graph, input, table, onChange }) {\n\t\tconst dataTable = useStepDataTable(step, graph, input, table)\n\t\tconst values = useColumnValues(step, dataTable)\n\t\tconst dataType = useColumnType(dataTable, step.args.column)\n\t\tconst handleRecodeChange = useHandleRecodeChange(step, onChange)\n\t\tconst handleRecodeDelete = useRecodeDelete(step, onChange)\n\t\tconst handleButtonClick = useHandleAddButtonClick(step, values, onChange)\n\n\t\tconst columnPairs = useRecodePairs(\n\t\t\tdataTable,\n\t\t\tstep,\n\t\t\tdataType,\n\t\t\thandleRecodeChange,\n\t\t\thandleRecodeDelete,\n\t\t)\n\n\t\tconst disabled = useDisabled(step, values)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<ColumnPairs>\n\t\t\t\t{columnPairs}\n\t\t\t\t</ColumnPairs>\n\t\t\t\t<ActionButton\n\t\t\t\t\tonClick={handleButtonClick}\n\t\t\t\t\ticonProps={{ iconName: 'Add' }}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t>\n\t\t\t\t\tAdd mapping\n\t\t\t\t</ActionButton>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nfunction useRecodePairs(\n\ttable: ColumnTable | undefined,\n\tstep: Step<RecodeArgs>,\n\tdataType: DataType,\n\tonChange: (previous: Value, oldvalue: Value, newvalue: Value) => void,\n\tonDelete: (value: Value) => void,\n) {\n\treturn useMemo(() => {\n\t\tconst { map } = step.args\n\t\treturn Object.entries(map || {}).map((valuePair, index) => {\n\t\t\tconst [o] = valuePair\n\t\t\tconst oldvalue = coerce(o, dataType)\n\t\t\treturn (\n\t\t\t\t<ColumnPair\n\t\t\t\t\tstep={step}\n\t\t\t\t\ttable={table}\n\t\t\t\t\tvaluePair={valuePair}\n\t\t\t\t\tdataType={dataType}\n\t\t\t\t\tkey={`column-Recode-${oldvalue}-${index}`}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tonDelete={onDelete}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\t}, [table, step, dataType, onChange, onDelete])\n}\n\nconst ColumnPair: React.FC<{\n\tvaluePair: [string, any]\n\tstep: Step<RecodeArgs>\n\ttable: ColumnTable | undefined\n\tdataType: DataType\n\tonChange: (previous: Value, oldvalue: Value, newvalue: Value) => void\n\tonDelete: (value: Value) => void\n}> = memo(function ColumnPair({\n\tvaluePair,\n\tstep,\n\ttable,\n\tdataType,\n\tonChange,\n\tonDelete,\n}) {\n\t// the old value will always come off the map as a string key\n\t// coerce it to the column type for proper comparison\n\tconst [o, newvalue] = valuePair\n\tconst oldvalue = coerce(o, dataType)\n\tconst valueFilter = (value: Value) => {\n\t\tif (value === oldvalue) {\n\t\t\treturn true\n\t\t}\n\t\tif (step.args.map && step.args.map[value]) {\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\tconst handleSourceChange = (\n\t\t_e: React.FormEvent<HTMLDivElement>,\n\t\topt?: IDropdownOption<any> | undefined,\n\t) => onChange(oldvalue, opt?.key || oldvalue, newvalue)\n\tconst handleTextChange = (\n\t\t_e: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n\t\tnewValue?: string,\n\t) => {\n\t\t// this does force the new value to match the old type, preventing mappings like 0 -> false\n\t\tconst val = coerce(newValue, dataType)\n\t\tonChange(oldvalue, oldvalue, val)\n\t}\n\tconst handleDeleteClick = () => onDelete(oldvalue)\n\tconst options = useColumnValueOptions(\n\t\tstep.args.column,\n\t\ttable,\n\t\tundefined,\n\t\tvalueFilter,\n\t)\n\treturn (\n\t\t<ColumnPairContainer>\n\t\t\t<ColumnValueDropdown\n\t\t\t\toptions={options}\n\t\t\t\tlabel={undefined}\n\t\t\t\tselectedKey={oldvalue}\n\t\t\t\tonChange={handleSourceChange}\n\t\t\t\tstyles={{\n\t\t\t\t\troot: {\n\t\t\t\t\t\twidth: 130,\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Icon\n\t\t\t\ticonName={'Forward'}\n\t\t\t\tstyles={{ root: { marginLeft: 4, marginRight: 4 } }}\n\t\t\t/>\n\t\t\t<TextField\n\t\t\t\tplaceholder={'New value'}\n\t\t\t\tvalue={newvalue}\n\t\t\t\tonChange={handleTextChange}\n\t\t\t\tstyles={{ root: { width: 130 } }}\n\t\t\t/>\n\t\t\t<IconButton\n\t\t\t\ttitle={'Remove this Recode'}\n\t\t\t\ticonProps={{ iconName: 'Delete' }}\n\t\t\t\tonClick={handleDeleteClick}\n\t\t\t/>\n\t\t</ColumnPairContainer>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\nconst ColumnPairs = styled.div`\n\tmargin-top: 8px;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n`\n\nconst ColumnPairContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { RenameArgs, Step } from '@data-wrangling-components/core'\nimport type { IDropdownOption } from '@fluentui/react'\nimport {\n\tActionButton,\n\tIcon,\n\tIconButton,\n\tLabel,\n\tTextField,\n} from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { TableColumnDropdown } from '../controls/index.js'\nimport {\n\tuseColumnRecordDelete,\n\tuseSimpleDropdownOptions,\n\tuseStepDataTable,\n\tuseTableColumnNames,\n} from '../hooks/index.js'\nimport type { StepComponentProps } from '../types.js'\nimport {\n\tuseDisabled,\n\tuseHandleAddButtonClick,\n\tuseHandleColumnChange,\n} from './Rename.hooks.js'\n\n/**\n * Provides inputs for a RenameStep.\n */\nexport const Rename: React.FC<StepComponentProps<RenameArgs>> = memo(\n\tfunction Rename({ step, graph, input, table, onChange }) {\n\t\tconst dataTable = useStepDataTable(step, graph, input, table)\n\t\tconst handleColumnChange = useHandleColumnChange(step, onChange)\n\t\tconst handleColumnDelete = useColumnRecordDelete(step, onChange)\n\t\tconst handleButtonClick = useHandleAddButtonClick(step, dataTable, onChange)\n\t\tconst columnPairs = useColumnPairs(\n\t\t\tdataTable,\n\t\t\tstep,\n\t\t\thandleColumnChange,\n\t\t\thandleColumnDelete,\n\t\t)\n\t\tconst disabled = useDisabled(step, dataTable)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Label required>Column renames</Label>\n\t\t\t\t<ColumnPairs>{columnPairs}</ColumnPairs>\n\t\t\t\t<ActionButton\n\t\t\t\t\tonClick={handleButtonClick}\n\t\t\t\t\ticonProps={{ iconName: 'Add' }}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t>\n\t\t\t\t\tAdd rename\n\t\t\t\t</ActionButton>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nfunction useColumnPairs(\n\ttable: ColumnTable | undefined,\n\tstep: Step<RenameArgs>,\n\tonChange: (previous: string, oldName: string, newName: string) => void,\n\tonDelete: (name: string) => void,\n) {\n\treturn useMemo(() => {\n\t\tconst { columns } = step.args\n\t\treturn Object.entries(columns || {}).map((column, index) => {\n\t\t\tconst [oldname] = column\n\t\t\treturn (\n\t\t\t\t<ColumnPair\n\t\t\t\t\tkey={`column-rename-${oldname}-${index}`}\n\t\t\t\t\ttable={table}\n\t\t\t\t\tcolumn={column}\n\t\t\t\t\tstep={step}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tonDelete={onDelete}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\t}, [table, step, onChange, onDelete])\n}\n\nconst ColumnPair: React.FC<{\n\ttable: ColumnTable | undefined\n\tcolumn: [string, string]\n\tstep: Step<RenameArgs>\n\tonChange: (previous: string, oldName: string, newName: string) => void\n\tonDelete: (name: string) => void\n}> = memo(function ColumnPair({ table, column, step, onChange, onDelete }) {\n\tconst [oldname, newname] = column\n\tconst columnFilter = (name: string) => {\n\t\tif (name === oldname) {\n\t\t\treturn true\n\t\t}\n\t\tif (step.args.columns && step.args.columns[name]) {\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\tconst handleColumnChange = (\n\t\t_e: React.FormEvent<HTMLDivElement>,\n\t\topt?: IDropdownOption<any> | undefined,\n\t) => onChange(oldname, (opt?.key as string) || oldname, newname)\n\tconst handleTextChange = (\n\t\t_e: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n\t\tnewValue?: string,\n\t) => {\n\t\tonChange(oldname, oldname, newValue ?? '')\n\t}\n\tconst handleDeleteClick = () => onDelete(oldname)\n\tconst columns = useTableColumnNames(table, columnFilter)\n\tconst options = useSimpleDropdownOptions(columns)\n\n\treturn (\n\t\t<ColumnPairContainer>\n\t\t\t<TableColumnDropdown\n\t\t\t\toptions={options}\n\t\t\t\tlabel={undefined}\n\t\t\t\tselectedKey={oldname}\n\t\t\t\tonChange={handleColumnChange}\n\t\t\t\tstyles={{\n\t\t\t\t\troot: {\n\t\t\t\t\t\twidth: 130,\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Icon\n\t\t\t\ticonName={'Forward'}\n\t\t\t\tstyles={{ root: { marginLeft: 4, marginRight: 4 } }}\n\t\t\t/>\n\t\t\t<TextField\n\t\t\t\tplaceholder={'New name'}\n\t\t\t\tvalue={newname}\n\t\t\t\tonChange={handleTextChange}\n\t\t\t\tstyles={{ root: { width: 130 } }}\n\t\t\t/>\n\t\t\t<IconButton\n\t\t\t\ttitle={'Remove this rename'}\n\t\t\t\ticonProps={{ iconName: 'Delete' }}\n\t\t\t\tonClick={handleDeleteClick}\n\t\t\t/>\n\t\t</ColumnPairContainer>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nconst ColumnPairs = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n`\n\nconst ColumnPairContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { RollupArgs } from '@data-wrangling-components/core'\nimport { FieldAggregateOperation } from '@data-wrangling-components/core'\nimport { memo, useMemo } from 'react'\n\nimport type { StepComponentProps } from '../types.js'\nimport type { FormInput } from '../verbForm/VerbForm.js'\nimport { VerbForm } from '../verbForm/VerbForm.js'\nimport { enumDropdown } from '../verbForm/VerbFormFactories.js'\n\n/**\n * Just the column/op inputs for an rollup.\n * Input table is expected to be edited elsewhere and configured as the step input.\n */\nexport const RollupBase: React.FC<StepComponentProps<RollupArgs>> = memo(\n\tfunction RollupBase({ step, onChange }) {\n\t\tconst inputs = useMemo<FormInput<RollupArgs>[]>(\n\t\t\t() => [\n\t\t\t\tenumDropdown(\n\t\t\t\t\t'Function',\n\t\t\t\t\tFieldAggregateOperation,\n\t\t\t\t\tstep.args.operation,\n\t\t\t\t\t(s, val) => (s.args.operation = val as FieldAggregateOperation),\n\t\t\t\t\t{ required: true }\n\t\t\t\t),\n\t\t\t],\n\t\t\t[step],\n\t\t)\n\n\t\treturn <VerbForm inputs={inputs} step={step} onChange={onChange} />\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n`\n\nexport const Or = styled.div`\n\tmargin-left: 8px;\n\tmargin-right: 8px;\n\theight: 100%;\n\tdisplay: flex;\n\talign-items: center;\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n`\n\nexport const spinStyles = {\n\troot: {\n\t\twidth: 120,\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type {\n\tInputColumnArgs,\n\tOutputColumnArgs,\n} from '@data-wrangling-components/core'\nimport {\n\tisInputColumnStep,\n\tisInputTableStep,\n\tisOutputColumnStep,\n} from '@data-wrangling-components/core'\nimport { NodeInput } from '@essex/dataflow'\nimport { TextField } from '@fluentui/react'\nimport { memo } from 'react'\n\nimport { TableColumnDropdown } from '../controls/TableColumnDropdown.js'\nimport { TableDropdown } from '../controls/TableDropdown.js'\nimport { useDataTable } from '../hooks/useDataTable.js'\nimport { useSimpleDropdownOptions } from '../hooks/useSimpleDropdownOptions.js'\nimport { useTableColumnNames } from '../hooks/useTableColumnNames.js'\nimport { useTableNames } from '../hooks/useTableNames.js'\nimport { dropdownStyles } from '../styles.js'\nimport {\n\tuseColumnFilter,\n\tuseDefaultOutputNameInitially,\n\tuseInputColumnChanged,\n\tuseInputTableChanged,\n\tuseOutputColumnChanged,\n\tuseOutputTableChanged,\n\tuseStepArgsComponent,\n\tuseStepChangeHandler,\n} from './StepComponent.hooks.js'\nimport { Container } from './StepComponent.styles.js'\nimport type { StepComponentProps } from './StepComponent.types.js'\n\n/**\n * Let's us render the Steps in a loop while memoing all the functions\n */\nexport const StepComponent: React.FC<StepComponentProps> = memo(\n\tfunction StepComponent({\n\t\tstep: s,\n\t\toutput,\n\t\tgraph: g,\n\t\tindex,\n\t\tinputTableLabel,\n\t\tinputColumnLabel,\n\t\toutputColumnLabel,\n\t\toutputTableLabel,\n\t\toutputTableDisabled,\n\t\tonChange,\n\t\tonChangeOutput: changeOutput,\n\t}) {\n\t\t/* Current Table Selection */\n\t\tconst tableId = s.input[NodeInput.Source]?.node\n\t\tconst table = useDataTable(tableId, g)\n\n\t\t/* Table Options */\n\t\tconst tables = useTableNames(g)\n\t\tconst tableOptions = useSimpleDropdownOptions(tables)\n\n\t\t/* Column Options */\n\t\tconst columns = useTableColumnNames(table, useColumnFilter(s, table))\n\t\tconst columnOptions = useSimpleDropdownOptions(columns)\n\n\t\t/* The step args component */\n\t\tconst StepArgs = useStepArgsComponent(s)\n\n\t\t/* Change Events */\n\t\tconst change = useStepChangeHandler(index, onChange)\n\t\tconst onInputTableChange = useInputTableChanged(s, g, change)\n\t\tconst onInputColumnChange = useInputColumnChanged(s, change)\n\t\tconst onOutputColumnChange = useOutputColumnChanged(s, change)\n\t\tconst onOutputTableChange = useOutputTableChanged(s, changeOutput, change)\n\n\t\t/* Side Effects */\n\t\tuseDefaultOutputNameInitially(s, output, changeOutput)\n\n\t\treturn StepArgs == null ? null : (\n\t\t\t<Container className=\"step-component\">\n\t\t\t\t{/* Input Table */}\n\t\t\t\t{isInputTableStep(s) ? (\n\t\t\t\t\t<TableDropdown\n\t\t\t\t\t\trequired\n\t\t\t\t\t\toptions={tableOptions}\n\t\t\t\t\t\tlabel={inputTableLabel || 'Input table'}\n\t\t\t\t\t\tselectedKey={tableId ?? null}\n\t\t\t\t\t\tonChange={onInputTableChange}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t{/* Input Column */}\n\t\t\t\t{isInputColumnStep(s) ? (\n\t\t\t\t\t<TableColumnDropdown\n\t\t\t\t\t\trequired\n\t\t\t\t\t\toptions={columnOptions}\n\t\t\t\t\t\tlabel={inputColumnLabel || `Column to ${s.verb}`}\n\t\t\t\t\t\tselectedKey={(s.args as InputColumnArgs).column}\n\t\t\t\t\t\tonChange={onInputColumnChange}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t<StepArgs\n\t\t\t\t\tstep={s}\n\t\t\t\t\tgraph={g}\n\t\t\t\t\toutput={output}\n\t\t\t\t\tonChangeOutput={changeOutput}\n\t\t\t\t\tonChange={change}\n\t\t\t\t/>\n\n\t\t\t\t{/* Output Column */}\n\t\t\t\t{isOutputColumnStep(s) ? (\n\t\t\t\t\t<TextField\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tlabel={outputColumnLabel || 'New column name'}\n\t\t\t\t\t\tplaceholder={'Column name'}\n\t\t\t\t\t\tvalue={(s.args as OutputColumnArgs).to}\n\t\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\t\tonChange={onOutputColumnChange}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t{/* Output Table */}\n\t\t\t\t<TextField\n\t\t\t\t\trequired\n\t\t\t\t\tdisabled={outputTableDisabled}\n\t\t\t\t\tlabel={outputTableLabel || 'Output table'}\n\t\t\t\t\tplaceholder={'Table name'}\n\t\t\t\t\tvalue={output ?? s.id}\n\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\tonChange={onOutputTableChange}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n\twidth: 240px;\n\tdisplay: flex;\n\talign-items: center;\n`\n\nexport const SearchContainer = styled.div`\n\tborder-bottom: 1px solid\n\t\t${({ theme }) => theme.application().lowContrast().hex()};\n`\n\nexport const icons = {\n\tadd: { iconName: 'Add' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { isOutputColumnStep } from '@data-wrangling-components/core'\nimport { NodeInput } from '@essex/dataflow'\nimport isNil from 'lodash-es/isNil.js'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport type { DescriptionRow, VerbDescriptionProps } from '../types.js'\n\nfunction VerbDescriptionFn<T extends object | void>({\n\tstep,\n\trows,\n\toutput,\n\tshowInput,\n\tshowOutput,\n\tshowOutputColumn,\n\tstyle,\n}: VerbDescriptionProps<T>) {\n\tconst rws = useMemo(() => {\n\t\tfunction loop(rows: DescriptionRow[]) {\n\t\t\treturn rows.map((row, index) => (\n\t\t\t\t<Row\n\t\t\t\t\tkey={`verb-description-row-${row.value}-${index}`}\n\t\t\t\t\ttitle={row.title}\n\t\t\t\t>\n\t\t\t\t\t<KeyValue>\n\t\t\t\t\t\t{row.before ? <Key>{row.before}</Key> : null}\n\t\t\t\t\t\t{isNil(row.value) ? (\n\t\t\t\t\t\t\t<Unset />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Value title={row.value}>{row.value}</Value>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{row.after ? <Key>{row.after}</Key> : null}\n\t\t\t\t\t</KeyValue>\n\t\t\t\t\t{row.sub ? loop(row.sub) : null}\n\t\t\t\t</Row>\n\t\t\t))\n\t\t}\n\t\treturn loop(rows)\n\t}, [rows])\n\tconst shouldShowOutputColumn = showOutputColumn && isOutputColumnStep(step)\n\tconst input = step.input[NodeInput.Source]?.node\n\treturn (\n\t\t<Container style={style}>\n\t\t\t<Verb>{step.verb}</Verb>\n\t\t\t{showInput ? (\n\t\t\t\t<Row>\n\t\t\t\t\t<KeyValue>\n\t\t\t\t\t\t<Key>table</Key>\n\t\t\t\t\t\t{!input ? <Unset /> : <Value>{input}</Value>}\n\t\t\t\t\t</KeyValue>\n\t\t\t\t</Row>\n\t\t\t) : null}\n\t\t\t{rws}\n\t\t\t{showOutput ? (\n\t\t\t\t<Row>\n\t\t\t\t\t<KeyValue>\n\t\t\t\t\t\t<Key>into table</Key>\n\t\t\t\t\t\t{!output ? <Unset /> : <Value>{output}</Value>}\n\t\t\t\t\t</KeyValue>\n\t\t\t\t</Row>\n\t\t\t) : null}\n\t\t\t{shouldShowOutputColumn ? (\n\t\t\t\t<Row>\n\t\t\t\t\t<KeyValue>\n\t\t\t\t\t\t<Key>as column</Key>\n\t\t\t\t\t\t{!(step.args as any).to ? (\n\t\t\t\t\t\t\t<Unset />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Value>{(step.args as any).to}</Value>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</KeyValue>\n\t\t\t\t</Row>\n\t\t\t) : null}\n\t\t</Container>\n\t)\n}\n\nexport const VerbDescription = memo(VerbDescriptionFn)\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n\tmin-height: 180px;\n`\n\nconst Verb = styled.div`\n\ttext-transform: uppercase;\n\tfont-weight: bold;\n\talign-items: center;\n\twidth: 100%;\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n`\n\nconst Row = styled.div`\n\tpadding-left: 8px;\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nconst KeyValue = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tgap: 4px;\n`\n\nconst Key = styled.div``\n\nconst Unset = styled.div`\n\tcolor: ${({ theme }) => theme.application().lowContrast().hex()};\n\t&:before {\n\t\tcontent: 'unset';\n\t}\n`\n\nconst Value = styled.div`\n\tmax-width: 240px;\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n\tfont-weight: bold;\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { AggregateArgs } from '@data-wrangling-components/core'\nimport { memo, useMemo } from 'react'\n\nimport type { StepDescriptionProps } from '../types'\nimport { VerbDescription } from '../verbForm/VerbDescription.js'\n\nexport const AggregateDescription: React.FC<\n\tStepDescriptionProps<AggregateArgs>\n> = memo(function AggregateDescription(props) {\n\tconst rows = useMemo(() => {\n\t\tconst {\n\t\t\tstep: { args },\n\t\t} = props\n\t\treturn [\n\t\t\t{\n\t\t\t\tbefore: 'group by',\n\t\t\t\tvalue: args.groupby,\n\t\t\t},\n\t\t\t{\n\t\t\t\tbefore: 'rollup column',\n\t\t\t\tvalue: args.column,\n\t\t\t\tsub: [\n\t\t\t\t\t{\n\t\t\t\t\t\tbefore: 'with function',\n\t\t\t\t\t\tvalue: args.operation,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t]\n\t}, [props])\n\treturn <VerbDescription {...props} rows={rows} />\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { IDropdownStyles } from '@fluentui/react'\nimport styled from 'styled-components'\n\nexport const dropdownStyles: Partial<IDropdownStyles> = {\n\tdropdown: { marginTop: '4px' },\n}\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tpadding: 0 12px 12px;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\theight: 170px;\n\tmargin-bottom: 2rem;\n`\n\nexport const Examples = styled.div``\nexport const ExamplesContainer = styled.div``\n\nexport const Description = styled.div`\n\twidth: 400px;\n\tflex-direction: column;\n\tjustify-content: center;\n`\n\nexport const ControlBlock = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 8px;\n`\n\nexport const Control = styled.div`\n\twidth: 200px;\n`\n\nexport const DropBlock = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n\tgap: 10px;\n`\n\nexport const Drop = styled.div`\n\twidth: 160px;\n\theight: 50px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n\twidth: 500px;\n\theight: 300px;\n\tborder: 1px solid ${({ theme }) => theme.application().faint().hex()};\n`\n\nexport const TableContainer = styled.div`\n\theight: 264px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { ArqueroDetailsList, ArqueroTableHeader } from '@essex/arquero-react'\nimport type { IColumn, IDropdownOption } from '@fluentui/react'\nimport { memo, useCallback, useEffect, useState } from 'react'\n\nimport { useColumns, useCommandBar, useFarCommandBar } from './Table.hooks.js'\nimport { Container, TableContainer } from './Table.styles.js'\nimport type { TableProps } from './Table.types.js'\n\nexport const Table: React.FC<TableProps> = memo(function Table({\n\tname,\n\ttable,\n\tconfig = {},\n\tfeatures = {},\n\tcompact,\n\tonRenameTable,\n}) {\n\tconst [selectedColumn, setSelectedColumn] = useState<string | undefined>()\n\tconst [visibleColumns, setVisibleColumns] = useState<string[]>(\n\t\ttable.columnNames(),\n\t)\n\tuseEffect(() => {\n\t\tsetVisibleColumns(table.columnNames())\n\t}, [table, setVisibleColumns])\n\n\tconst columns = useColumns(config)\n\tconst commandBar = useCommandBar(table, visibleColumns, setVisibleColumns)\n\tconst farCommandBar = useFarCommandBar(table)\n\n\tconst handleColumnClick = useCallback(\n\t\t(evt?: React.MouseEvent<HTMLElement>, column?: IColumn) =>\n\t\t\tsetSelectedColumn(column?.key),\n\t\t[setSelectedColumn],\n\t)\n\n\tconst handleCellDropdownSelect = useCallback(\n\t\t(\n\t\t\tevt: React.FormEvent<HTMLDivElement>,\n\t\t\toption?: IDropdownOption<any> | undefined,\n\t\t) => {\n\t\t\tconsole.log('option selected: ', option)\n\t\t\talert(`Value selected: ${option?.text}`)\n\t\t},\n\t\t[],\n\t)\n\n\treturn (\n\t\t<Container className=\"table-container\">\n\t\t\t<ArqueroTableHeader\n\t\t\t\ttable={table}\n\t\t\t\tname={name}\n\t\t\t\tshowRowCount={true}\n\t\t\t\tshowColumnCount={true}\n\t\t\t\tcommandBar={commandBar}\n\t\t\t\tfarCommandBar={farCommandBar}\n\t\t\t\tvisibleColumns={visibleColumns}\n\t\t\t\tonRenameTable={onRenameTable}\n\t\t\t/>\n\t\t\t<TableContainer>\n\t\t\t\t<ArqueroDetailsList\n\t\t\t\t\ttable={table}\n\t\t\t\t\tcolumns={columns}\n\t\t\t\t\tfeatures={features}\n\t\t\t\t\tcompact={compact}\n\t\t\t\t\tselectedColumn={selectedColumn}\n\t\t\t\t\tonColumnClick={handleColumnClick}\n\t\t\t\t\tonCellDropdownSelect={handleCellDropdownSelect}\n\t\t\t\t\tisColumnClickable\n\t\t\t\t\tisSortable\n\t\t\t\t\tshowColumnBorders\n\t\t\t\t\tisHeadersFixed\n\t\t\t\t\tvisibleColumns={visibleColumns}\n\t\t\t\t/>\n\t\t\t</TableContainer>\n\t\t</Container>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Separator } from '@fluentui/react'\nimport styled from 'styled-components'\n\nexport const Container = styled.section`\n\twidth: 100%;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\tmargin-bottom: 40px;\n`\n\nexport const Titles = styled.div`\n\twidth: 200px;\n\ttext-align: right;\n\ttext-transform: uppercase;\n`\n\nexport const H1 = styled.h1`\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n\tcolor: ${({ theme }) => theme.application().lowContrast().hex()};\n`\n\nexport const H2 = styled.h2`\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n\tcolor: ${({ theme }) => theme.application().accent().hex()};\n`\n\nexport const StyledSeparator = styled(Separator)`\n\tmargin-left: 8px;\n\tmargin-right: 36px;\n`\n\nexport const ChildrenContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { memo } from 'react'\n\nimport {\n\tChildrenContainer,\n\tContainer,\n\tH1,\n\tH2,\n\tStyledSeparator,\n\tTitles,\n} from './Section.styles.js'\nimport type { SectionProps } from './Section.types.js'\n\nexport const Section: React.FC<React.PropsWithChildren<SectionProps>> = memo(\n\tfunction Section({ title, subtitle, children }) {\n\t\treturn (\n\t\t\t<Container className=\"section\">\n\t\t\t\t<Titles>\n\t\t\t\t\t<H1>{title}</H1>\n\t\t\t\t\t<H2>{subtitle}</H2>\n\t\t\t\t</Titles>\n\t\t\t\t<StyledSeparator vertical />\n\t\t\t\t<ChildrenContainer>{children}</ChildrenContainer>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { memo, useMemo } from 'react'\n\nimport { selectStepDescription } from '../selectStepDescription.js'\nimport { Container } from './StepDescription.styles.js'\nimport type { StepDescriptionProps } from './StepDescription.types.js'\n\n/**\n * Let's us render the Steps in a loop while memoing all the functions\n */\nexport const StepDescription: React.FC<StepDescriptionProps> = memo(\n\tfunction StepComponent({ step, output }) {\n\t\tconst Description = useMemo(() => selectStepDescription(step), [step])\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Description\n\t\t\t\t\tstep={step}\n\t\t\t\t\toutput={output}\n\t\t\t\t\tshowInput\n\t\t\t\t\tshowOutput\n\t\t\t\t\tshowOutputColumn\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const columnsStyle = {\n\tID: {\n\t\twidth: 50,\n\t\ticonName: 'FavoriteStarFill',\n\t},\n}\n\nexport const StepBlock = styled.div`\n\tdisplay: flex;\n`\n\nexport const StepsColumn = styled.div`\n\twidth: 250px;\n`\n\nexport const OutputsColumn = styled.div`\n\tmargin-left: 40px;\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const TableSection = styled.div`\n\tmax-height: 400px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport {\n\tStepComponent,\n\tStepDescription,\n\tuseDataTable,\n} from '@data-wrangling-components/react'\nimport { memo } from 'react'\n\nimport { Section } from './Section.js'\nimport {\n\tcolumnsStyle,\n\tOutputsColumn,\n\tStepBlock,\n\tStepsColumn,\n\tTableSection,\n} from './StepOutput.styles.js'\nimport type { StepOutputProps } from './StepOutput.types.js'\nimport { Table } from './Table.js'\n\nexport const StepOutput: React.FC<StepOutputProps> = memo(function StepOutput({\n\tstep,\n\tindex,\n\tgraph,\n\toutput,\n\tfeatures,\n\tcompact,\n\tonStepChange,\n\tonStepOutputChange,\n}) {\n\tconst table = useDataTable(output, graph)\n\n\treturn (\n\t\t<StepBlock className=\"step-block\">\n\t\t\t<Section title={`Step ${index + 1}`} subtitle={step.verb}>\n\t\t\t\t<StepsColumn className=\"steps-column\">\n\t\t\t\t\t<StepComponent\n\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\tgraph={graph}\n\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\toutput={output}\n\t\t\t\t\t\tonChange={onStepChange}\n\t\t\t\t\t\tonChangeOutput={o => onStepOutputChange(step, o)}\n\t\t\t\t\t/>\n\t\t\t\t</StepsColumn>\n\t\t\t\t<StepDescription step={step} output={output} />\n\t\t\t\t<OutputsColumn className=\"outputs-column\">\n\t\t\t\t\t{table ? (\n\t\t\t\t\t\t<TableSection className=\"table-section\">\n\t\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\t\tname={output}\n\t\t\t\t\t\t\t\ttable={table}\n\t\t\t\t\t\t\t\tconfig={columnsStyle}\n\t\t\t\t\t\t\t\tfeatures={features}\n\t\t\t\t\t\t\t\tcompact={compact}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</TableSection>\n\t\t\t\t\t) : null}\n\t\t\t\t</OutputsColumn>\n\t\t\t</Section>\n\t\t</StepBlock>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\tpadding: 0px 20px 0px 20px;\n`\n\nexport const Workspace = styled.div`\n\twidth: 100%;\n`\n\nexport const Commands = styled.div`\n\twidth: 200px;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 12px;\n\tjustify-content: space-between;\n`\n\nexport const Buttons = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\nexport const InputsSection = styled.div`\n\tmargin-bottom: 80px;\n`\n\nexport const icons = {\n\tdownload: { iconName: 'Download' },\n}\n\nexport const columnsStyle = {\n\tID: {\n\t\twidth: 50,\n\t\ticonName: 'FavoriteStarFill',\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n\tpadding: 0px 20px 0px 20px;\n`\n\nexport const Table = styled.div`\n\tmargin-top: 12px;\n\theight: calc(100vh - 220px);\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { createLazyLoadingGroupHeader } from '@data-wrangling-components/react'\nimport type { ColumnMetadata, TableMetadata } from '@essex/arquero'\nimport { introspect } from '@essex/arquero'\nimport { ArqueroDetailsList, ArqueroTableHeader } from '@essex/arquero-react'\nimport type { IColumn, IDetailsGroupDividerProps } from '@fluentui/react'\nimport { Pivot, PivotItem } from '@fluentui/react'\nimport { loadCSV } from 'arquero'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useCallback, useEffect, useMemo, useState } from 'react'\n\nimport { useColumnCommands, useCommandBar } from './PerfPage.hooks.js'\nimport { Container, Table } from './PerfPage.styles.js'\n\n/**\n * This is just a rudimentary page to load a large table for profiling the ArqueroDetailsList rendering.\n */\nexport const PerfPage: React.FC = memo(function PerfMage() {\n\tconst [table, setTable] = useState<ColumnTable | undefined>()\n\tconst [tableName, setTableName] = useState('Table1')\n\tconst [groupedTable, setGroupedTable] = useState<ColumnTable | undefined>()\n\tconst [groupedMetadata, setGroupedMetadata] = useState<\n\t\tTableMetadata | undefined\n\t>()\n\tconst [metadata, setMetadata] = useState<TableMetadata | undefined>()\n\n\tuseEffect(() => {\n\t\tconst f = async () => {\n\t\t\tlet root = await loadCSV('data/stocks.csv', {\n\t\t\t\tautoMax: 1000000,\n\t\t\t})\n\t\t\tconst grouped = root.groupby(['Symbol', 'Month'])\n\t\t\tconst groupedMeta = introspect(root, true)\n\t\t\tsetGroupedTable(grouped)\n\t\t\tsetGroupedMetadata(groupedMeta)\n\t\t\troot.ungroup()\n\t\t\t// make sure we have a large enough number of rows to impact rendering perf\n\t\t\tfor (let i = 0; i < 10; i++) {\n\t\t\t\troot = root.concat(root)\n\t\t\t}\n\t\t\tconsole.time('root meta')\n\t\t\tconst meta = introspect(root, true)\n\t\t\tconsole.timeEnd('root meta')\n\t\t\tsetTable(root)\n\t\t\tsetMetadata(meta)\n\t\t}\n\t\tf()\n\t}, [])\n\n\tconst commandBar = useCommandBar(table, metadata, setTable, setMetadata)\n\tconst columnCommands = useColumnCommands()\n\n\tconst customGroupHeader = useCallback(\n\t\t(\n\t\t\tmeta?: ColumnMetadata,\n\t\t\tcolumnName?: string,\n\t\t\tprops?: IDetailsGroupDividerProps | undefined,\n\t\t) => {\n\t\t\tconst custom = <h3>{meta?.name}</h3>\n\t\t\treturn createLazyLoadingGroupHeader(props, custom, columnName, meta)\n\t\t},\n\t\t[],\n\t)\n\n\tconst columns = useMemo((): IColumn[] | undefined => {\n\t\tif (!table) return undefined\n\t\treturn table.columnNames().map(x => {\n\t\t\treturn {\n\t\t\t\tname: x,\n\t\t\t\tkey: x,\n\t\t\t\tfieldName: x,\n\t\t\t\tminWidth: 180,\n\t\t\t} as IColumn\n\t\t})\n\t}, [table])\n\n\tif (!table || !metadata || !groupedTable || !groupedMetadata) {\n\t\treturn null\n\t}\n\n\treturn (\n\t\t<Container>\n\t\t\t<Pivot>\n\t\t\t\t<PivotItem style={{ width: '96vw' }} key={'table'} headerText={'table'}>\n\t\t\t\t\t<Table>\n\t\t\t\t\t\t<ArqueroTableHeader\n\t\t\t\t\t\t\ttable={table}\n\t\t\t\t\t\t\tname={tableName}\n\t\t\t\t\t\t\tcommandBar={commandBar}\n\t\t\t\t\t\t\tonRenameTable={name => setTableName(name)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ArqueroDetailsList\n\t\t\t\t\t\t\ttable={table}\n\t\t\t\t\t\t\tmetadata={metadata}\n\t\t\t\t\t\t\tfeatures={{\n\t\t\t\t\t\t\t\tsmartCells: true,\n\t\t\t\t\t\t\t\tsmartHeaders: true,\n\t\t\t\t\t\t\t\tcommandBar: [columnCommands],\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\tisSortable\n\t\t\t\t\t\t\tisHeadersFixed\n\t\t\t\t\t\t\tisStriped\n\t\t\t\t\t\t\tshowColumnBorders\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Table>\n\t\t\t\t</PivotItem>\n\t\t\t\t<PivotItem key={'empty'} headerText={'empty'} />\n\t\t\t\t<PivotItem key={'grouped'} headerText={'grouped'}>\n\t\t\t\t\t<Table>\n\t\t\t\t\t\t<ArqueroTableHeader table={groupedTable} />\n\t\t\t\t\t\t<ArqueroDetailsList\n\t\t\t\t\t\t\ttable={groupedTable}\n\t\t\t\t\t\t\tmetadata={groupedMetadata}\n\t\t\t\t\t\t\tfeatures={{\n\t\t\t\t\t\t\t\tsmartCells: true,\n\t\t\t\t\t\t\t\tsmartHeaders: true,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonRenderGroupHeader={customGroupHeader}\n\t\t\t\t\t\t\tisSortable\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Table>\n\t\t\t\t</PivotItem>\n\t\t\t</Pivot>\n\t\t</Container>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n\twidth: 97%;\n\tdisplay: grid;\n`\n\n// HACK\nexport const modalStyles = { calloutMain: { overflow: 'hidden' } } as any\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { DocumentCard } from '@fluentui/react'\nimport styled from 'styled-components'\n\nexport const styles = {\n\tcard: {\n\t\troot: {\n\t\t\tminWidth: 'unset',\n\t\t},\n\t},\n\tactions: { root: { padding: 'unset' } },\n}\n\nexport const CardContent = styled.div`\n\tpadding: 8px;\n`\n\nexport const Card = styled(DocumentCard)`\n\tmin-width: fit-content;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-between;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { DocumentCardActions } from '@fluentui/react'\nimport { memo, useMemo } from 'react'\n\nimport { selectStepDescription } from '../selectStepDescription.js'\nimport { useStepActions } from './StepCard.hooks.js'\nimport { Card,CardContent, styles } from './StepCard.styles.js'\nimport type { StepCardProps } from './StepCard.types.js'\n\nexport const StepCard: React.FC<StepCardProps> = memo(function StepCard({\n\tstep,\n\tindex,\n\toutput,\n\tonEdit,\n\tonDelete,\n\tonDuplicate,\n\tonSelect,\n}) {\n\tconst Description = useMemo(() => selectStepDescription(step), [step])\n\tconst stepActions = useStepActions(\n\t\tstep,\n\t\tindex,\n\t\tonEdit,\n\t\tonDelete,\n\t\tonDuplicate,\n\t\tonSelect,\n\t)\n\n\treturn (\n\t\t<Card styles={styles.card}>\n\t\t\t<CardContent>\n\t\t\t\t<Description\n\t\t\t\t\tstep={step}\n\t\t\t\t\toutput={output}\n\t\t\t\t\tshowInput\n\t\t\t\t\tshowOutput\n\t\t\t\t\tshowOutputColumn\n\t\t\t\t/>\n\t\t\t</CardContent>\n\t\t\t<DocumentCardActions\n\t\t\t\tclassName={`step-card-${index}`}\n\t\t\t\tstyles={styles.actions}\n\t\t\t\tactions={stepActions}\n\t\t\t/>\n\t\t</Card>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const Text = styled.div`\n\tcolor: ${({ theme }) => theme.application?.().midContrast().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { memo } from 'react'\n\nimport { Text } from './DetailText.styles.js'\nimport type { DetailTextProps } from './DetailText.types.js'\n\nexport const DetailText: React.FC<DetailTextProps> = memo(function DetailText({\n\ttext,\n\tstyle,\n}) {\n\treturn <Text style={style}>{text}</Text>\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const addButtonStyles = {\n\troot: { padding: '0 4px 0 6px', whiteSpace: 'nowrap' },\n}\n\nexport const icons = {\n\tadd: { iconName: 'Add' },\n}\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\toverflow: auto;\n\tcolumn-gap: 12px;\n`\n\nexport const ButtonContainer = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tgap: 18px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { DefaultButton } from '@fluentui/react'\nimport { memo, useEffect, useRef } from 'react'\n\nimport { StepCard } from '../index.js'\nimport { DetailText } from './DetailText.js'\nimport {\n\taddButtonStyles,\n\tButtonContainer,\n\tContainer,\n\ticons,\n} from './StepList.styles.js'\nimport type { StepListProps } from './StepList.types.js'\n\nexport const StepList: React.FC<StepListProps> = memo(function StepsList({\n\tsteps,\n\toutputs,\n\tonDeleteClicked,\n\tonEditClicked,\n\tonDuplicateClicked,\n\tonSelect,\n\tonStartNewStep,\n\tbuttonId,\n}) {\n\tconst ref = useRef<HTMLDivElement>(null)\n\tuseEffect(() => {\n\t\tconst f = () => {\n\t\t\tref?.current?.scrollIntoView(false)\n\t\t}\n\t\tf()\n\t}, [steps])\n\n\treturn (\n\t\t<Container>\n\t\t\t{steps.map((step, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<StepCard\n\t\t\t\t\t\toutput={outputs[index]}\n\t\t\t\t\t\tonDelete={onDeleteClicked}\n\t\t\t\t\t\tonEdit={onEditClicked}\n\t\t\t\t\t\tonDuplicate={onDuplicateClicked}\n\t\t\t\t\t\tonSelect={onSelect}\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\tindex={index}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t})}\n\n\t\t\t{onStartNewStep && (\n\t\t\t\t<ButtonContainer ref={ref}>\n\t\t\t\t\t<DefaultButton\n\t\t\t\t\t\tstyles={addButtonStyles}\n\t\t\t\t\t\ticonProps={icons.add}\n\t\t\t\t\t\tonClick={onStartNewStep}\n\t\t\t\t\t\tid={buttonId}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd step\n\t\t\t\t\t</DefaultButton>\n\t\t\t\t\t{!steps?.length && (\n\t\t\t\t\t\t<DetailText text=\"Add your first preparation step\" />\n\t\t\t\t\t)}\n\t\t\t\t</ButtonContainer>\n\t\t\t)}\n\t\t</Container>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const icons = {\n\tcancel: { iconName: 'Cancel' },\n\tinfo: { iconName: 'Info' },\n}\n\nconst MAX_HEIGHT = 700\n\nexport const ContainerBody = styled.div<{ showGuidance: boolean }>`\n\tpadding: 0px 12px 14px 24px;\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tgap: 12px;\n`\n\nexport const Header = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tbackground: ${({ theme }) => theme.application().faint().hex()};\n\tmargin-bottom: 12px;\n`\n\nexport const Title = styled.h3`\n\tpadding-left: 12px;\n\tmargin: 8px 0 8px 0;\n`\n\nexport const StepComponentContainer = styled.div`\n\twidth: 470px;\n\tmax-height: ${MAX_HEIGHT}px;\n\toverflow: hidden auto;\n`\n\nexport const StepSelectorContainer = styled.div`\n\tmargin-bottom: 8px;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n\nexport const ButtonContainer = styled.div`\n\tmargin-top: 8px;\n`\n\nexport const GuidanceContainer = styled.div`\n\twidth: 400px;\n\tmax-height: ${MAX_HEIGHT - 20}px;\n\toverflow: hidden auto;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { GraphManager } from '@data-wrangling-components/core'\nimport { default as guidanceIndex } from '@data-wrangling-components/verb-guidance'\nimport {\n\tCallout,\n\tDirectionalHint,\n\tIconButton,\n\tPrimaryButton,\n} from '@fluentui/react'\nimport { useBoolean } from '@fluentui/react-hooks'\nimport { memo } from 'react'\n\nimport { Guidance } from './Guidance.js'\nimport { StepComponent } from './StepComponent.js'\nimport { StepSelector } from './StepSelector.js'\nimport {\n\tuseHandleSaveClick,\n\tuseInternalTableStep,\n\tuseModalStyles,\n\tuseStepOutputHandling,\n} from './TableTransformModal.hooks.js'\nimport {\n\tButtonContainer,\n\tContainerBody,\n\tGuidanceContainer,\n\tHeader,\n\ticons,\n\tStepComponentContainer,\n\tStepSelectorContainer,\n\tTitle,\n} from './TableTransformModal.styles.js'\nimport type { TransformModalProps } from './TableTransformModal.types.js'\n\nexport const TableTransformModal: React.FC<TransformModalProps> = memo(\n\tfunction TableTransformModal({\n\t\tonDismiss,\n\t\tgraph,\n\t\tonTransformRequested,\n\t\tindex,\n\t\tstep,\n\t\tnextInputTable,\n\t\tstyles,\n\t\t...props\n\t}) {\n\t\tconst [showGuidance, { toggle: toggleGuidance }] = useBoolean(false)\n\t\tconst { internal, setInternal, handleVerbChange } = useInternalTableStep(\n\t\t\tstep,\n\t\t\tnextInputTable,\n\t\t\tgraph as GraphManager,\n\t\t)\n\n\t\tconst adaptedStyles = useModalStyles(styles, showGuidance)\n\t\tconst { output, onOutputChanged } = useStepOutputHandling(graph, step)\n\t\tconst handleSaveClick = useHandleSaveClick(\n\t\t\tinternal,\n\t\t\toutput,\n\t\t\tonTransformRequested,\n\t\t)\n\n\t\treturn (\n\t\t\t<Callout\n\t\t\t\tonDismissed={() => setInternal(undefined)}\n\t\t\t\tstyles={adaptedStyles}\n\t\t\t\tdirectionalHint={DirectionalHint.rightBottomEdge}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<Header>\n\t\t\t\t\t<Title>{step ? 'Edit step' : 'New step'}</Title>\n\t\t\t\t\t{onDismiss && (\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\ticonProps={icons.cancel}\n\t\t\t\t\t\t\tariaLabel=\"Close popup modal\"\n\t\t\t\t\t\t\tonClick={() => onDismiss()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</Header>\n\n\t\t\t\t<ContainerBody showGuidance={showGuidance}>\n\t\t\t\t\t<StepComponentContainer>\n\t\t\t\t\t\t<StepSelectorContainer>\n\t\t\t\t\t\t\t<StepSelector\n\t\t\t\t\t\t\t\tplaceholder=\"Select a verb\"\n\t\t\t\t\t\t\t\tverb={internal?.verb}\n\t\t\t\t\t\t\t\tonCreate={handleVerbChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{internal?.verb ? (\n\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\tonClick={toggleGuidance}\n\t\t\t\t\t\t\t\t\ticonProps={icons.info}\n\t\t\t\t\t\t\t\t\tchecked={showGuidance}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</StepSelectorContainer>\n\t\t\t\t\t\t{internal && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<StepComponent\n\t\t\t\t\t\t\t\t\tstep={internal}\n\t\t\t\t\t\t\t\t\tgraph={graph}\n\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\toutput={output}\n\t\t\t\t\t\t\t\t\tonChangeOutput={onOutputChanged}\n\t\t\t\t\t\t\t\t\tonChange={setInternal}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ButtonContainer>\n\t\t\t\t\t\t\t\t\t<PrimaryButton onClick={handleSaveClick}>Save</PrimaryButton>\n\t\t\t\t\t\t\t\t</ButtonContainer>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</StepComponentContainer>\n\t\t\t\t\t{showGuidance && internal?.verb ? (\n\t\t\t\t\t\t<GuidanceContainer>\n\t\t\t\t\t\t\t<Guidance name={internal?.verb} index={guidanceIndex} />\n\t\t\t\t\t\t</GuidanceContainer>\n\t\t\t\t\t) : null}\n\t\t\t\t</ContainerBody>\n\t\t\t</Callout>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nconst GAP = 18\nconst INPUT_HEIGHT = 60\nconst STEPS_HEIGHT = 280\nconst COLLAPSED_STEPS_HEIGHT = 50\n\nexport const SectionTitle = styled.span<{ isCollapsed?: boolean }>`\n\tmargin: 0 ${GAP}px 0 ${GAP}px;\n\tfont-weight: bold;\n\twriting-mode: vertical-rl;\n\tfont-size: 15px;\n\talign-self: center;\n\ttext-transform: uppercase;\n\tcolor: ${({ theme }) => theme.application().lowMidContrast().hex()};\n\ttransform: ${({ isCollapsed }) =>\n\t\tisCollapsed ? 'translate(2rem, 0) rotate(-90deg)' : 'rotate(180deg)'};\n\tcursor: pointer;\n\tdisplay: flex;\n\tgap: 0.5rem;\n\talign-items: center;\n`\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-flow: column;\n\theight: 100%;\n\twidth: 100%;\n\tpadding: ${GAP}px 0 ${GAP}px 0;\n\tgap: ${GAP}px;\n\tposition: relative;\n`\n\nexport const InputContainer = styled.div`\n\tdisplay: flex;\n\tmin-height: ${INPUT_HEIGHT}px;\n\tflex: 0 1 ${INPUT_HEIGHT}px;\n\tpadding-right: ${GAP}px;\n\torder: 1;\n`\n\nexport const OutputContainer = styled.div<{\n\tstepsPosition: string\n\tisCollapsed: boolean\n}>`\n\tflex: 1 1 auto;\n\tdisplay: flex;\n\tpadding-right: ${GAP}px;\n\tmax-height: ${({ isCollapsed }) =>\n\t\t`calc(100% - ${\n\t\t\tINPUT_HEIGHT + (isCollapsed ? 0 : STEPS_HEIGHT) + GAP * 4\n\t\t}px)`};\n\torder: ${({ stepsPosition }) => (stepsPosition === 'bottom' ? 2 : 3)};\n`\n\nexport const StepsTrayContainer = styled.div<{\n\tstepsPosition: string\n\tisCollapsed: boolean\n}>`\n\tdisplay: flex;\n\tmin-height: ${({ isCollapsed }) =>\n\t\tisCollapsed ? 'unset' : STEPS_HEIGHT + 'px'};\n\tbackground-color: ${({ theme }) => theme.application().faint().hex()};\n\tpadding: 0;\n\torder: ${({ stepsPosition }) => (stepsPosition === 'bottom' ? 3 : 2)};\n\theight: ${({ isCollapsed }) =>\n\t\tisCollapsed ? COLLAPSED_STEPS_HEIGHT + 'px' : 'auto'};\n\toverflow: ${({ isCollapsed }) => (isCollapsed ? 'hidden' : 'auto hidden')};\n\t> div {\n\t\tdisplay: ${({ isCollapsed }) => (isCollapsed ? 'none' : 'grid')};\n\t}\n`\nexport const WorkflowContainer = styled.div`\n\tdisplay: flex;\n\theight: 100%;\n\twidth: 100%;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n\toverflow: auto;\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n\tborder: 1px solid ${({ theme }) => theme.application().faint().hex()};\n`\n\nexport const TextContainer = styled.div`\n\tdisplay: flex;\n\theight: 100%;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport {\n\tArqueroDetailsList,\n\tArqueroTableHeader,\n\tStatsColumnType,\n} from '@essex/arquero-react'\nimport { memo } from 'react'\n\nimport { DetailText } from './DetailText.js'\nimport { useToggleTableFeatures } from './PreviewTable.hooks.js'\nimport { Container, TextContainer } from './PreviewTable.styles.js'\nimport type { PreviewTableProps } from './PreviewTable.types.js'\n\nconst statsColumnTypes = [\n\tStatsColumnType.Type,\n\tStatsColumnType.Min,\n\tStatsColumnType.Max,\n\tStatsColumnType.Distinct,\n\tStatsColumnType.Invalid,\n]\n\nexport const PreviewTable: React.FC<PreviewTableProps> = memo(\n\tfunction PreviewTable({\n\t\ttable,\n\t\theaderCommandBar,\n\t\tname,\n\t\tmetadata,\n\t\tonChangeMetadata,\n\t}) {\n\t\tconst { tableFeatures } = useToggleTableFeatures()\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{table ? (\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<ArqueroTableHeader name={name} table={table} />\n\t\t\t\t\t\t<ArqueroDetailsList\n\t\t\t\t\t\t\tisSortable\n\t\t\t\t\t\t\tcompact\n\t\t\t\t\t\t\tshowColumnBorders\n\t\t\t\t\t\t\tisHeadersFixed\n\t\t\t\t\t\t\tmetadata={metadata}\n\t\t\t\t\t\t\tonChangeMetadata={onChangeMetadata}\n\t\t\t\t\t\t\tfeatures={{\n\t\t\t\t\t\t\t\t...tableFeatures,\n\t\t\t\t\t\t\t\tstatsColumnTypes: statsColumnTypes,\n\t\t\t\t\t\t\t\tcommandBar: headerCommandBar ? headerCommandBar : undefined,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttable={table}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Container>\n\t\t\t\t) : (\n\t\t\t\t\t<TextContainer>\n\t\t\t\t\t\t<DetailText text=\"(No table selected)\" />\n\t\t\t\t\t</TextContainer>\n\t\t\t\t)}\n\t\t\t</>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const ListContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\talign-items: center;\n\twidth: 100%;\n\tgap: 18px;\n`\n\nexport const viewButtonStyles = { root: { padding: '0 4px 0 6px' } }\n\nexport const icons = {\n\tview: { iconName: 'View' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n\theight: calc(100vh - 80px);\n\tposition: relative;\n`\n\nexport const Wrapper = styled.div`\n\theight: 90%;\n`\n\nexport const mgmtStyles = {\n\troot: {\n\t\theight: 36,\n\t\tpaddingLeft: 9,\n\t},\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;\nconst rules_1 = require(\"../rules\");\nconst applicability_1 = require(\"./applicability\");\nconst errors_1 = require(\"../errors\");\nconst codegen_1 = require(\"../codegen\");\nconst util_1 = require(\"../util\");\nvar DataType;\n(function (DataType) {\n    DataType[DataType[\"Correct\"] = 0] = \"Correct\";\n    DataType[DataType[\"Wrong\"] = 1] = \"Wrong\";\n})(DataType = exports.DataType || (exports.DataType = {}));\nfunction getSchemaTypes(schema) {\n    const types = getJSONTypes(schema.type);\n    const hasNull = types.includes(\"null\");\n    if (hasNull) {\n        if (schema.nullable === false)\n            throw new Error(\"type: null contradicts nullable: false\");\n    }\n    else {\n        if (!types.length && schema.nullable !== undefined) {\n            throw new Error('\"nullable\" cannot be used without \"type\"');\n        }\n        if (schema.nullable === true)\n            types.push(\"null\");\n    }\n    return types;\n}\nexports.getSchemaTypes = getSchemaTypes;\nfunction getJSONTypes(ts) {\n    const types = Array.isArray(ts) ? ts : ts ? [ts] : [];\n    if (types.every(rules_1.isJSONType))\n        return types;\n    throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"));\n}\nexports.getJSONTypes = getJSONTypes;\nfunction coerceAndCheckDataType(it, types) {\n    const { gen, data, opts } = it;\n    const coerceTo = coerceToTypes(types, opts.coerceTypes);\n    const checkTypes = types.length > 0 &&\n        !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));\n    if (checkTypes) {\n        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);\n        gen.if(wrongType, () => {\n            if (coerceTo.length)\n                coerceData(it, types, coerceTo);\n            else\n                reportTypeError(it);\n        });\n    }\n    return checkTypes;\n}\nexports.coerceAndCheckDataType = coerceAndCheckDataType;\nconst COERCIBLE = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"]);\nfunction coerceToTypes(types, coerceTypes) {\n    return coerceTypes\n        ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === \"array\" && t === \"array\"))\n        : [];\n}\nfunction coerceData(it, types, coerceTo) {\n    const { gen, data, opts } = it;\n    const dataType = gen.let(\"dataType\", (0, codegen_1._) `typeof ${data}`);\n    const coerced = gen.let(\"coerced\", (0, codegen_1._) `undefined`);\n    if (opts.coerceTypes === \"array\") {\n        gen.if((0, codegen_1._) `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen\n            .assign(data, (0, codegen_1._) `${data}[0]`)\n            .assign(dataType, (0, codegen_1._) `typeof ${data}`)\n            .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));\n    }\n    gen.if((0, codegen_1._) `${coerced} !== undefined`);\n    for (const t of coerceTo) {\n        if (COERCIBLE.has(t) || (t === \"array\" && opts.coerceTypes === \"array\")) {\n            coerceSpecificType(t);\n        }\n    }\n    gen.else();\n    reportTypeError(it);\n    gen.endIf();\n    gen.if((0, codegen_1._) `${coerced} !== undefined`, () => {\n        gen.assign(data, coerced);\n        assignParentData(it, coerced);\n    });\n    function coerceSpecificType(t) {\n        switch (t) {\n            case \"string\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} == \"number\" || ${dataType} == \"boolean\"`)\n                    .assign(coerced, (0, codegen_1._) `\"\" + ${data}`)\n                    .elseIf((0, codegen_1._) `${data} === null`)\n                    .assign(coerced, (0, codegen_1._) `\"\"`);\n                return;\n            case \"number\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`)\n                    .assign(coerced, (0, codegen_1._) `+${data}`);\n                return;\n            case \"integer\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`)\n                    .assign(coerced, (0, codegen_1._) `+${data}`);\n                return;\n            case \"boolean\":\n                gen\n                    .elseIf((0, codegen_1._) `${data} === \"false\" || ${data} === 0 || ${data} === null`)\n                    .assign(coerced, false)\n                    .elseIf((0, codegen_1._) `${data} === \"true\" || ${data} === 1`)\n                    .assign(coerced, true);\n                return;\n            case \"null\":\n                gen.elseIf((0, codegen_1._) `${data} === \"\" || ${data} === 0 || ${data} === false`);\n                gen.assign(coerced, null);\n                return;\n            case \"array\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`)\n                    .assign(coerced, (0, codegen_1._) `[${data}]`);\n        }\n    }\n}\nfunction assignParentData({ gen, parentData, parentDataProperty }, expr) {\n    // TODO use gen.property\n    gen.if((0, codegen_1._) `${parentData} !== undefined`, () => gen.assign((0, codegen_1._) `${parentData}[${parentDataProperty}]`, expr));\n}\nfunction checkDataType(dataType, data, strictNums, correct = DataType.Correct) {\n    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;\n    let cond;\n    switch (dataType) {\n        case \"null\":\n            return (0, codegen_1._) `${data} ${EQ} null`;\n        case \"array\":\n            cond = (0, codegen_1._) `Array.isArray(${data})`;\n            break;\n        case \"object\":\n            cond = (0, codegen_1._) `${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`;\n            break;\n        case \"integer\":\n            cond = numCond((0, codegen_1._) `!(${data} % 1) && !isNaN(${data})`);\n            break;\n        case \"number\":\n            cond = numCond();\n            break;\n        default:\n            return (0, codegen_1._) `typeof ${data} ${EQ} ${dataType}`;\n    }\n    return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);\n    function numCond(_cond = codegen_1.nil) {\n        return (0, codegen_1.and)((0, codegen_1._) `typeof ${data} == \"number\"`, _cond, strictNums ? (0, codegen_1._) `isFinite(${data})` : codegen_1.nil);\n    }\n}\nexports.checkDataType = checkDataType;\nfunction checkDataTypes(dataTypes, data, strictNums, correct) {\n    if (dataTypes.length === 1) {\n        return checkDataType(dataTypes[0], data, strictNums, correct);\n    }\n    let cond;\n    const types = (0, util_1.toHash)(dataTypes);\n    if (types.array && types.object) {\n        const notObj = (0, codegen_1._) `typeof ${data} != \"object\"`;\n        cond = types.null ? notObj : (0, codegen_1._) `!${data} || ${notObj}`;\n        delete types.null;\n        delete types.array;\n        delete types.object;\n    }\n    else {\n        cond = codegen_1.nil;\n    }\n    if (types.number)\n        delete types.integer;\n    for (const t in types)\n        cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));\n    return cond;\n}\nexports.checkDataTypes = checkDataTypes;\nconst typeError = {\n    message: ({ schema }) => `must be ${schema}`,\n    params: ({ schema, schemaValue }) => typeof schema == \"string\" ? (0, codegen_1._) `{type: ${schema}}` : (0, codegen_1._) `{type: ${schemaValue}}`,\n};\nfunction reportTypeError(it) {\n    const cxt = getTypeErrorContext(it);\n    (0, errors_1.reportError)(cxt, typeError);\n}\nexports.reportTypeError = reportTypeError;\nfunction getTypeErrorContext(it) {\n    const { gen, data, schema } = it;\n    const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, \"type\");\n    return {\n        gen,\n        keyword: \"type\",\n        data,\n        schema: schema.type,\n        schemaCode,\n        schemaValue: schemaCode,\n        parentSchema: schema,\n        params: {},\n        it,\n    };\n}\n//# sourceMappingURL=dataType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst code_1 = require(\"../code\");\nexports.error = {\n    message: ({ params: { property, depsCount, deps } }) => {\n        const property_ies = depsCount === 1 ? \"property\" : \"properties\";\n        return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;\n    },\n    params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},\n    missingProperty: ${missingProperty},\n    depsCount: ${depsCount},\n    deps: ${deps}}`, // TODO change to reference\n};\nconst def = {\n    keyword: \"dependencies\",\n    type: \"object\",\n    schemaType: \"object\",\n    error: exports.error,\n    code(cxt) {\n        const [propDeps, schDeps] = splitDependencies(cxt);\n        validatePropertyDeps(cxt, propDeps);\n        validateSchemaDeps(cxt, schDeps);\n    },\n};\nfunction splitDependencies({ schema }) {\n    const propertyDeps = {};\n    const schemaDeps = {};\n    for (const key in schema) {\n        if (key === \"__proto__\")\n            continue;\n        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;\n        deps[key] = schema[key];\n    }\n    return [propertyDeps, schemaDeps];\n}\nfunction validatePropertyDeps(cxt, propertyDeps = cxt.schema) {\n    const { gen, data, it } = cxt;\n    if (Object.keys(propertyDeps).length === 0)\n        return;\n    const missing = gen.let(\"missing\");\n    for (const prop in propertyDeps) {\n        const deps = propertyDeps[prop];\n        if (deps.length === 0)\n            continue;\n        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);\n        cxt.setParams({\n            property: prop,\n            depsCount: deps.length,\n            deps: deps.join(\", \"),\n        });\n        if (it.allErrors) {\n            gen.if(hasProperty, () => {\n                for (const depProp of deps) {\n                    (0, code_1.checkReportMissingProp)(cxt, depProp);\n                }\n            });\n        }\n        else {\n            gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);\n            (0, code_1.reportMissingProp)(cxt, missing);\n            gen.else();\n        }\n    }\n}\nexports.validatePropertyDeps = validatePropertyDeps;\nfunction validateSchemaDeps(cxt, schemaDeps = cxt.schema) {\n    const { gen, data, keyword, it } = cxt;\n    const valid = gen.name(\"valid\");\n    for (const prop in schemaDeps) {\n        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))\n            continue;\n        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {\n            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);\n            cxt.mergeValidEvaluated(schCxt, valid);\n        }, () => gen.var(valid, true) // TODO var\n        );\n        cxt.ok(valid);\n    }\n}\nexports.validateSchemaDeps = validateSchemaDeps;\nexports.default = def;\n//# sourceMappingURL=dependencies.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { memo } from 'react';\nimport styled from 'styled-components';\nexport const CommandBarContainer = /*#__PURE__*/ memo(function CommandBarContainer({ props , renderers  }) {\n    return /*#__PURE__*/ _jsx(Container, {\n        className: \"header-command-bar\",\n        children: renderers.map((renderer, i)=>/*#__PURE__*/ _jsx(Command, {\n                children: renderer(props)\n            }, i))\n    });\n});\nconst Command = styled.div``;\nconst Container = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\tborder-top: 1px solid ${({ theme  })=>theme.application().faint().hex()};\r\n\tborder-bottom: 1px solid ${({ theme  })=>theme.application().faint().hex()};\r\n`;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\n/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */ import { useThematic } from '@thematic/react';\nimport { memo, useMemo } from 'react';\n/**\r\n * Standard rendering of Empty values.\r\n */ export const EmptyCell = /*#__PURE__*/ memo(function EmptyCell({ textAlign ,  }) {\n    const theme = useThematic();\n    const style = useMemo(()=>({\n            width: '100%',\n            textAlign,\n            color: theme.application().lowContrast().hex()\n        }), [\n        theme,\n        textAlign\n    ]);\n    return /*#__PURE__*/ _jsx(\"div\", {\n        style: style,\n        children: \"\\u2014\"\n    });\n});\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { IconButton } from '@fluentui/react';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Else, If, Then } from 'react-if';\nimport styled from 'styled-components';\nimport { useIntersection } from './GroupHeader.hooks.js';\nexport const GroupHeader = /*#__PURE__*/ memo(function GroupHeader({ columnName , props , children: children1 , lazyLoadGroups  }) {\n    const { group , onToggleCollapse  } = props;\n    const ref = useRef();\n    // whether the element toggle is manual or by visibility on scroll\n    const [manualToggle, setManualToggle] = useState(false);\n    // trigger as soon as the element becomes visible\n    const inViewport = useIntersection(ref.current, '0px');\n    const countChildren = useCallback((children)=>{\n        let total = 0;\n        children.forEach((child)=>{\n            total += child.count;\n            total += child.children ? countChildren(child.children) : 0;\n        });\n        return total;\n    }, []);\n    useEffect(()=>{\n        if (inViewport && group?.isCollapsed && onToggleCollapse) {\n            onToggleCollapse(group);\n        }\n    }, [\n        inViewport,\n        group,\n        onToggleCollapse\n    ]);\n    const onManualLevelToggle = useCallback(()=>{\n        setManualToggle(true);\n        onToggleCollapse && onToggleCollapse(group);\n    }, [\n        group,\n        onToggleCollapse,\n        setManualToggle\n    ]);\n    const shouldLazyLoad = useMemo(()=>{\n        return lazyLoadGroups && group?.level > 0 && !manualToggle;\n    }, [\n        group,\n        lazyLoadGroups,\n        manualToggle\n    ]);\n    return /*#__PURE__*/ _jsxs(HeaderContainer, {\n        // uses the ref to toggle if element is into view if the user didn't toggled it with the button\n        ref: (element)=>ref.current = shouldLazyLoad ? element : undefined,\n        groupLevel: group?.level,\n        children: [\n            /*#__PURE__*/ _jsx(LevelButton, {\n                onClick: onManualLevelToggle,\n                iconProps: {\n                    iconName: group?.isCollapsed ? 'ChevronRight' : 'ChevronDown'\n                }\n            }),\n            /*#__PURE__*/ _jsxs(If, {\n                condition: !!children1,\n                children: [\n                    /*#__PURE__*/ _jsx(Then, {\n                        children: children1\n                    }),\n                    /*#__PURE__*/ _jsxs(Else, {\n                        children: [\n                            /*#__PURE__*/ _jsx(HeaderDetailsText, {\n                                children: /*#__PURE__*/ _jsxs(Bold, {\n                                    children: [\n                                        columnName ? `${columnName}  - ` : '',\n                                        group?.name\n                                    ]\n                                })\n                            }),\n                            /*#__PURE__*/ _jsxs(HeaderDetailsText, {\n                                children: [\n                                    \"Children: \",\n                                    group?.count\n                                ]\n                            }),\n                            group?.children && /*#__PURE__*/ _jsxs(HeaderDetailsText, {\n                                children: [\n                                    \"Total Items: \",\n                                    countChildren(group?.children)\n                                ]\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n});\nconst HeaderContainer = styled.div`\r\n\tpadding-left: ${({ groupLevel  })=>`${groupLevel * 12}px`};\r\n\tdisplay: flex;\r\n\tgap: 8px;\r\n`;\nconst LevelButton = styled(IconButton)`\r\n\twidth: 5%;\r\n`;\nconst HeaderDetailsText = styled.span`\r\n\talign-self: center;\r\n`;\nconst Bold = styled.b``;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { ConstrainMode, DetailsList, DetailsListLayoutMode, SelectionMode } from '@fluentui/react';\nimport { memo, useCallback, useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { groupBuilder } from '../common/groups.js';\nimport { useColumns, useDetailsHeaderRenderer, useDetailsListStyles, useGroupHeaderRenderer, useSlicedTable, useSortedGroups, useSortedTable, useSortHandling, useStripedRowsRenderer, useSubsetTable, useTableMetadata } from './hooks/index.js';\nimport { debounceFn } from './util/index.js';\n/**\r\n * Renders an arquero table using a fluent DetailsList.\r\n */ export const ArqueroDetailsList = /*#__PURE__*/ memo(function ArqueroDetailsList({ table , features ={} , metadata , offset =0 , limit =Infinity , includeAllColumns =true , visibleColumns , isSortable =false , isStriped =false , isColumnClickable =false , showColumnBorders =false , selectedColumn , onColumnClick , onCellDropdownSelect , onRenderGroupHeader , onChangeMetadata , // extract props we want to set data-centric defaults for\nselectionMode =SelectionMode.none , layoutMode =DetailsListLayoutMode.fixedColumns , columns , onColumnHeaderClick , styles , isHeadersFixed =false , compact =false , isResizable =true , // passthrough the remainder as props\n...props }) {\n    const [version, setVersion] = useState(0);\n    const { sortColumn , sortDirection , handleColumnHeaderClick  } = useSortHandling(isSortable, onColumnHeaderClick);\n    // first subset the table using the visible columns\n    // this will prevent any further operations on columns we aren't going to show\n    const subset = useSubsetTable(table, visibleColumns);\n    // sort the table internally\n    // note that this is different than the orderby of a pipeline step\n    // this is a temporary sort only for the table display\n    const sorted = useSortedTable(subset, sortColumn, sortDirection);\n    // slice any potential page\n    const sliced = useSlicedTable(sorted, offset, limit);\n    // last, copy these items to actual JS objects for the DetailsList\n    const items = useMemo(()=>sliced.objects(), [\n        sliced\n    ]);\n    // if the table is grouped, groups the information in a way we can iterate\n    const groupedEntries = useMemo(()=>table.isGrouped() ? sliced.objects({\n            grouped: 'entries'\n        }) : undefined, [\n        sliced,\n        table\n    ]);\n    // sorts first level group headers\n    const sortedGroups = useSortedGroups(table, sortColumn, sortDirection, groupedEntries);\n    const computedMetadata = useTableMetadata(table, metadata, anyStatsFeatures(features), onChangeMetadata);\n    const isDefaultHeaderClickable = useMemo(()=>{\n        return isSortable || isColumnClickable || !!onColumnHeaderClick;\n    }, [\n        isSortable,\n        isColumnClickable,\n        onColumnHeaderClick\n    ]);\n    const onColumnResize = useCallback((column, newWidth)=>{\n        const set = ()=>setVersion((prev)=>prev + 1);\n        if (column?.currentWidth !== newWidth) {\n            debounceFn(set);\n        }\n    }, [\n        setVersion\n    ]);\n    const displayColumns = useColumns(table, computedMetadata, columns, visibleColumns, handleColumnHeaderClick, {\n        features,\n        sortColumn,\n        sortDirection,\n        selectedColumn,\n        onColumnClick,\n        onCellDropdownSelect,\n        isDefaultHeaderClickable,\n        includeAllColumns,\n        isColumnClickable,\n        showColumnBorders,\n        compact,\n        isResizable\n    });\n    const headerStyle = useDetailsListStyles(isHeadersFixed, features, styles, !!onColumnClick, compact);\n    const renderRow = useStripedRowsRenderer(isStriped, showColumnBorders);\n    const renderDetailsHeader = useDetailsHeaderRenderer();\n    const renderGroupHeader = useGroupHeaderRenderer(table, computedMetadata, onRenderGroupHeader, features.lazyLoadGroups);\n    const groups = useMemo(()=>{\n        if (!sliced.isGrouped()) {\n            return undefined;\n        }\n        const existingGroups = sliced.groups();\n        const totalLevelCount = existingGroups.names.length;\n        return sortedGroups?.map((row)=>{\n            const initialLevel = 0;\n            return groupBuilder(row, existingGroups, initialLevel, totalLevelCount, items, sortDirection, features.lazyLoadGroups, sortColumn);\n        });\n    }, [\n        sliced,\n        sortedGroups,\n        items,\n        sortColumn,\n        sortDirection,\n        features\n    ]);\n    // as in FluentUI documentation, when updating item we can update the list items with a spread operator.\n    // since when adding a new column we're changing the columns prop too, this approach doesn't work for that.\n    // a workaround found in the issues suggest to use this version property to use as comparison to force re-render\n    useEffect(()=>{\n        setVersion((prev)=>prev + 1);\n    }, [\n        columns,\n        table,\n        compact\n    ]);\n    return /*#__PURE__*/ _jsx(DetailsWrapper, {\n        \"data-is-scrollable\": \"true\",\n        children: /*#__PURE__*/ _jsx(DetailsList, {\n            items: [\n                ...items\n            ],\n            selectionMode: selectionMode,\n            layoutMode: layoutMode,\n            groups: groups,\n            getKey: (_, index)=>{\n                return index.toString();\n            },\n            groupProps: {\n                onRenderHeader: renderGroupHeader\n            },\n            columns: displayColumns,\n            constrainMode: ConstrainMode.unconstrained,\n            onRenderRow: renderRow,\n            onRenderDetailsHeader: renderDetailsHeader,\n            onColumnResize: onColumnResize,\n            compact: compact,\n            ...props,\n            listProps: {\n                version\n            },\n            styles: headerStyle\n        })\n    });\n});\nconst DetailsWrapper = styled.div`\r\n\theight: inherit;\r\n\tposition: relative;\r\n\tmax-height: inherit;\r\n\toverflow-y: auto;\r\n\toverflow-x: auto;\r\n\r\n\tspan.ms-DetailsHeader-cellTitle {\r\n\t\tbackground-color: ${({ theme  })=>theme.application().background().hex()};\r\n\t}\r\n\r\n\t.ms-List-cell {\r\n\t\tmin-height: unset;\r\n\t}\r\n\r\n\t.ms-CommandBar {\r\n\t\tpadding: unset;\r\n\t}\r\n\r\n\t.ms-OverflowSet {\r\n\t\tjustify-content: center;\r\n\t}\r\n`;\nfunction anyStatsFeatures(features) {\n    return Object.values(features || {}).some((v)=>v === true);\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */ import { memo, useCallback, useEffect, useState } from 'react';\nimport { Else, If, Then } from 'react-if';\nimport styled from 'styled-components';\nimport { RenameCallout } from './RenameCallout.js';\n/**\r\n * Renders the table name if passed, or the option to rename the name if the function\r\n * onRenameTable is passed to be called when clicking save or pressing enter on the callout\r\n */ export const TableName = /*#__PURE__*/ memo(function TableName({ onRenameTable , name , color ,  }) {\n    const [isEditing, setIsEditing] = useState(false);\n    const [editedName, setEditedName] = useState(name || '');\n    useEffect(()=>{\n        setEditedName(name);\n    }, [\n        name,\n        setEditedName\n    ]);\n    const onChange = useCallback((_e, value)=>{\n        setEditedName(value);\n    }, [\n        setEditedName\n    ]);\n    const onSend = useCallback((newName)=>{\n        // if the user enters an empty value, save the previous value\n        const incomingName = !newName ? name : newName;\n        onRenameTable && onRenameTable(incomingName);\n        setIsEditing(false);\n        setEditedName(incomingName);\n    }, [\n        onRenameTable,\n        setIsEditing,\n        setEditedName,\n        name\n    ]);\n    return /*#__PURE__*/ _jsx(Container, {\n        children: /*#__PURE__*/ _jsxs(If, {\n            condition: !!onRenameTable,\n            children: [\n                /*#__PURE__*/ _jsx(Then, {\n                    children: /*#__PURE__*/ _jsxs(Container, {\n                        children: [\n                            /*#__PURE__*/ _jsx(H3Editable, {\n                                color: color,\n                                id: \"editName\",\n                                title: \"Edit\",\n                                onClick: ()=>setIsEditing(true),\n                                children: name\n                            }),\n                            /*#__PURE__*/ _jsx(If, {\n                                condition: isEditing,\n                                children: /*#__PURE__*/ _jsx(Then, {\n                                    children: /*#__PURE__*/ _jsx(RenameCallout, {\n                                        onSend: onSend,\n                                        editedName: editedName,\n                                        onChange: onChange,\n                                        name: name\n                                    })\n                                })\n                            })\n                        ]\n                    })\n                }),\n                /*#__PURE__*/ _jsx(Else, {\n                    children: /*#__PURE__*/ _jsx(If, {\n                        condition: name,\n                        children: /*#__PURE__*/ _jsx(Then, {\n                            children: /*#__PURE__*/ _jsx(H3, {\n                                color: color,\n                                children: name\n                            })\n                        })\n                    })\n                })\n            ]\n        })\n    });\n});\nconst H3 = styled.h3`\r\n\tfont-weight: normal;\r\n\tfont-size: 0.8em;\r\n\tmargin-right: 8px;\r\n\tcolor: ${({ theme , color  })=>color || theme.application().background().hex()};\r\n`;\nconst H3Editable = styled(H3)`\r\n\tcursor: pointer;\r\n\tborder-bottom: 1px dotted\r\n\t\t${({ theme  })=>theme.application().background().hex()};\r\n`;\nconst Container = styled.div``;\n","/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */ export const HEIGHT = 36;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */ import { memo, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { HEIGHT } from './constants.js';\nimport { useColorDefaults, useColumnCounts, useRowCounts } from './hooks/index.js';\nimport { TableName } from './TableName.js';\nexport const ArqueroTableHeader = /*#__PURE__*/ memo(function ArqueroTableHeader({ table , name , showRowCount =true , showColumnCount =true , commandBar , farCommandBar , visibleColumns , onRenameTable , bgColor , color ,  }) {\n    const { background , foreground  } = useColorDefaults(color, bgColor);\n    const groupCount = useMemo(()=>{\n        return table.isGrouped() ? table.groups().size : 0;\n    }, [\n        table\n    ]);\n    const columnCounts = useColumnCounts(table, visibleColumns);\n    const rowCounts = useRowCounts(table);\n    return /*#__PURE__*/ _jsxs(Header, {\n        bgColor: background,\n        color: foreground,\n        children: [\n            /*#__PURE__*/ _jsx(Left, {\n                children: commandBar\n            }),\n            /*#__PURE__*/ _jsxs(Middle, {\n                children: [\n                    name ? /*#__PURE__*/ _jsx(TableName, {\n                        onRenameTable: onRenameTable,\n                        name: name,\n                        color: foreground\n                    }) : null,\n                    showRowCount === true ? /*#__PURE__*/ _jsx(H3, {\n                        children: `${rowCounts.visible} row${rowCounts.visible !== 1 ? 's' : ''}${rowCounts.hidden > 0 ? ` (${rowCounts.hidden} filtered)` : ''}`\n                    }) : null,\n                    showColumnCount === true ? /*#__PURE__*/ _jsx(H3, {\n                        children: `${columnCounts.visible} col${columnCounts.visible !== 1 ? 's' : ''}${columnCounts.hidden > 0 ? ` (${columnCounts.hidden} hidden)` : ''}`\n                    }) : null,\n                    groupCount ? /*#__PURE__*/ _jsxs(H3, {\n                        children: [\n                            groupCount,\n                            \" groups\"\n                        ]\n                    }) : null\n                ]\n            }),\n            /*#__PURE__*/ _jsx(Right, {\n                children: farCommandBar\n            })\n        ]\n    });\n});\nconst Header = styled.div`\r\n\theight: ${HEIGHT}px;\r\n\twidth: 100%;\r\n\tbackground-color: ${({ bgColor  })=>bgColor};\r\n\tcolor: ${({ color  })=>color};\r\n\tposition: relative;\r\n\tbox-sizing: border-box;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: space-between;\r\n`;\nconst H3 = styled.h3`\r\n\tfont-weight: normal;\r\n\tfont-size: 0.8em;\r\n`;\nconst Left = styled.div`\r\n\tflex: 1;\r\n\tdisplay: flex;\r\n\tjustify-content: flex-start;\r\n`;\nconst Middle = styled.div`\r\n\tflex: 2;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tgap: 8px;\r\n`;\nconst Right = styled.div`\r\n\tflex: 1;\r\n\tdisplay: flex;\r\n\tjustify-content: flex-end;\r\n`;\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const FooterEl = styled.footer`\n\twidth: 100%;\n`\n\nexport const Container = styled.div`\n\twidth: 500px;\n\theight: 20px;\n\tfont-size: 12px;\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n\talign-content: center;\n\tjustify-content: space-between;\n\tmargin: auto;\n`\n\nexport const constants = {\n\tprivacyUrl: 'https://go.microsoft.com/fwlink/?LinkId=521839',\n\ttermsOfUseUrl: 'https://go.microsoft.com/fwlink/?LinkID=206977',\n\ttrademarksUrl: 'https://www.microsoft.com/trademarks',\n\tmicrosoft: 'https://www.microsoft.com',\n\tcopyright: `©️ ${new Date().getFullYear()} Microsoft`,\n}\n\nexport const LinkDiv = styled.div`\n\tcursor: pointer;\n`\nexport const LinkA = styled.a`\n\tcursor: pointer;\n\ttext-decoration: none !important;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { useMicrosoftConsentBanner } from '@essex/hooks'\nimport type { FC } from 'react'\nimport { memo } from 'react'\n\nimport { useTheme } from '../states/settings.js'\nimport {\n\tconstants,\n\tContainer,\n\tFooterEl,\n\tLinkA,\n\tLinkDiv,\n} from './Footer.styles.js'\n\nexport const Footer: FC = memo(function Footer() {\n\tconst theme = useTheme()\n\tconst CONSENT_CONF = {\n\t\ttheme: theme.variant,\n\t\telementId: 'cookie-banner',\n\t\tonChange: (c: any) => console.log('consent changed', c),\n\t}\n\tconst [, manageConsent] = useMicrosoftConsentBanner(CONSENT_CONF)\n\n\treturn (\n\t\t<FooterEl>\n\t\t\t<Container>\n\t\t\t\t<Link href={constants.privacyUrl}>Privacy</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link\n\t\t\t\t\tid={'managecookies'}\n\t\t\t\t\tonClick={manageConsent}\n\t\t\t\t\tstyle={{ color: '#3f75bf' }}\n\t\t\t\t>\n\t\t\t\t\tCookies\n\t\t\t\t</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.termsOfUseUrl}>Terms of Use</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.trademarksUrl}>Trademarks</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.microsoft}>{constants.copyright}</Link>\n\t\t\t</Container>\n\t\t</FooterEl>\n\t)\n})\n\nconst Link: FC<\n\tReact.PropsWithChildren<{\n\t\thref?: string\n\t\tid?: string\n\t\tclassName?: string\n\t\tstyle?: React.CSSProperties\n\t\tonClick?: () => void\n\t}>\n> = memo(function Link({ id, className, children, href, style, onClick }) {\n\treturn href == null ? (\n\t\t<LinkDiv style={style} className={className} id={id} onClick={onClick}>\n\t\t\t{children}\n\t\t</LinkDiv>\n\t) : (\n\t\t<LinkA\n\t\t\ttarget=\"_blank\"\n\t\t\trel=\"noreferrer\"\n\t\t\thref={href}\n\t\t\tstyle={style}\n\t\t\tclassName={className}\n\t\t\tid={id}\n\t\t>\n\t\t\t{children}\n\t\t</LinkA>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { mergeStyles, mergeStyleSets } from '@fluentui/react'\nimport { ThemeVariant } from '@thematic/core'\nimport styled from 'styled-components'\n\n// always ensure the header is dark, regardless of mode\nexport const Container = styled.div`\n\tpadding: 4px 16px 4px 16px;\n\tbackground: ${({ theme }) =>\n\t\ttheme.variant === ThemeVariant.Light\n\t\t\t? theme.application().highContrast()\n\t\t\t: theme.application().lowContrast()};\n\tborder-bottom: 1px solid\n\t\t${({ theme }) =>\n\t\t\ttheme.variant === ThemeVariant.Light\n\t\t\t\t? theme.application().midHighContrast()\n\t\t\t\t: theme.application().lowMidContrast()};\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-between;\n\talign-items: center;\n\talign-content: center;\n`\n\nexport const Title = styled.h1`\n\ttext-transform: uppercase;\n\tfont-size: 25px;\n\talign-self: center;\n\tmargin: 0;\n\tpadding: 0;\n\tcolor: ${({ theme }) =>\n\t\ttheme.variant === ThemeVariant.Light\n\t\t\t? theme.application().lowContrast()\n\t\t\t: theme.application().midHighContrast()};\n\twidth: 70%;\n`\n\nexport const iconClass = mergeStyles({\n\tfontSize: 25,\n\theight: 25,\n\twidth: 25,\n\t// goofy manual centering adjustment; icon appears to not center with flexbox mechanisms\n\tmarginTop: 3,\n\tcursor: 'pointer',\n})\n\nexport const classNames = mergeStyleSets({\n\twhite: [{ color: 'white', marginRight: 5 }, iconClass],\n})\n\nexport const Spacer = styled.div`\n\tflex: 1;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { FontIcon } from '@fluentui/react'\nimport { memo } from 'react'\n\nimport { classNames, Container, Spacer, Title } from './Header.styles.js'\nimport type { HeaderProps } from './Header.types.js'\n\nexport const Header: React.FC<HeaderProps> = memo(function Header({\n\tonMenuClick,\n\tonSettingsClick,\n}) {\n\treturn (\n\t\t<Container>\n\t\t\t<FontIcon\n\t\t\t\taria-label=\"Menu\"\n\t\t\t\ticonName=\"CollapseMenu\"\n\t\t\t\tclassName={classNames.white}\n\t\t\t\tonClick={onMenuClick}\n\t\t\t/>\n\t\t\t<Title>Data Wrangling Components</Title>\n\t\t\t<Spacer />\n\t\t\t<FontIcon\n\t\t\t\taria-label=\"Settings\"\n\t\t\t\ticonName=\"Settings\"\n\t\t\t\tclassName={classNames.white}\n\t\t\t\tonClick={onSettingsClick}\n\t\t\t/>\n\t\t</Container>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Spinner } from '@fluentui/react'\nimport styled from 'styled-components'\n\nexport const Content = styled.div``\nexport const Container = styled.div``\n\nexport const StyledSpinner = styled(Spinner)`\n\tmargin-top: 20px;\n`\nexport const SlidingContainer = styled.div<{ isOffset: boolean }>`\n\ttransition-timing-function: ease;\n\ttransition: 0.25s;\n\tposition: absolute;\n\twidth: ${({ isOffset }) => (isOffset ? 'calc(100% - 200px)' : '100%')};\n\tborder-left: ${({ isOffset, theme }) =>\n\t\tisOffset ? `1px solid ${theme.application().border()}` : '0'};\n\tleft: ${({ isOffset }) => (isOffset ? '200px' : '0')};\n`\n\nexport const FixedContainer = styled.div<{ isOpen: boolean }>`\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tdisplay: flex;\n\tflex: 1;\n\theight: 100%;\n\tz-index: ${({ isOpen }) => (isOpen ? '1' : '-1')};\n\ttransition-timing-function: ease;\n\ttransition: 0.25s;\n\topacity: ${({ isOpen }) => (isOpen ? '1' : '0')};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nexport const Heading = styled.h2`\n\tmargin-bottom: 10px;\n`\n\nexport const LinkSection = styled.div`\n\tmargin-left: 10px;\n\tmargin-top: 20px;\n`\n\nexport const ListItem = styled(Link)`\n\tfont-size: 14pt;\n\tdisplay: block;\n`\nexport const Container = styled.div`\n\tmargin: 8px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { memo } from 'react'\n\nimport { Container, Heading, LinkSection, ListItem } from './NavPanel.styles.js'\nimport type { NavPanelProps } from './NavPanel.types.js'\n\nexport const NavPanel: React.FC<NavPanelProps> = memo(function NavPanel({\n\tonDismiss,\n}: NavPanelProps) {\n\treturn (\n\t\t<Container onClick={onDismiss}>\n\t\t\t<Heading>Navigation</Heading>\n\t\t\t<LinkSection>\n\t\t\t\t<ListItem to={'/'} onClick={onDismiss}>\n\t\t\t\t\tPrepare Data\n\t\t\t\t</ListItem>\n\t\t\t\t<ListItem to={'/debug'} onClick={onDismiss}>\n\t\t\t\t\tDebug\n\t\t\t\t</ListItem>\n\t\t\t\t<ListItem to={'/performance'} onClick={onDismiss}>\n\t\t\t\t\tPerformance\n\t\t\t\t</ListItem>\n\t\t\t</LinkSection>\n\t\t</Container>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nexport const SettingsSection = styled.div`\n\tmargin-left: 10px;\n`\n\nexport const H3 = styled.h3`\n\tmargin-bottom: 10px;\n`\n\nexport const HelpSection = styled.div`\n\tmargin-left: 10px;\n\tmargin-top: 20px;\n`\n\nexport const ListItem = styled(Link)`\n\tdisplay: block;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { Guidance } from '@data-wrangling-components/react'\nimport { Panel, Toggle } from '@fluentui/react'\nimport { memo, useCallback } from 'react'\n\nimport { useGuidanceIndex } from '../hooks/index.js'\nimport { useSettings } from '../states/settings.js'\nimport { useName, useSetDarkMode } from './SettingsPanel.hooks.js'\nimport { H3, HelpSection, SettingsSection } from './SettingsPanel.styles.js'\nimport type { SettingsPanelProps } from './SettingsPanel.types.js'\n\nexport const SettingsPanel: React.FC<SettingsPanelProps> = memo(\n\tfunction SettingsPanel({ isOpen, onDismiss }: SettingsPanelProps) {\n\t\tconst name = useName()\n\t\tconst index = useGuidanceIndex()\n\t\tconst [settings, setSettings] = useSettings()\n\t\tconst setDarkMode = useSetDarkMode(settings, setSettings)\n\t\tconst handleDarkModeChange = useCallback(\n\t\t\t(_ev: unknown, checked?: boolean) => void setDarkMode(checked),\n\t\t\t[setDarkMode],\n\t\t)\n\n\t\treturn (\n\t\t\t<Panel\n\t\t\t\tisLightDismiss\n\t\t\t\tisOpen={isOpen}\n\t\t\t\tonDismiss={onDismiss}\n\t\t\t\tcloseButtonAriaLabel=\"Close\"\n\t\t\t\theaderText=\"Menu\"\n\t\t\t>\n\t\t\t\t<SettingsSection>\n\t\t\t\t\t<H3>Settings</H3>\n\t\t\t\t\t<Toggle\n\t\t\t\t\t\tlabel=\"Dark Mode\"\n\t\t\t\t\t\tonText=\"On\"\n\t\t\t\t\t\toffText=\"Off\"\n\t\t\t\t\t\tonChange={handleDarkModeChange}\n\t\t\t\t\t\tchecked={settings.isDarkMode}\n\t\t\t\t\t/>\n\t\t\t\t</SettingsSection>\n\n\t\t\t\t<HelpSection>\n\t\t\t\t\t<H3>Help</H3>\n\t\t\t\t\t<Guidance name={name} index={index} />\n\t\t\t\t</HelpSection>\n\t\t\t</Panel>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Spinner } from '@fluentui/react'\nimport { memo, Suspense } from 'react'\nimport { HashRouter } from 'react-router-dom'\nimport { RecoilRoot } from 'recoil'\n\nimport { Layout } from '../components/Layout.js'\nimport { ErrorBoundary } from './ErrorBoundary.js'\nimport { RouteOptions } from './RouteOptions.js'\nimport { StyleContext } from './StyleContext.js'\n\nexport const App: React.FC = memo(function App() {\n\treturn (\n\t\t<ErrorBoundary>\n\t\t\t<RecoilRoot>\n\t\t\t\t<HashRouter>\n\t\t\t\t\t<Suspense fallback={<Spinner />}>\n\t\t\t\t\t\t<StyleContext>\n\t\t\t\t\t\t\t<Layout>\n\t\t\t\t\t\t\t\t<RouteOptions />\n\t\t\t\t\t\t\t</Layout>\n\t\t\t\t\t\t</StyleContext>\n\t\t\t\t\t</Suspense>\n\t\t\t\t</HashRouter>\n\t\t\t</RecoilRoot>\n\t\t</ErrorBoundary>\n\t)\n})\n"],"names":[],"sourceRoot":""}