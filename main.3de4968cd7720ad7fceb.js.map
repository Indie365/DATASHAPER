{"version":3,"file":"main.3de4968cd7720ad7fceb.js","mappings":";;AA+FA;AAMA;AAiBA;AC1GA;AACA;AACA;;ACJA;;;;;;;;;;AAYA;;AAWA;;;AChBA;;ACNA;;AAKA;;;;;;AAWA;;;;;;AAMA;;AAcA;;ACrCA;;ACDA;;;;ACQA;AACA;AAEA;AAGA;;;;;;;AAOA;;;AAGA;AC5BA;;;;;;ACQA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;AAeA;;AAIA;;;;AAMA;;ACtCA;AACA;ACNA;;;;ACJA;;;;AAwEA;AAIA;;;AAGA;AAGA;AClGA;;;AC2EA;AACA;;;;;;AAQA;;;AAKA;;;;AAMA;;;AAGA;;;AAKA;;;;AC/BA;;;;;;AC3DA;;AAGA;AAGA;;;;;;;ACLA;;;;ACCA;;;;ACNA;;;;AAIA;ACZA;;ACaA;;;;AAMA;;;;;AAOA;;;;;ACNA;;;ACVA;;;AAWA;;;;;;AAMA;AAGA;;;AAKA;;AAIA;;AAIA;;;;ACHA;;;AC5BA;;;;AC6CA;;;AClDA;;;ACAA;;;;AAMA;;;ACIA;;ACNA;;;;AAAA;;;ACiJA;;;;;AAOA;;;;AAMA;;;ACnBA;;;;AAMA;;;;AAMA;;;AC1JA;;;;AAMA;;AAIA;;;;;;AAMA;AAGA;;;;ACYA;;;AChCA;;AAEA;AAGA;;ACIA;;;;;AAOA;;;;;;;AASA;;;;AAMA;;;AAKA;;;;AC5BA;;;;AAIA;;AAIA;;;AAKA;;AArBA;;AA2BA;;AAEA;;ACfA;;ACzBA;;;;AC8BA;AACA;ACtBA;;;;;;;;;;ACGA;ACHA;;;AAKA;;AAIA;;AAIA;;;;;;;;ACmMA;;;;;;;;;;;;;;AClNA;;;;;;AAUA;AAMA;;AAEA;;;;AAIA;AAGA;;;AAGA;AACA;;;;;AAKA;;;;AAMA;;;;AAIA;ACjCA;;;;;ADyCA;AAGA;;;AAGA;AC/CA;;;;;;;ACUA;;;;;;AAaA;;;;AAAA;;;;;AAMA;;AAIA;;;;AAIA;AAGA;;AAYA;AAGA;AACA;AC7CA;ACtBA;ACEA;;;;;;;ACMA;;;ACFA;;;;;AAPA;;AAsBA;;;AAtBA;AA4BA;;;;;AAKA;AAGA;;;AApCA;AAwCA;AAGA;;;AAKA;;;AAGA;ACjBA;;AC9BA;;AAIA;;;ACCA;;ADQA;;ACRA;;;;;;;;;;;;;;ACFA","sources":["webpack://@datashaper/webapp/../../.yarn/cache/ajv-npm-8.11.0-83d029789c-5e0ff22680.zip/node_modules/ajv/dist/compile/validate/dataType.js","webpack://@datashaper/webapp/../../.yarn/cache/ajv-npm-8.11.0-83d029789c-5e0ff22680.zip/node_modules/ajv/dist/vocabularies/applicator/dependencies.js","webpack://@datashaper/webapp/./src/components/Footer.styles.ts","webpack://@datashaper/webapp/./src/components/Footer.tsx","webpack://@datashaper/webapp/./src/components/Header.styles.ts","webpack://@datashaper/webapp/./src/components/Header.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@fluentui-utilities-virtual-5776edba62/0/cache/@fluentui-utilities-npm-8.13.1-da987daff8-f98e1dd6be.zip/node_modules/@fluentui/utilities/lib/array.js","webpack://@datashaper/webapp/./src/components/Layout.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@fluentui-utilities-virtual-5776edba62/0/cache/@fluentui-utilities-npm-8.13.1-da987daff8-f98e1dd6be.zip/node_modules/@fluentui/utilities/lib/createMergedRef.js","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/Guidance.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/ProjectMgmtCommandBar.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/ProjectMgmtCommandBar.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/ArqueroTableHeader/TableName.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/ArqueroTableHeader/ArqueroTableHeader.constants.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/ArqueroTableHeader/ArqueroTableHeader.tsx","webpack://@datashaper/webapp/../verb-guidance/dist/index.js","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/controls/Expando.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/verbForm/VerbForm.styles.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/verbs/Filter.styles.ts","webpack://@datashaper/webapp/../../.yarn/cache/@fluentui-date-time-utilities-npm-8.5.2-986bcc9c10-85438d8095.zip/node_modules/@fluentui/date-time-utilities/lib/dateValues/dateValues.js","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/controls/CalendarPicker.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/controls/CalendarPicker.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/verbs/shared/FilterFunction.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/verbs/shared/FilterFunction.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/verbs/SetOperation.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/verbs/SetOperation.hooks.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/controls/SortInstruction.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/verbs/Orderby.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/verbs/shared/DataTypeField.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/verbs/shared/DataTypeField.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/verbs/Recode.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/verbs/Rename.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/verbs/Sample.styles.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/StepComponent.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/StepSelector.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/TableTransform.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/TableTransformModal.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/TableTransformModal.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@fluentui-utilities-virtual-5776edba62/0/cache/@fluentui-utilities-npm-8.13.1-da987daff8-f98e1dd6be.zip/node_modules/@fluentui/utilities/lib/selection/Selection.types.js","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/ArqueroDetailsList/renderers/CommandBarContainer.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/ArqueroDetailsList/hooks/useCellDimensions.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/ArqueroDetailsList/renderers/EmptyCell.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/GroupHeader/GroupHeader.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/ArqueroDetailsList/ArqueroDetailsList.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/HistoryPanel.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/HistoryPanel.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/StepHistoryList.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/StepHistoryList.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/DetailText.styles.ts","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/DetailText.tsx","webpack://@datashaper/webapp/../../.yarn/__virtual__/@datashaper-react-virtual-81089ac0d8/1/javascript/react/src/components/TableListBar.styles.ts","webpack://@datashaper/webapp/./src/pages/PrepareDataPage/PrepareDataPage.styles.ts","webpack://@datashaper/webapp/./src/pages/PrepareDataPage/PrepareDataPage.base.tsx","webpack://@datashaper/webapp/./src/components/SettingsPanel.styles.ts","webpack://@datashaper/webapp/./src/components/SettingsPanel.tsx","webpack://@datashaper/webapp/./src/App/App.tsx"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;\nconst rules_1 = require(\"../rules\");\nconst applicability_1 = require(\"./applicability\");\nconst errors_1 = require(\"../errors\");\nconst codegen_1 = require(\"../codegen\");\nconst util_1 = require(\"../util\");\nvar DataType;\n(function (DataType) {\n    DataType[DataType[\"Correct\"] = 0] = \"Correct\";\n    DataType[DataType[\"Wrong\"] = 1] = \"Wrong\";\n})(DataType = exports.DataType || (exports.DataType = {}));\nfunction getSchemaTypes(schema) {\n    const types = getJSONTypes(schema.type);\n    const hasNull = types.includes(\"null\");\n    if (hasNull) {\n        if (schema.nullable === false)\n            throw new Error(\"type: null contradicts nullable: false\");\n    }\n    else {\n        if (!types.length && schema.nullable !== undefined) {\n            throw new Error('\"nullable\" cannot be used without \"type\"');\n        }\n        if (schema.nullable === true)\n            types.push(\"null\");\n    }\n    return types;\n}\nexports.getSchemaTypes = getSchemaTypes;\nfunction getJSONTypes(ts) {\n    const types = Array.isArray(ts) ? ts : ts ? [ts] : [];\n    if (types.every(rules_1.isJSONType))\n        return types;\n    throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"));\n}\nexports.getJSONTypes = getJSONTypes;\nfunction coerceAndCheckDataType(it, types) {\n    const { gen, data, opts } = it;\n    const coerceTo = coerceToTypes(types, opts.coerceTypes);\n    const checkTypes = types.length > 0 &&\n        !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));\n    if (checkTypes) {\n        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);\n        gen.if(wrongType, () => {\n            if (coerceTo.length)\n                coerceData(it, types, coerceTo);\n            else\n                reportTypeError(it);\n        });\n    }\n    return checkTypes;\n}\nexports.coerceAndCheckDataType = coerceAndCheckDataType;\nconst COERCIBLE = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"]);\nfunction coerceToTypes(types, coerceTypes) {\n    return coerceTypes\n        ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === \"array\" && t === \"array\"))\n        : [];\n}\nfunction coerceData(it, types, coerceTo) {\n    const { gen, data, opts } = it;\n    const dataType = gen.let(\"dataType\", (0, codegen_1._) `typeof ${data}`);\n    const coerced = gen.let(\"coerced\", (0, codegen_1._) `undefined`);\n    if (opts.coerceTypes === \"array\") {\n        gen.if((0, codegen_1._) `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen\n            .assign(data, (0, codegen_1._) `${data}[0]`)\n            .assign(dataType, (0, codegen_1._) `typeof ${data}`)\n            .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));\n    }\n    gen.if((0, codegen_1._) `${coerced} !== undefined`);\n    for (const t of coerceTo) {\n        if (COERCIBLE.has(t) || (t === \"array\" && opts.coerceTypes === \"array\")) {\n            coerceSpecificType(t);\n        }\n    }\n    gen.else();\n    reportTypeError(it);\n    gen.endIf();\n    gen.if((0, codegen_1._) `${coerced} !== undefined`, () => {\n        gen.assign(data, coerced);\n        assignParentData(it, coerced);\n    });\n    function coerceSpecificType(t) {\n        switch (t) {\n            case \"string\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} == \"number\" || ${dataType} == \"boolean\"`)\n                    .assign(coerced, (0, codegen_1._) `\"\" + ${data}`)\n                    .elseIf((0, codegen_1._) `${data} === null`)\n                    .assign(coerced, (0, codegen_1._) `\"\"`);\n                return;\n            case \"number\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`)\n                    .assign(coerced, (0, codegen_1._) `+${data}`);\n                return;\n            case \"integer\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`)\n                    .assign(coerced, (0, codegen_1._) `+${data}`);\n                return;\n            case \"boolean\":\n                gen\n                    .elseIf((0, codegen_1._) `${data} === \"false\" || ${data} === 0 || ${data} === null`)\n                    .assign(coerced, false)\n                    .elseIf((0, codegen_1._) `${data} === \"true\" || ${data} === 1`)\n                    .assign(coerced, true);\n                return;\n            case \"null\":\n                gen.elseIf((0, codegen_1._) `${data} === \"\" || ${data} === 0 || ${data} === false`);\n                gen.assign(coerced, null);\n                return;\n            case \"array\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`)\n                    .assign(coerced, (0, codegen_1._) `[${data}]`);\n        }\n    }\n}\nfunction assignParentData({ gen, parentData, parentDataProperty }, expr) {\n    // TODO use gen.property\n    gen.if((0, codegen_1._) `${parentData} !== undefined`, () => gen.assign((0, codegen_1._) `${parentData}[${parentDataProperty}]`, expr));\n}\nfunction checkDataType(dataType, data, strictNums, correct = DataType.Correct) {\n    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;\n    let cond;\n    switch (dataType) {\n        case \"null\":\n            return (0, codegen_1._) `${data} ${EQ} null`;\n        case \"array\":\n            cond = (0, codegen_1._) `Array.isArray(${data})`;\n            break;\n        case \"object\":\n            cond = (0, codegen_1._) `${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`;\n            break;\n        case \"integer\":\n            cond = numCond((0, codegen_1._) `!(${data} % 1) && !isNaN(${data})`);\n            break;\n        case \"number\":\n            cond = numCond();\n            break;\n        default:\n            return (0, codegen_1._) `typeof ${data} ${EQ} ${dataType}`;\n    }\n    return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);\n    function numCond(_cond = codegen_1.nil) {\n        return (0, codegen_1.and)((0, codegen_1._) `typeof ${data} == \"number\"`, _cond, strictNums ? (0, codegen_1._) `isFinite(${data})` : codegen_1.nil);\n    }\n}\nexports.checkDataType = checkDataType;\nfunction checkDataTypes(dataTypes, data, strictNums, correct) {\n    if (dataTypes.length === 1) {\n        return checkDataType(dataTypes[0], data, strictNums, correct);\n    }\n    let cond;\n    const types = (0, util_1.toHash)(dataTypes);\n    if (types.array && types.object) {\n        const notObj = (0, codegen_1._) `typeof ${data} != \"object\"`;\n        cond = types.null ? notObj : (0, codegen_1._) `!${data} || ${notObj}`;\n        delete types.null;\n        delete types.array;\n        delete types.object;\n    }\n    else {\n        cond = codegen_1.nil;\n    }\n    if (types.number)\n        delete types.integer;\n    for (const t in types)\n        cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));\n    return cond;\n}\nexports.checkDataTypes = checkDataTypes;\nconst typeError = {\n    message: ({ schema }) => `must be ${schema}`,\n    params: ({ schema, schemaValue }) => typeof schema == \"string\" ? (0, codegen_1._) `{type: ${schema}}` : (0, codegen_1._) `{type: ${schemaValue}}`,\n};\nfunction reportTypeError(it) {\n    const cxt = getTypeErrorContext(it);\n    (0, errors_1.reportError)(cxt, typeError);\n}\nexports.reportTypeError = reportTypeError;\nfunction getTypeErrorContext(it) {\n    const { gen, data, schema } = it;\n    const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, \"type\");\n    return {\n        gen,\n        keyword: \"type\",\n        data,\n        schema: schema.type,\n        schemaCode,\n        schemaValue: schemaCode,\n        parentSchema: schema,\n        params: {},\n        it,\n    };\n}\n//# sourceMappingURL=dataType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst code_1 = require(\"../code\");\nexports.error = {\n    message: ({ params: { property, depsCount, deps } }) => {\n        const property_ies = depsCount === 1 ? \"property\" : \"properties\";\n        return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;\n    },\n    params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},\n    missingProperty: ${missingProperty},\n    depsCount: ${depsCount},\n    deps: ${deps}}`, // TODO change to reference\n};\nconst def = {\n    keyword: \"dependencies\",\n    type: \"object\",\n    schemaType: \"object\",\n    error: exports.error,\n    code(cxt) {\n        const [propDeps, schDeps] = splitDependencies(cxt);\n        validatePropertyDeps(cxt, propDeps);\n        validateSchemaDeps(cxt, schDeps);\n    },\n};\nfunction splitDependencies({ schema }) {\n    const propertyDeps = {};\n    const schemaDeps = {};\n    for (const key in schema) {\n        if (key === \"__proto__\")\n            continue;\n        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;\n        deps[key] = schema[key];\n    }\n    return [propertyDeps, schemaDeps];\n}\nfunction validatePropertyDeps(cxt, propertyDeps = cxt.schema) {\n    const { gen, data, it } = cxt;\n    if (Object.keys(propertyDeps).length === 0)\n        return;\n    const missing = gen.let(\"missing\");\n    for (const prop in propertyDeps) {\n        const deps = propertyDeps[prop];\n        if (deps.length === 0)\n            continue;\n        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);\n        cxt.setParams({\n            property: prop,\n            depsCount: deps.length,\n            deps: deps.join(\", \"),\n        });\n        if (it.allErrors) {\n            gen.if(hasProperty, () => {\n                for (const depProp of deps) {\n                    (0, code_1.checkReportMissingProp)(cxt, depProp);\n                }\n            });\n        }\n        else {\n            gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);\n            (0, code_1.reportMissingProp)(cxt, missing);\n            gen.else();\n        }\n    }\n}\nexports.validatePropertyDeps = validatePropertyDeps;\nfunction validateSchemaDeps(cxt, schemaDeps = cxt.schema) {\n    const { gen, data, keyword, it } = cxt;\n    const valid = gen.name(\"valid\");\n    for (const prop in schemaDeps) {\n        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))\n            continue;\n        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {\n            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);\n            cxt.mergeValidEvaluated(schCxt, valid);\n        }, () => gen.var(valid, true) // TODO var\n        );\n        cxt.ok(valid);\n    }\n}\nexports.validateSchemaDeps = validateSchemaDeps;\nexports.default = def;\n//# sourceMappingURL=dependencies.js.map","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const FooterEl = styled.footer`\n\twidth: 100%;\n`\n\nexport const Container = styled.div`\n\twidth: 500px;\n\theight: 20px;\n\tfont-size: 12px;\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n\talign-content: center;\n\tjustify-content: space-between;\n\tmargin: auto;\n`\n\nexport const constants = {\n\tprivacyUrl: 'https://go.microsoft.com/fwlink/?LinkId=521839',\n\ttermsOfUseUrl: 'https://go.microsoft.com/fwlink/?LinkID=206977',\n\ttrademarksUrl: 'https://www.microsoft.com/trademarks',\n\tmicrosoft: 'https://www.microsoft.com',\n\tcopyright: `©️ ${new Date().getFullYear()} Microsoft`,\n}\n\nexport const LinkDiv = styled.div`\n\tcursor: pointer;\n`\nexport const LinkA = styled.a`\n\tcursor: pointer;\n\ttext-decoration: none !important;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { useMicrosoftConsentBanner } from '@essex/hooks'\nimport type { FC } from 'react'\nimport { memo } from 'react'\n\nimport { useTheme } from '../states/settings.js'\nimport {\n\tconstants,\n\tContainer,\n\tFooterEl,\n\tLinkA,\n\tLinkDiv,\n} from './Footer.styles.js'\n\nexport const Footer: FC = memo(function Footer() {\n\tconst theme = useTheme()\n\tconst CONSENT_CONF = {\n\t\ttheme: theme.variant,\n\t\telementId: 'cookie-banner',\n\t\tonChange: (c: any) => console.log('consent changed', c),\n\t}\n\tconst [, manageConsent] = useMicrosoftConsentBanner(CONSENT_CONF)\n\n\treturn (\n\t\t<FooterEl>\n\t\t\t<Container>\n\t\t\t\t<Link href={constants.privacyUrl}>Privacy</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link\n\t\t\t\t\tid={'managecookies'}\n\t\t\t\t\tonClick={manageConsent}\n\t\t\t\t\tstyle={{ color: '#3f75bf' }}\n\t\t\t\t>\n\t\t\t\t\tCookies\n\t\t\t\t</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.termsOfUseUrl}>Terms of Use</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.trademarksUrl}>Trademarks</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.microsoft}>{constants.copyright}</Link>\n\t\t\t</Container>\n\t\t</FooterEl>\n\t)\n})\n\nconst Link: FC<\n\tReact.PropsWithChildren<{\n\t\thref?: string\n\t\tid?: string\n\t\tclassName?: string\n\t\tstyle?: React.CSSProperties\n\t\tonClick?: () => void\n\t}>\n> = memo(function Link({ id, className, children, href, style, onClick }) {\n\treturn href == null ? (\n\t\t<LinkDiv style={style} className={className} id={id} onClick={onClick}>\n\t\t\t{children}\n\t\t</LinkDiv>\n\t) : (\n\t\t<LinkA\n\t\t\ttarget=\"_blank\"\n\t\t\trel=\"noreferrer\"\n\t\t\thref={href}\n\t\t\tstyle={style}\n\t\t\tclassName={className}\n\t\t\tid={id}\n\t\t>\n\t\t\t{children}\n\t\t</LinkA>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { mergeStyles, mergeStyleSets } from '@fluentui/react'\nimport { ThemeVariant } from '@thematic/core'\nimport styled from 'styled-components'\n\n// always ensure the header is dark, regardless of mode\nexport const Container = styled.div`\n\tpadding: 4px 16px 4px 16px;\n\tbackground: ${({ theme }) =>\n\t\ttheme.variant === ThemeVariant.Light\n\t\t\t? theme.application().highContrast()\n\t\t\t: theme.application().lowContrast()};\n\tborder-bottom: 1px solid\n\t\t${({ theme }) =>\n\t\t\ttheme.variant === ThemeVariant.Light\n\t\t\t\t? theme.application().midHighContrast()\n\t\t\t\t: theme.application().lowMidContrast()};\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-between;\n\talign-items: center;\n\talign-content: center;\n`\n\nexport const Title = styled.h1`\n\ttext-transform: uppercase;\n\tfont-size: 25px;\n\talign-self: center;\n\tmargin: 0;\n\tpadding: 0;\n\tcolor: ${({ theme }) =>\n\t\ttheme.variant === ThemeVariant.Light\n\t\t\t? theme.application().lowContrast()\n\t\t\t: theme.application().midHighContrast()};\n\twidth: 70%;\n`\n\nexport const iconClass = mergeStyles({\n\tfontSize: 20,\n\theight: 20,\n\twidth: 20,\n\tcursor: 'pointer',\n})\n\nexport const classNames = mergeStyleSets({\n\twhite: [{ color: 'white', marginRight: 5 }, iconClass],\n})\n\nexport const Spacer = styled.div`\n\tflex: 1;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { FontIcon } from '@fluentui/react'\nimport { memo } from 'react'\n\nimport { classNames, Container, Spacer, Title } from './Header.styles.js'\nimport type { HeaderProps } from './Header.types.js'\n\nexport const Header: React.FC<HeaderProps> = memo(function Header({\n\tonSettingsClick,\n}) {\n\treturn (\n\t\t<Container>\n\t\t\t<Title>DataShaper</Title>\n\t\t\t<Spacer />\n\t\t\t<FontIcon\n\t\t\t\taria-label=\"Settings\"\n\t\t\t\ticonName=\"Settings\"\n\t\t\t\tclassName={classNames.white}\n\t\t\t\tonClick={onSettingsClick}\n\t\t\t/>\n\t\t</Container>\n\t)\n})\n","/**\n * Helper to find the index of an item within an array, using a callback to\n * determine the match.\n *\n * @public\n * @param array - Array to search.\n * @param cb - Callback which returns true on matches.\n * @param fromIndex - Optional index to start from (defaults to 0)\n */\nexport function findIndex(array, cb, fromIndex) {\n    if (fromIndex === void 0) { fromIndex = 0; }\n    var index = -1;\n    for (var i = fromIndex; array && i < array.length; i++) {\n        if (cb(array[i], i)) {\n            index = i;\n            break;\n        }\n    }\n    return index;\n}\n/**\n * Helper to find the first item within an array that satisfies the callback.\n * @param array - Array to search\n * @param cb - Callback which returns true on matches\n */\nexport function find(array, cb) {\n    var index = findIndex(array, cb);\n    if (index < 0) {\n        return undefined;\n    }\n    return array[index];\n}\n/**\n * Creates an array of a given size and helper method to populate.\n *\n * @public\n * @param size - Size of array.\n * @param getItem - Callback to populate given cell index.\n */\nexport function createArray(size, getItem) {\n    var array = [];\n    for (var i = 0; i < size; i++) {\n        array.push(getItem(i));\n    }\n    return array;\n}\n/**\n * Convert the given array to a matrix with columnCount number\n * of columns.\n *\n * @public\n * @param items - The array to convert\n * @param columnCount - The number of columns for the resulting matrix\n * @returns A matrix of items\n */\nexport function toMatrix(items, columnCount) {\n    return items.reduce(function (rows, currentValue, index) {\n        if (index % columnCount === 0) {\n            rows.push([currentValue]);\n        }\n        else {\n            rows[rows.length - 1].push(currentValue);\n        }\n        return rows;\n    }, []);\n}\n/**\n * Given an array, it returns a new array that does not contain the item at the given index.\n * @param array - The array to operate on\n * @param index - The index of the element to remove\n */\nexport function removeIndex(array, index) {\n    return array.filter(function (_, i) { return index !== i; });\n}\n/**\n * Given an array, this function returns a new array where the element at a given index has been replaced.\n * @param array - The array to operate on\n * @param newElement - The element that will be placed in the new array\n * @param index - The index of the element that should be replaced\n */\nexport function replaceElement(array, newElement, index) {\n    var copy = array.slice();\n    copy[index] = newElement;\n    return copy;\n}\n/**\n * Given an array, this function returns a new array where an element has been inserted at the given index.\n * @param array - The array to operate on\n * @param index - The index where an element should be inserted\n * @param itemToAdd - The element to insert\n */\nexport function addElementAtIndex(array, index, itemToAdd) {\n    var copy = array.slice();\n    copy.splice(index, 0, itemToAdd);\n    return copy;\n}\n/**\n * Given an array where each element is of type T or T[], flatten it into an array of T\n * @param array - The array where each element can optionally also be an array\n */\nexport function flatten(array) {\n    var result = [];\n    array.forEach(function (item) { return (result = result.concat(item)); });\n    return result;\n}\n/**\n * Returns a boolean indicating if the two given arrays are equal in length and values.\n *\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.\n */\nexport function arraysEqual(array1, array2) {\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    for (var i = 0; i < array1.length; i++) {\n        if (array1[i] !== array2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=array.js.map","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Spinner } from '@fluentui/react'\nimport styled from 'styled-components'\n\nexport const Content = styled.div``\nexport const Container = styled.div``\n\nexport const StyledSpinner = styled(Spinner)`\n\tmargin-top: 20px;\n`\nexport const SlidingContainer = styled.div<{ isOffset: boolean }>`\n\ttransition-timing-function: ease;\n\ttransition: 0.25s;\n\tposition: absolute;\n\twidth: ${({ isOffset }) => (isOffset ? 'calc(100% - 200px)' : '100%')};\n\tborder-left: ${({ isOffset, theme }) =>\n\t\tisOffset ? `1px solid ${theme.application().border()}` : '0'};\n\tleft: ${({ isOffset }) => (isOffset ? '200px' : '0')};\n`\n\nexport const FixedContainer = styled.div<{ isOpen: boolean }>`\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tdisplay: flex;\n\tflex: 1;\n\theight: 100%;\n\tz-index: ${({ isOpen }) => (isOpen ? '1' : '-1')};\n\ttransition-timing-function: ease;\n\ttransition: 0.25s;\n\topacity: ${({ isOpen }) => (isOpen ? '1' : '0')};\n`\n","import { arraysEqual } from './array';\n/**\n * Set up a ref resolver function given internal state managed for the ref.\n * @param local Set\n */\nvar createResolver = function (local) { return function (newValue) {\n    for (var _i = 0, _a = local.refs; _i < _a.length; _i++) {\n        var ref = _a[_i];\n        if (typeof ref === 'function') {\n            ref(newValue);\n        }\n        else if (ref) {\n            // work around the immutability of the React.Ref type\n            ref.current = newValue;\n        }\n    }\n}; };\n/**\n * Helper to merge refs from within class components.\n */\nexport var createMergedRef = function (value) {\n    var local = {\n        refs: [],\n    };\n    return function () {\n        var newRefs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newRefs[_i] = arguments[_i];\n        }\n        if (!local.resolver || !arraysEqual(local.refs, newRefs)) {\n            local.resolver = createResolver(local);\n        }\n        local.refs = newRefs;\n        return local.resolver;\n    };\n};\n//# sourceMappingURL=createMergedRef.js.map","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { IconButton } from '@fluentui/react'\n\nexport const Container = styled.div`\n\tposition: relative;\n\n\th1 {\n\t\tmargin-top: 0;\n\t\ttext-transform: uppercase;\n\t\tcolor: ${({ theme }) => theme.application().lowMidContrast().hex()};\n\t}\n\n\th2 {\n\t\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 1rem;\n\n\t\t&.active + .details {\n\t\t\topacity: 1;\n\t\t\theight: auto;\n\t\t\ttransform: translateX(0);\n\t\t\toverflow-x: auto;\n\t\t}\n\t}\n\n\ttable {\n\t\tborder-collapse: collapse;\n\n\t\tth {\n\t\t\tfont-weight: bold;\n\t\t}\n\n\t\ttd,\n\t\tth {\n\t\t\tborder: 1px solid\n\t\t\t\t${({ theme }) => theme.application().lowContrast().hex()};\n\t\t\tpadding: 5px;\n\t\t\ttext-align: center;\n\t\t}\n\t}\n\n\t.details {\n\t\topacity: 0;\n\t\theight: 0;\n\t\ttransition: transform 0.5s ease-in-out;\n\t\ttransform: translateX(100%);\n\t\toverflow-x: hidden;\n\t}\n`\n\nexport const Icon = styled(IconButton as any)`\n\tfont-size: 2.5rem;\n`\n\nexport const ButtonWrapper = styled.div`\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n`\n\nexport const icons = {\n\tback: { iconName: 'Back' },\n\thome: { iconName: 'Home' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Theme } from '@thematic/core'\nimport { ThemeVariant } from '@thematic/core'\nimport styled from 'styled-components'\n\nexport const background = (theme: Theme): string =>\n\ttheme.variant === ThemeVariant.Light\n\t\t? theme.application().highContrast().hex()\n\t\t: theme.application().lowContrast().hex()\n\nexport const color = (theme: Theme): string =>\n\ttheme.variant === ThemeVariant.Light\n\t\t? theme.application().lowContrast().hex()\n\t\t: theme.application().midHighContrast().hex()\n\nexport const dropzone = {\n\tcontainer: {\n\t\theight: 'auto',\n\t\tborderStyle: 'none',\n\t\tmargin: 0,\n\t},\n}\n\nexport const Wrapper = styled.div`\n\twidth: 100%;\n\tbackground: ${({ theme }) => background(theme)};\n\tcolor: ${({ theme }) => color(theme)};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { MessageBar, MessageBarType } from '@fluentui/react'\nimport { useThematic } from '@thematic/react'\nimport { memo, useState } from 'react'\n\nimport { useHandleFileUpload } from '../hooks/uploads.js'\nimport { CommandBar } from './CommandBar.js'\nimport { Dropzone } from './Dropzone.js'\nimport {\n\tuseOnUpdateWorkflowJson,\n\tuseProjectMgmtCommands,\n} from './ProjectMgmtCommandBar.hooks.js'\nimport {\n\tbackground,\n\tcolor,\n\tdropzone,\n\tWrapper,\n} from './ProjectMgmtCommandBar.styles.js'\nimport type { ProjectMgmtCommandBarProps } from './ProjectMgmtCommandBar.types.js'\n\nconst acceptedFileTypes = ['.csv', '.json', '.zip']\n\nexport const ProjectMgmtCommandBar: React.FC<ProjectMgmtCommandBarProps> = memo(\n\tfunction ProjectMgmtCommandBar({\n\t\tworkflow,\n\t\ttables,\n\t\toutputTables,\n\t\tonUpdateWorkflow,\n\t\tonUpdateTables,\n\t\t...props\n\t}) {\n\t\tconst theme = useThematic()\n\t\tconst [error, setError] = useState('')\n\t\tconst onUpdateWorkflowJson = useOnUpdateWorkflowJson(onUpdateWorkflow)\n\t\tconst commands = useProjectMgmtCommands(\n\t\t\tworkflow,\n\t\t\ttables,\n\t\t\toutputTables,\n\t\t\tonUpdateWorkflowJson,\n\t\t\tonUpdateTables,\n\t\t\tsetError,\n\t\t)\n\t\tconst onDrop = useHandleFileUpload(onUpdateWorkflowJson, onUpdateTables)\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{error ? (\n\t\t\t\t\t<MessageBar\n\t\t\t\t\t\tmessageBarType={MessageBarType.error}\n\t\t\t\t\t\tisMultiline={false}\n\t\t\t\t\t\tonDismiss={() => setError('')}\n\t\t\t\t\t\tdismissButtonAriaLabel=\"Close\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{error}\n\t\t\t\t\t</MessageBar>\n\t\t\t\t) : null}\n\t\t\t\t<Dropzone\n\t\t\t\t\tacceptedFileTypes={acceptedFileTypes}\n\t\t\t\t\tonDrop={onDrop}\n\t\t\t\t\tstyles={dropzone}\n\t\t\t\t>\n\t\t\t\t\t<Wrapper>\n\t\t\t\t\t\t<CommandBar\n\t\t\t\t\t\t\titems={commands}\n\t\t\t\t\t\t\tbackground={background(theme)}\n\t\t\t\t\t\t\tcolor={color(theme)}\n\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Wrapper>\n\t\t\t\t</Dropzone>\n\t\t\t</>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { memo, useCallback, useEffect, useState } from 'react'\nimport { Else, If, Then } from 'react-if'\n\nimport { RenameCallout } from './RenameCallout.js'\n\nexport interface TableNameProps {\n\tonRenameTable?: (name: string) => void\n\tname?: string\n\tcolor?: string\n}\n\n/**\n * Renders the table name if passed, or the option to rename the name if the function\n * onRenameTable is passed to be called when clicking save or pressing enter on the callout\n */\nexport const TableName: React.FC<TableNameProps> = memo(function TableName({\n\tonRenameTable,\n\tname,\n\tcolor,\n}) {\n\tconst [isEditing, setIsEditing] = useState(false)\n\tconst [editedName, setEditedName] = useState(name || '')\n\n\tuseEffect(() => {\n\t\tsetEditedName(name as string)\n\t}, [name, setEditedName])\n\n\tconst onChange = useCallback(\n\t\t(_e: any, value?: string) => {\n\t\t\tsetEditedName(value as string)\n\t\t},\n\t\t[setEditedName],\n\t)\n\n\tconst onSend = useCallback(\n\t\t(newName?: string) => {\n\t\t\t// if the user enters an empty value, save the previous value\n\t\t\tconst incomingName = (!newName ? name : newName) as string\n\t\t\tonRenameTable && onRenameTable(incomingName)\n\t\t\tsetIsEditing(false)\n\t\t\tsetEditedName(incomingName)\n\t\t},\n\t\t[onRenameTable, setIsEditing, setEditedName, name],\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<If condition={!!onRenameTable}>\n\t\t\t\t<Then>\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<H3Editable\n\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\tid=\"editName\"\n\t\t\t\t\t\t\ttitle=\"Edit\"\n\t\t\t\t\t\t\tonClick={() => setIsEditing(true)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t</H3Editable>\n\t\t\t\t\t\t<If condition={isEditing}>\n\t\t\t\t\t\t\t<Then>\n\t\t\t\t\t\t\t\t<RenameCallout\n\t\t\t\t\t\t\t\t\tonSend={onSend}\n\t\t\t\t\t\t\t\t\teditedName={editedName}\n\t\t\t\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\t\t\t\tname={name}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Then>\n\t\t\t\t\t\t</If>\n\t\t\t\t\t</Container>\n\t\t\t\t</Then>\n\t\t\t\t<Else>\n\t\t\t\t\t<If condition={name}>\n\t\t\t\t\t\t<Then>\n\t\t\t\t\t\t\t<H3 color={color}>{name}</H3>\n\t\t\t\t\t\t</Then>\n\t\t\t\t\t</If>\n\t\t\t\t</Else>\n\t\t\t</If>\n\t\t</Container>\n\t)\n})\n\nconst H3 = styled.h3<{ color?: string }>`\n\tfont-weight: normal;\n\tfont-size: 0.8em;\n\tmargin-right: 8px;\n\tcolor: ${({ theme, color }) =>\n\t\tcolor || theme.application().background().hex()};\n`\n\nconst H3Editable = styled(H3)`\n\tcursor: pointer;\n\tborder-bottom: 1px dotted\n\t\t${({ theme }) => theme.application().background().hex()};\n`\n\nconst Container = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nexport const HEIGHT = 36\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport styled from '@essex/styled-components'\nimport { memo, useMemo } from 'react'\n\nimport { HEIGHT } from './ArqueroTableHeader.constants.js'\nimport {\n\tuseColorDefaults,\n\tuseColumnCounts,\n\tuseRowCounts,\n} from './hooks/index.js'\nimport type { ArqueroTableHeaderProps } from './index.js'\nimport { TableName } from './TableName.js'\n\nexport const ArqueroTableHeader: React.FC<ArqueroTableHeaderProps> = memo(\n\tfunction ArqueroTableHeader({\n\t\ttable,\n\t\tname,\n\t\tshowRowCount = true,\n\t\tshowColumnCount = true,\n\t\tcommandBar,\n\t\tfarCommandBar,\n\t\tvisibleColumns,\n\t\tonRenameTable,\n\t\tbackground,\n\t\tcolor,\n\t}) {\n\t\tconst { background: bg, foreground } = useColorDefaults(color, background)\n\t\tconst groupCount = useMemo((): any => {\n\t\t\treturn table.isGrouped() ? table.groups().size : 0\n\t\t}, [table])\n\n\t\tconst columnCounts = useColumnCounts(table, visibleColumns)\n\t\tconst rowCounts = useRowCounts(table)\n\t\treturn (\n\t\t\t<Header background={bg} color={foreground}>\n\t\t\t\t<Left>{commandBar}</Left>\n\t\t\t\t<Middle hasFarCommandBar={!!farCommandBar}>\n\t\t\t\t\t{name ? (\n\t\t\t\t\t\t<TableName\n\t\t\t\t\t\t\tonRenameTable={onRenameTable}\n\t\t\t\t\t\t\tname={name}\n\t\t\t\t\t\t\tcolor={foreground}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{showRowCount === true ? (\n\t\t\t\t\t\t<H3>\n\t\t\t\t\t\t\t{`${rowCounts.visible} row${rowCounts.visible !== 1 ? 's' : ''}${\n\t\t\t\t\t\t\t\trowCounts.hidden > 0 ? ` (${rowCounts.hidden} filtered)` : ''\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t</H3>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{showColumnCount === true ? (\n\t\t\t\t\t\t<H3>\n\t\t\t\t\t\t\t{`${columnCounts.visible} col${\n\t\t\t\t\t\t\t\tcolumnCounts.visible !== 1 ? 's' : ''\n\t\t\t\t\t\t\t}${\n\t\t\t\t\t\t\t\tcolumnCounts.hidden > 0\n\t\t\t\t\t\t\t\t\t? ` (${columnCounts.hidden} hidden)`\n\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t</H3>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{groupCount ? <H3>{groupCount} groups</H3> : null}\n\t\t\t\t</Middle>\n\t\t\t\t{farCommandBar && <Right>{farCommandBar}</Right>}\n\t\t\t</Header>\n\t\t)\n\t},\n)\n\nconst Header = styled.div<{ background: string; color: string }>`\n\theight: ${HEIGHT}px;\n\twidth: 100%;\n\tpadding: 0px 10px;\n\tbackground-color: ${({ background }) => background};\n\tcolor: ${({ color }) => color};\n\tposition: relative;\n\tbox-sizing: border-box;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n`\n\nconst H3 = styled.h3`\n\tfont-weight: normal;\n\tfont-size: 0.8em;\n`\n\nconst Left = styled.div`\n\tflex: 1;\n\tdisplay: flex;\n\tjustify-content: flex-start;\n`\n\nconst Middle = styled.div<{ hasFarCommandBar: boolean }>`\n\tflex: 2;\n\tdisplay: flex;\n\tjustify-content: ${({ hasFarCommandBar }) =>\n\t\thasFarCommandBar ? 'center' : 'end'};\n\talign-items: center;\n\tgap: 8px;\n`\nconst Right = styled.div`\n\tflex: 1;\n\tdisplay: flex;\n\tjustify-content: flex-end;\n`\n","import { default as aggregate } from './aggregate.js'\nimport { default as bin } from './bin.js'\nimport { default as binarize } from './binarize.js'\nimport { default as boolean } from './boolean.js'\nimport { default as concat } from './concat.js'\nimport { default as convert } from './convert.js'\nimport { default as dedupe } from './dedupe.js'\nimport { default as derive } from './derive.js'\nimport { default as difference } from './difference.js'\nimport { default as erase } from './erase.js'\nimport { default as fetch } from './fetch.js'\nimport { default as fill } from './fill.js'\nimport { default as filter } from './filter.js'\nimport { default as fold } from './fold.js'\nimport { default as groupby } from './groupby.js'\nimport { default as impute } from './impute.js'\nimport { default as intersect } from './intersect.js'\nimport { default as join } from './join.js'\nimport { default as lookup } from './lookup.js'\nimport { default as merge } from './merge.js'\nimport { default as onehot } from './onehot.js'\nimport { default as orderby } from './orderby.js'\nimport { default as pivot } from './pivot.js'\nimport { default as recode } from './recode.js'\nimport { default as rename } from './rename.js'\nimport { default as rollup } from './rollup.js'\nimport { default as sample } from './sample.js'\nimport { default as select } from './select.js'\nimport { default as spread } from './spread.js'\nimport { default as unfold } from './unfold.js'\nimport { default as ungroup } from './ungroup.js'\nimport { default as unhot } from './unhot.js'\nimport { default as union } from './union.js'\nimport { default as unorder } from './unorder.js'\nimport { default as unroll } from './unroll.js'\nimport { default as window } from './window.js'\n\nconst index = {};\nindex['aggregate'] = aggregate;\nindex['bin'] = bin;\nindex['binarize'] = binarize;\nindex['boolean'] = boolean;\nindex['concat'] = concat;\nindex['convert'] = convert;\nindex['dedupe'] = dedupe;\nindex['derive'] = derive;\nindex['difference'] = difference;\nindex['erase'] = erase;\nindex['fetch'] = fetch;\nindex['fill'] = fill;\nindex['filter'] = filter;\nindex['fold'] = fold;\nindex['groupby'] = groupby;\nindex['impute'] = impute;\nindex['intersect'] = intersect;\nindex['join'] = join;\nindex['lookup'] = lookup;\nindex['merge'] = merge;\nindex['onehot'] = onehot;\nindex['orderby'] = orderby;\nindex['pivot'] = pivot;\nindex['recode'] = recode;\nindex['rename'] = rename;\nindex['rollup'] = rollup;\nindex['sample'] = sample;\nindex['select'] = select;\nindex['spread'] = spread;\nindex['unfold'] = unfold;\nindex['ungroup'] = ungroup;\nindex['unhot'] = unhot;\nindex['union'] = union;\nindex['unorder'] = unorder;\nindex['unroll'] = unroll;\nindex['window'] = window;\n\nexport default index;\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const LeftAlignedRow = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\talign-items: flex-end;\n`\n\n/**\n * For explanatory text below an input,\n */\nexport const InputExplainer = styled.div`\n\tfont-size: 0.85em;\n\tcolor: ${({ theme }) => theme.application().midHighContrast().hex()};\n`\n\nexport const dropdownStyles = {\n\troot: {\n\t\twidth: 220,\n\t},\n}\n\nexport const checkboxStyles = {\n\troot: {\n\t\twidth: 220,\n\t\tpaddingTop: '10px',\n\t},\n}\n\n/**\n * For side-by-side dropdowns with a 12px gap\n */\nexport const narrowDropdownStyles = {\n\troot: {\n\t\twidth: 135,\n\t},\n}\n\n/**\n * For very narrow side-by-sides with a delete button for example\n */\nexport const narrowerDropdownStyles = {\n\troot: {\n\t\twidth: 99,\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const Container = styled.div``\n\nexport const Toggle = styled.div`\n\theight: 20px;\n\tfont-size: 0.95em;\n\twidth: 220px;\n\tdisplay: flex;\n\tgap: 4px;\n\talign-items: center;\n`\n\nexport const expandoIconStyles = {\n\troot: {\n\t\tfontSize: 8,\n\t\twidth: 10,\n\t\theight: 16,\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const dropdownStyles = {\n\troot: {\n\t\twidth: 220,\n\t},\n}\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 8px;\n`\n\nexport const InputsBlock = styled.div``\n\nexport const Row = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n`\n\nexport const Vertical = styled.div<{ index: number }>`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 8px;\n\tmargin-top: ${({ index }) => (index > 0 ? 6 : 0)}px;\n`\n","/**\n * The days of the week\n * {@docCategory DateTimeUtilities}\n */\nexport var DayOfWeek;\n(function (DayOfWeek) {\n    DayOfWeek[DayOfWeek[\"Sunday\"] = 0] = \"Sunday\";\n    DayOfWeek[DayOfWeek[\"Monday\"] = 1] = \"Monday\";\n    DayOfWeek[DayOfWeek[\"Tuesday\"] = 2] = \"Tuesday\";\n    DayOfWeek[DayOfWeek[\"Wednesday\"] = 3] = \"Wednesday\";\n    DayOfWeek[DayOfWeek[\"Thursday\"] = 4] = \"Thursday\";\n    DayOfWeek[DayOfWeek[\"Friday\"] = 5] = \"Friday\";\n    DayOfWeek[DayOfWeek[\"Saturday\"] = 6] = \"Saturday\";\n})(DayOfWeek || (DayOfWeek = {}));\n/**\n * The months\n * {@docCategory DateTimeUtilities}\n */\nexport var MonthOfYear;\n(function (MonthOfYear) {\n    MonthOfYear[MonthOfYear[\"January\"] = 0] = \"January\";\n    MonthOfYear[MonthOfYear[\"February\"] = 1] = \"February\";\n    MonthOfYear[MonthOfYear[\"March\"] = 2] = \"March\";\n    MonthOfYear[MonthOfYear[\"April\"] = 3] = \"April\";\n    MonthOfYear[MonthOfYear[\"May\"] = 4] = \"May\";\n    MonthOfYear[MonthOfYear[\"June\"] = 5] = \"June\";\n    MonthOfYear[MonthOfYear[\"July\"] = 6] = \"July\";\n    MonthOfYear[MonthOfYear[\"August\"] = 7] = \"August\";\n    MonthOfYear[MonthOfYear[\"September\"] = 8] = \"September\";\n    MonthOfYear[MonthOfYear[\"October\"] = 9] = \"October\";\n    MonthOfYear[MonthOfYear[\"November\"] = 10] = \"November\";\n    MonthOfYear[MonthOfYear[\"December\"] = 11] = \"December\";\n})(MonthOfYear || (MonthOfYear = {}));\n/**\n * First week of the year settings types\n * {@docCategory DateTimeUtilities}\n */\nexport var FirstWeekOfYear;\n(function (FirstWeekOfYear) {\n    FirstWeekOfYear[FirstWeekOfYear[\"FirstDay\"] = 0] = \"FirstDay\";\n    FirstWeekOfYear[FirstWeekOfYear[\"FirstFullWeek\"] = 1] = \"FirstFullWeek\";\n    FirstWeekOfYear[FirstWeekOfYear[\"FirstFourDayWeek\"] = 2] = \"FirstFourDayWeek\";\n})(FirstWeekOfYear || (FirstWeekOfYear = {}));\n/**\n * The supported date range types\n * {@docCategory DateTimeUtilities}\n */\nexport var DateRangeType;\n(function (DateRangeType) {\n    DateRangeType[DateRangeType[\"Day\"] = 0] = \"Day\";\n    DateRangeType[DateRangeType[\"Week\"] = 1] = \"Week\";\n    DateRangeType[DateRangeType[\"Month\"] = 2] = \"Month\";\n    DateRangeType[DateRangeType[\"WorkWeek\"] = 3] = \"WorkWeek\";\n})(DateRangeType || (DateRangeType = {}));\nexport var DAYS_IN_WEEK = 7;\n//# sourceMappingURL=dateValues.js.map","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { FontIcon, Label, mergeStyles } from '@fluentui/react'\n\nexport const iconClass = mergeStyles({\n\tfontSize: 20,\n\theight: 20,\n\twidth: 20,\n})\n\nexport const Container = styled.div`\n\tdisplay: inline;\n`\n\nexport const CalendarContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n\nexport const CalendarButton = styled(FontIcon)`\n\tdisplay: inline;\n\tfloat: left;\n\tmargin-left: 8px;\n\tmargin-right: 4px;\n`\n\nexport const CalendarLabel = styled(Label)`\n\tdisplay: inline;\n\tfloat: left;\n\tmargin-left: 8px;\n\tmargin-right: 3px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport {\n\tCalendar,\n\tCallout,\n\tdefaultCalendarStrings,\n\tDirectionalHint,\n\tFocusTrapZone,\n} from '@fluentui/react'\nimport { useBoolean } from '@fluentui/react-hooks'\nimport { useThematic } from '@thematic/react'\nimport { memo, useCallback, useMemo, useRef, useState } from 'react'\n\nimport {\n\tCalendarButton,\n\tCalendarContainer,\n\tCalendarLabel,\n\tContainer,\n\ticonClass,\n} from './CalendarPicker.styles.js'\nimport type { CalendarPickerProps } from './CalendarPicker.types.js'\n\nexport const CalendarPicker: React.FC<CalendarPickerProps> = memo(\n\tfunction CalendarPicker({ onSelectDate, value, disabled, cleanLabel }) {\n\t\tconst [selectedDate, setSelectedDate] = useState<Date>(value ?? new Date())\n\t\tconst [\n\t\t\tshowCalendar,\n\t\t\t{ toggle: toggleShowCalendar, setFalse: hideCalendar },\n\t\t] = useBoolean(false)\n\t\tconst buttonContainerRef = useRef<HTMLDivElement>(null)\n\n\t\tconst onSelectDateChange = useCallback(\n\t\t\t(date: Date): void => {\n\t\t\t\tsetSelectedDate(date)\n\t\t\t\thideCalendar()\n\t\t\t},\n\t\t\t[hideCalendar],\n\t\t)\n\n\t\tconst theme = useThematic()\n\t\tconst iconColors = useMemo(\n\t\t\t() => ({\n\t\t\t\tdisabled: theme.application().midContrast().hex(),\n\t\t\t\tenabled: theme.application().foreground().hex(),\n\t\t\t}),\n\t\t\t[theme],\n\t\t)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<CalendarContainer ref={buttonContainerRef}>\n\t\t\t\t\t<CalendarButton\n\t\t\t\t\t\taria-label=\"Compass\"\n\t\t\t\t\t\ticonName=\"Calendar\"\n\t\t\t\t\t\tclassName={iconClass}\n\t\t\t\t\t\tonClick={!disabled ? toggleShowCalendar : undefined}\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t? { cursor: 'default', color: iconColors.disabled }\n\t\t\t\t\t\t\t\t: { cursor: 'pointer', color: iconColors.enabled }\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t{selectedDate !== undefined && !cleanLabel ? (\n\t\t\t\t\t\t<CalendarLabel>\n\t\t\t\t\t\t\t{!cleanLabel ? selectedDate?.toLocaleDateString() : ''}\n\t\t\t\t\t\t</CalendarLabel>\n\t\t\t\t\t) : null}\n\t\t\t\t</CalendarContainer>\n\t\t\t\t{showCalendar && (\n\t\t\t\t\t<Callout\n\t\t\t\t\t\tisBeakVisible={false}\n\t\t\t\t\t\tgapSpace={0}\n\t\t\t\t\t\tdoNotLayer={false}\n\t\t\t\t\t\ttarget={buttonContainerRef}\n\t\t\t\t\t\tdirectionalHint={DirectionalHint.bottomLeftEdge}\n\t\t\t\t\t\tonDismiss={hideCalendar}\n\t\t\t\t\t\tsetInitialFocus\n\t\t\t\t\t>\n\t\t\t\t\t\t<FocusTrapZone isClickableOutsideFocusTrap>\n\t\t\t\t\t\t\t<Calendar\n\t\t\t\t\t\t\t\tonDismiss={hideCalendar}\n\t\t\t\t\t\t\t\tshowMonthPickerAsOverlay\n\t\t\t\t\t\t\t\thighlightSelectedMonth\n\t\t\t\t\t\t\t\tshowGoToToday={false}\n\t\t\t\t\t\t\t\tonSelectDate={(date: Date) => {\n\t\t\t\t\t\t\t\t\tonSelectDate(date)\n\t\t\t\t\t\t\t\t\tonSelectDateChange(date)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvalue={selectedDate}\n\t\t\t\t\t\t\t\t// Calendar uses English strings by default. For localized apps, you must override this prop.\n\t\t\t\t\t\t\t\tstrings={defaultCalendarStrings}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FocusTrapZone>\n\t\t\t\t\t</Callout>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { Label, TextField, Toggle } from '@fluentui/react'\n\nimport { dropdownStyles } from '../../styles.js'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const leftStyles = {\n\troot: {\n\t\t...dropdownStyles.root,\n\t},\n}\n\nexport const TextValue = styled(TextField)`\n\tdisplay: inline;\n\twidth: 135px;\n`\n\nexport const OrLabel = styled(Label)`\n\tdisplay: inline;\n\tfont-style: italic;\n\tpadding-left: 10px;\n\tpadding-right: 10px;\n\tborder-left: 1px solid\n\t\t${({ theme }) => theme.application().lowContrast().hex()};\n`\n\nexport const FilterContainer = styled.div`\n\tmargin-top: 8px;\n\tmargin-left: 16px;\n`\n\nexport const BooleanToggle = styled(Toggle)`\n\tmargin-top: 5px;\n`\n\nexport const InputLabel = styled.div`\n\twidth: 68px;\n`\n\nexport const spinStyles = {\n\troot: {\n\t\twidth: 135,\n\t},\n}\n\nexport const Input = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport {\n\tBooleanComparisonOperator,\n\tDataType,\n\tDateComparisonOperator,\n\tFilterCompareType,\n\tNumericComparisonOperator,\n\tStringComparisonOperator,\n} from '@datashaper/schema'\nimport type { IComboBoxOption, IDropdownOption } from '@fluentui/react'\nimport { IconButton, SpinButton } from '@fluentui/react'\nimport { memo, useCallback, useMemo, useState } from 'react'\n\nimport {\n\tCalendarPicker,\n\tColumnCriteriaCombobox,\n\tEnumDropdown,\n} from '../../controls/index.js'\nimport {\n\tuseSimpleDropdownOptions,\n\tuseTableColumnNames,\n} from '../../hooks/index.js'\nimport { InputExplainer, LeftAlignedRow } from '../../styles.js'\nimport { useColumnTyping, useIsEmpty } from './FilterFunction.hooks.js'\nimport {\n\tBooleanToggle,\n\tContainer,\n\tFilterContainer,\n\tInput,\n\tInputLabel,\n\tleftStyles,\n\tOrLabel,\n\tspinStyles,\n\tTextValue,\n} from './FilterFunction.styles.js'\nimport type { FilterFunctionProps } from './FilterFunction.types.js'\n\n/**\n * Just the comparison logic/ops for a filter.\n * Input table and source column is expected to be edited elsewhere and configured as the step input.\n * This is split out from FilterInputs to allow just the comparison logic to be reused elsewhere.\n */\nexport const FilterFunction: React.FC<FilterFunctionProps> = memo(\n\tfunction FilterFunction({ table, column, criterion, onChange }) {\n\t\tconst handleOpChange = useCallback(\n\t\t\t(_e: React.FormEvent<HTMLDivElement>, opt?: IDropdownOption) => {\n\t\t\t\tonChange &&\n\t\t\t\t\tonChange({\n\t\t\t\t\t\t...criterion,\n\t\t\t\t\t\toperator: opt?.key as\n\t\t\t\t\t\t\t| StringComparisonOperator\n\t\t\t\t\t\t\t| NumericComparisonOperator\n\t\t\t\t\t\t\t| BooleanComparisonOperator\n\t\t\t\t\t\t\t| DateComparisonOperator,\n\t\t\t\t\t})\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst onSelectDate = useCallback(\n\t\t\t(date: Date): void => {\n\t\t\t\tconst update = {\n\t\t\t\t\t...criterion,\n\t\t\t\t\ttype: FilterCompareType.Value,\n\t\t\t\t\tvalue: date,\n\t\t\t\t}\n\t\t\t\tonChange && onChange(update)\n\t\t\t\tsetCleanLabel(false)\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst handleDateComboBoxChange = useCallback(\n\t\t\t(\n\t\t\t\t_e: any,\n\t\t\t\toption: IComboBoxOption | undefined,\n\t\t\t\t_index: number | undefined,\n\t\t\t\tvalue: string | undefined,\n\t\t\t) => {\n\t\t\t\tconst update = {\n\t\t\t\t\t...criterion,\n\t\t\t\t\ttype: FilterCompareType.Column,\n\t\t\t\t\tvalue: option ? option.key : value,\n\t\t\t\t}\n\t\t\t\tonChange?.(update)\n\n\t\t\t\tsetCleanLabel(true)\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst handleComboBoxChange = useCallback(\n\t\t\t(\n\t\t\t\t_e: any,\n\t\t\t\toption: IComboBoxOption | undefined,\n\t\t\t\t_index: number | undefined,\n\t\t\t\tvalue: string | undefined,\n\t\t\t) => {\n\t\t\t\tconst update = {\n\t\t\t\t\t...criterion,\n\t\t\t\t\ttype: FilterCompareType.Column,\n\t\t\t\t\tvalue: option ? option.key : value,\n\t\t\t\t}\n\t\t\t\tonChange?.(update)\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst onChangeTextFieldValue = useCallback(\n\t\t\t(\n\t\t\t\t_event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n\t\t\t\tnewValue?: string,\n\t\t\t) => {\n\t\t\t\tconst update = {\n\t\t\t\t\t...criterion,\n\t\t\t\t\ttype: FilterCompareType.Value,\n\t\t\t\t\tvalue: newValue,\n\t\t\t\t}\n\t\t\t\tonChange?.(update)\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst spinButtonOnChange = useCallback(\n\t\t\t(_event: React.SyntheticEvent<HTMLElement>, newValue?: string) => {\n\t\t\t\tif (newValue !== undefined) {\n\t\t\t\t\tconst update = {\n\t\t\t\t\t\t...criterion,\n\t\t\t\t\t\ttype: FilterCompareType.Value,\n\t\t\t\t\t\tvalue: newValue,\n\t\t\t\t\t}\n\t\t\t\t\tonChange?.(update)\n\t\t\t\t}\n\t\t\t},\n\t\t\t[criterion, onChange],\n\t\t)\n\n\t\tconst onToggleChange = (\n\t\t\t_ev: React.MouseEvent<HTMLElement>,\n\t\t\tchecked?: boolean,\n\t\t) => {\n\t\t\tconst update = {\n\t\t\t\t...criterion,\n\t\t\t\ttype: FilterCompareType.Value,\n\t\t\t\tvalue: checked,\n\t\t\t}\n\t\t\tonChange?.(update)\n\t\t}\n\n\t\tconst { type, columnFilter } = useColumnTyping(table, column)\n\t\tconst [cleanLabel, setCleanLabel] = useState<boolean>(false)\n\n\t\tconst operatorDropdown = useMemo(() => {\n\t\t\tconst shared = {\n\t\t\t\tlabel: '',\n\t\t\t\tplaceholder: 'Choose',\n\t\t\t\tselectedKey: criterion.operator,\n\t\t\t\tonChange: handleOpChange,\n\t\t\t\tstyles: leftStyles,\n\t\t\t}\n\t\t\tif (column) {\n\t\t\t\tif (type === DataType.String) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<EnumDropdown enumeration={StringComparisonOperator} {...shared} />\n\t\t\t\t\t)\n\t\t\t\t} else if (type === DataType.Boolean) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<EnumDropdown enumeration={BooleanComparisonOperator} {...shared} />\n\t\t\t\t\t)\n\t\t\t\t} else if (type === DataType.Date) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<EnumDropdown enumeration={DateComparisonOperator} {...shared} />\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t\t// map to nicer \"math like\" terse labels for numeric operations\n\t\t\t// (the default will use the friendly enum keys)\n\t\t\tconst labels = {\n\t\t\t\t'=': '=',\n\t\t\t\t'!=': '!=',\n\t\t\t\t'<': '<',\n\t\t\t\t'<=': '<=',\n\t\t\t\t'>': '>',\n\t\t\t\t'>=': '>=',\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<EnumDropdown\n\t\t\t\t\tenumeration={NumericComparisonOperator}\n\t\t\t\t\t{...shared}\n\t\t\t\t\tlabels={labels}\n\t\t\t\t/>\n\t\t\t)\n\t\t}, [type, column, criterion, handleOpChange])\n\n\t\tconst isEmpty = useIsEmpty(criterion)\n\t\tconst handleDeleteClick = useCallback(() => onChange?.(), [onChange])\n\t\tconst columns = useTableColumnNames(table, columnFilter)\n\t\tconst columnOptions = useSimpleDropdownOptions(columns)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<LeftAlignedRow>\n\t\t\t\t\t{operatorDropdown}\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\ttitle={'Remove this criterion'}\n\t\t\t\t\t\ticonProps={deleteIconProps}\n\t\t\t\t\t\tonClick={handleDeleteClick}\n\t\t\t\t\t/>\n\t\t\t\t</LeftAlignedRow>\n\n\t\t\t\t<FilterContainer>\n\t\t\t\t\t<Input>\n\t\t\t\t\t\t<InputLabel>value</InputLabel>\n\t\t\t\t\t\t{type === DataType.Date ? (\n\t\t\t\t\t\t\t<CalendarPicker\n\t\t\t\t\t\t\t\tonSelectDate={onSelectDate}\n\t\t\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\t\t\tcleanLabel={cleanLabel}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\n\t\t\t\t\t\t{type === DataType.String ? (\n\t\t\t\t\t\t\t<TextValue\n\t\t\t\t\t\t\t\tonChange={onChangeTextFieldValue}\n\t\t\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\t\t></TextValue>\n\t\t\t\t\t\t) : null}\n\n\t\t\t\t\t\t{type === DataType.Number ? (\n\t\t\t\t\t\t\t<SpinButton\n\t\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\t\tstep={1}\n\t\t\t\t\t\t\t\tvalue={criterion.value}\n\t\t\t\t\t\t\t\tstyles={spinStyles}\n\t\t\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\t\t\tonChange={spinButtonOnChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\n\t\t\t\t\t\t{type === DataType.Boolean ? (\n\t\t\t\t\t\t\t<BooleanToggle\n\t\t\t\t\t\t\t\tdefaultChecked\n\t\t\t\t\t\t\t\tonText=\"True\"\n\t\t\t\t\t\t\t\toffText=\"False\"\n\t\t\t\t\t\t\t\tonChange={onToggleChange}\n\t\t\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</Input>\n\t\t\t\t\t<OrLabel>or</OrLabel>\n\t\t\t\t\t<Input>\n\t\t\t\t\t\t<InputLabel>column</InputLabel>\n\t\t\t\t\t\t{type === DataType.Date ? (\n\t\t\t\t\t\t\t<ColumnCriteriaCombobox\n\t\t\t\t\t\t\t\toptions={columnOptions}\n\t\t\t\t\t\t\t\tonChange={handleDateComboBoxChange}\n\t\t\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<ColumnCriteriaCombobox\n\t\t\t\t\t\t\t\toptions={columnOptions}\n\t\t\t\t\t\t\t\tonChange={handleComboBoxChange}\n\t\t\t\t\t\t\t\tdisabled={isEmpty}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Input>\n\t\t\t\t</FilterContainer>\n\n\t\t\t\t{type === DataType.String ? (\n\t\t\t\t\t<InputExplainer>\n\t\t\t\t\t\tString comparisons are not case-sensitive\n\t\t\t\t\t</InputExplainer>\n\t\t\t\t) : null}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst deleteIconProps = { iconName: 'Delete' }\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const icons = {\n\tadd: { iconName: 'Add' },\n\tdelete: { iconName: 'Delete' },\n}\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const Tables = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Step, Workflow } from '@datashaper/workflow'\nimport { IconButton } from '@fluentui/react'\nimport { useMemo } from 'react'\n\nimport { TableDropdown } from '../controls/index.js'\nimport { useTableDropdownOptions } from '../hooks/useTableDropdownOptions.js'\nimport { LeftAlignedRow } from '../styles.js'\nimport { icons } from './SetOperation.styles.js'\n\nexport function useOthers(\n\tstep: Step,\n\tonChange?: (step: Step) => void,\n\tstore?: Workflow,\n): (JSX.Element | null)[] {\n\tconst tableOptions = useTableDropdownOptions(store)\n\treturn useMemo<(JSX.Element | null)[]>(() => {\n\t\treturn (step.input.others || EMPTY).map((input, index) => {\n\t\t\tconst other = input.node\n\n\t\t\t// on delete, remove the input\n\t\t\tconst handleDeleteClick = () => {\n\t\t\t\tonChange?.({\n\t\t\t\t\t...step,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t...step.input,\n\t\t\t\t\t\tothers: (step.input.others || EMPTY).filter(o => o !== input),\n\t\t\t\t\t} as Step['input'],\n\t\t\t\t})\n\t\t\t}\n\t\t\tif (!store) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<LeftAlignedRow key={`set-op-${other}-${index}`}>\n\t\t\t\t\t<TableDropdown\n\t\t\t\t\t\tlabel={''}\n\t\t\t\t\t\toptions={tableOptions}\n\t\t\t\t\t\tselectedKey={other}\n\t\t\t\t\t\tonChange={(_evt, option) => {\n\t\t\t\t\t\t\tconst update = { ...step }\n\t\t\t\t\t\t\tif (option) {\n\t\t\t\t\t\t\t\tinput.node = `${option.key}`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tonChange?.(update)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\ttitle={'Remove this table'}\n\t\t\t\t\t\ticonProps={icons.delete}\n\t\t\t\t\t\tonClick={handleDeleteClick}\n\t\t\t\t\t/>\n\t\t\t\t</LeftAlignedRow>\n\t\t\t)\n\t\t})\n\t}, [step, store, tableOptions, onChange])\n}\n\nconst EMPTY: any[] = []\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n`\n\nexport const icons = {\n\tdelete: { iconName: 'Delete' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const Sorts = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n`\n\nexport const icons = {\n\tadd: { iconName: 'Add' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { Label, TextField } from '@fluentui/react'\n\nimport { narrowDropdownStyles } from '../../styles.js'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nexport const leftStyles = {\n\troot: {\n\t\t...narrowDropdownStyles.root,\n\t\tmarginRight: 12,\n\t},\n}\n\nexport const TextValue = styled(TextField)`\n\tdisplay: inline;\n`\n\nexport const OrLabel = styled(Label)`\n\tdisplay: inline;\n\tpadding-left: 10px;\n\tpadding-right: 10px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { DataType } from '@datashaper/schema'\nimport { coerce } from '@datashaper/tables'\nimport type { IDropdownOption } from '@fluentui/react'\nimport { Dropdown, SpinButton } from '@fluentui/react'\nimport { memo, useCallback } from 'react'\n\nimport { CalendarPicker } from '../../controls/index.js'\nimport { narrowerDropdownStyles } from '../../styles.js'\nimport { Container, TextValue } from './DataTypeField.styles.js'\nimport type { DataTypeFieldProps } from './DataTypeField.types.js'\n\nexport const DataTypeField: React.FC<DataTypeFieldProps> = memo(\n\tfunction DataTypeField({\n\t\tdataType,\n\t\tkeyValue,\n\t\tvalue,\n\t\tplaceholder,\n\t\tonKeyChange,\n\t\tonValueChange,\n\t\tisKey,\n\t}) {\n\t\tconst booleanOptions: IDropdownOption[] = [\n\t\t\t{ key: 'true', text: 'true' },\n\t\t\t{ key: 'false', text: 'false' },\n\t\t]\n\n\t\tconst onSelectDate = useCallback(\n\t\t\t(date: Date): void => {\n\t\t\t\tconst val = coerce(date, dataType)\n\t\t\t\tisKey\n\t\t\t\t\t? onKeyChange(\n\t\t\t\t\t\t\tnew Date(value).toISOString(),\n\t\t\t\t\t\t\tnew Date(val).toISOString(),\n\t\t\t\t\t  )\n\t\t\t\t\t: onValueChange(\n\t\t\t\t\t\t\tnew Date(keyValue).toISOString(),\n\t\t\t\t\t\t\tnew Date(val).toISOString(),\n\t\t\t\t\t  )\n\t\t\t},\n\t\t\t[onKeyChange, onValueChange, dataType, isKey, value, keyValue],\n\t\t)\n\n\t\tconst onChangeTextFieldValue = useCallback(\n\t\t\t(\n\t\t\t\t_event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n\t\t\t\tnewValue?: string,\n\t\t\t) => {\n\t\t\t\tconst val = coerce(newValue, dataType)\n\t\t\t\tisKey\n\t\t\t\t\t? onKeyChange(value.toString(), val.toString())\n\t\t\t\t\t: onValueChange(keyValue, val)\n\t\t\t},\n\t\t\t[onKeyChange, onValueChange, dataType, isKey, value, keyValue],\n\t\t)\n\n\t\tconst spinButtonOnChange = useCallback(\n\t\t\t(_event: React.SyntheticEvent<HTMLElement>, newValue?: string) => {\n\t\t\t\tif (newValue !== undefined) {\n\t\t\t\t\tconst val = coerce(newValue, dataType)\n\t\t\t\t\tisKey ? onKeyChange(value, val) : onValueChange(keyValue, val)\n\t\t\t\t}\n\t\t\t},\n\t\t\t[onKeyChange, onValueChange, dataType, isKey, value, keyValue],\n\t\t)\n\n\t\tconst dropDownOnChange = useCallback(\n\t\t\t(\n\t\t\t\t_e: React.FormEvent<HTMLDivElement>,\n\t\t\t\tnewValue?: IDropdownOption<any> | undefined,\n\t\t\t) => {\n\t\t\t\tif (newValue !== undefined) {\n\t\t\t\t\tisKey\n\t\t\t\t\t\t? onKeyChange(value, newValue.key)\n\t\t\t\t\t\t: onValueChange(keyValue, newValue.key === 'true' ? true : false)\n\t\t\t\t}\n\t\t\t},\n\t\t\t[onKeyChange, onValueChange, isKey, value, keyValue],\n\t\t)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t{dataType === DataType.Date ? (\n\t\t\t\t\t<CalendarPicker onSelectDate={onSelectDate} value={value} />\n\t\t\t\t) : null}\n\n\t\t\t\t{dataType === DataType.String ? (\n\t\t\t\t\t<TextValue\n\t\t\t\t\t\tonChange={onChangeTextFieldValue}\n\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tstyles={narrowerDropdownStyles}\n\t\t\t\t\t></TextValue>\n\t\t\t\t) : null}\n\n\t\t\t\t{dataType === DataType.Number ? (\n\t\t\t\t\t<SpinButton\n\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\tstep={1}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tstyles={narrowerDropdownStyles}\n\t\t\t\t\t\tonChange={spinButtonOnChange}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t{dataType === DataType.Boolean ? (\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\tselectedKey={value.toString()}\n\t\t\t\t\t\toptions={booleanOptions}\n\t\t\t\t\t\tstyles={narrowerDropdownStyles}\n\t\t\t\t\t\tonChange={dropDownOnChange}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { RecodeArgs, Value } from '@datashaper/schema'\nimport { DataType } from '@datashaper/schema'\nimport { coerce } from '@datashaper/tables'\nimport type { Step } from '@datashaper/workflow'\nimport styled from '@essex/styled-components'\nimport { ActionButton, Icon, IconButton } from '@fluentui/react'\nimport { memo, useMemo } from 'react'\n\nimport { useColumnType, useStepDataTable } from '../hooks/index.js'\nimport type { StepComponentProps } from '../types.js'\nimport {\n\tuseColumnValues,\n\tuseDisabled,\n\tuseHandleAddButtonClick,\n\tuseHandleKeyChange,\n\tuseHandleValueChange,\n\tuseRecodeDelete,\n} from './Recode.hooks.js'\nimport { DataTypeField } from './shared/DataTypeField.js'\n\n/**\n * Provides inputs for a RecodeStep.\n */\nexport const Recode: React.FC<StepComponentProps<RecodeArgs>> = memo(\n\tfunction Recode({ step, workflow, input, table, onChange }) {\n\t\tconst dataTable = useStepDataTable(step, workflow, input, table)\n\t\tconst dataType = useColumnType(dataTable, step.args.column)\n\t\tconst initialValues = useColumnValues(step, dataTable)\n\t\tconst values =\n\t\t\tdataType === DataType.Date\n\t\t\t\t? initialValues.map(e => e.toISOString())\n\t\t\t\t: initialValues\n\t\tconst handleRecodeKeyChange = useHandleKeyChange(step, onChange)\n\t\tconst handleRecodeValueChange = useHandleValueChange(\n\t\t\tstep,\n\t\t\tdataType,\n\t\t\tonChange,\n\t\t)\n\t\tconst handleRecodeDelete = useRecodeDelete(step, onChange)\n\t\tconst handleButtonClick = useHandleAddButtonClick(step, values, onChange)\n\n\t\tconst columnPairs = useRecodePairs(\n\t\t\tstep,\n\t\t\tdataType,\n\t\t\thandleRecodeKeyChange,\n\t\t\thandleRecodeValueChange,\n\t\t\thandleRecodeDelete,\n\t\t)\n\n\t\tconst disabled = useDisabled(step, values)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<ColumnPairs>{columnPairs}</ColumnPairs>\n\t\t\t\t<ActionButton\n\t\t\t\t\tonClick={handleButtonClick}\n\t\t\t\t\ticonProps={addIconProps}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t>\n\t\t\t\t\tAdd mapping\n\t\t\t\t</ActionButton>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nfunction useRecodePairs(\n\tstep: Step<RecodeArgs>,\n\tdataType: DataType,\n\tonKeyChange: (oldKey: Value, newKey: Value) => void,\n\tonValueChange: (key: Value, newValue: Value) => void,\n\tonDelete: (value: Value) => void,\n) {\n\treturn useMemo(() => {\n\t\tconst { mapping } = step.args\n\t\treturn Object.entries(mapping || {}).map((valuePair, index) => {\n\t\t\treturn (\n\t\t\t\t<ColumnPair\n\t\t\t\t\tvaluePair={valuePair}\n\t\t\t\t\tdataType={dataType}\n\t\t\t\t\tkey={`column-Recode-${index}`}\n\t\t\t\t\tonKeyChange={onKeyChange}\n\t\t\t\t\tonValueChange={onValueChange}\n\t\t\t\t\tonDelete={onDelete}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\t}, [step, dataType, onKeyChange, onValueChange, onDelete])\n}\n\nconst ColumnPair: React.FC<{\n\tvaluePair: [string, any]\n\tdataType: DataType\n\tonKeyChange: (oldKey: Value, newKey: Value) => void\n\tonValueChange: (key: Value, newValue: Value) => void\n\tonDelete: (value: Value) => void\n}> = memo(function ColumnPair({\n\tvaluePair,\n\tdataType,\n\tonKeyChange,\n\tonValueChange,\n\tonDelete,\n}) {\n\t// the old value will always come off the map as a string key\n\t// coerce it to the column type for proper comparison\n\tconst [o, q] = valuePair\n\tlet keyValue = coerce(o, dataType)\n\tconst propertyValue = coerce(q, dataType)\n\n\tif (dataType === DataType.Boolean) {\n\t\to === 'false' ? (keyValue = false) : (keyValue = true)\n\t}\n\n\tconst handleDeleteClick = () =>\n\t\tonDelete(dataType === DataType.Date ? keyValue.toISOString() : keyValue)\n\n\treturn (\n\t\t<ColumnPairContainer>\n\t\t\t<DataTypeField\n\t\t\t\tplaceholder={'Current value'}\n\t\t\t\tdataType={dataType}\n\t\t\t\tvalue={keyValue}\n\t\t\t\tonKeyChange={onKeyChange}\n\t\t\t\tonValueChange={onKeyChange}\n\t\t\t\tisKey={true}\n\t\t\t\tkeyValue={keyValue}\n\t\t\t/>\n\n\t\t\t<Icon\n\t\t\t\ticonName={'Forward'}\n\t\t\t\tstyles={{ root: { marginLeft: 4, marginRight: 4 } }}\n\t\t\t/>\n\n\t\t\t<DataTypeField\n\t\t\t\tplaceholder={'New Value'}\n\t\t\t\tdataType={dataType}\n\t\t\t\tkeyValue={keyValue}\n\t\t\t\tvalue={propertyValue}\n\t\t\t\tonKeyChange={onValueChange}\n\t\t\t\tonValueChange={onValueChange}\n\t\t\t\tisKey={false}\n\t\t\t/>\n\n\t\t\t<IconButton\n\t\t\t\ttitle={'Remove this Recode'}\n\t\t\t\ticonProps={deleteIconProps}\n\t\t\t\tonClick={handleDeleteClick}\n\t\t\t/>\n\t\t</ColumnPairContainer>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\nconst ColumnPairs = styled.div`\n\tmargin-top: 8px;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n`\n\nconst ColumnPairContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\talign-items: center;\n`\n\nconst addIconProps = { iconName: 'Add' }\nconst deleteIconProps = { iconName: 'Delete' }\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { RenameArgs } from '@datashaper/schema'\nimport type { Step } from '@datashaper/workflow'\nimport styled from '@essex/styled-components'\nimport type { IDropdownOption } from '@fluentui/react'\nimport {\n\tActionButton,\n\tIcon,\n\tIconButton,\n\tLabel,\n\tTextField,\n} from '@fluentui/react'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useMemo } from 'react'\n\nimport { TableColumnDropdown } from '../controls/index.js'\nimport {\n\tuseColumnRecordDelete,\n\tuseSimpleDropdownOptions,\n\tuseStepDataTable,\n\tuseTableColumnNames,\n} from '../hooks/index.js'\nimport { narrowerDropdownStyles } from '../styles.js'\nimport type { StepComponentProps } from '../types.js'\nimport {\n\tuseDisabled,\n\tuseHandleAddButtonClick,\n\tuseHandleColumnChange,\n} from './Rename.hooks.js'\n\n/**\n * Provides inputs for a RenameStep.\n */\nexport const Rename: React.FC<StepComponentProps<RenameArgs>> = memo(\n\tfunction Rename({ step, workflow, input, table, onChange }) {\n\t\tconst dataTable = useStepDataTable(step, workflow, input, table)\n\t\tconst handleColumnChange = useHandleColumnChange(step, onChange)\n\t\tconst handleColumnDelete = useColumnRecordDelete(step, onChange)\n\t\tconst handleButtonClick = useHandleAddButtonClick(step, dataTable, onChange)\n\t\tconst columnPairs = useColumnPairs(\n\t\t\tdataTable,\n\t\t\tstep,\n\t\t\thandleColumnChange,\n\t\t\thandleColumnDelete,\n\t\t)\n\t\tconst disabled = useDisabled(step, dataTable)\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Label required>Column renames</Label>\n\t\t\t\t<ColumnPairs>{columnPairs}</ColumnPairs>\n\t\t\t\t<ActionButton\n\t\t\t\t\tonClick={handleButtonClick}\n\t\t\t\t\ticonProps={addIconProps}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t>\n\t\t\t\t\tAdd rename\n\t\t\t\t</ActionButton>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nfunction useColumnPairs(\n\ttable: ColumnTable | undefined,\n\tstep: Step<RenameArgs>,\n\tonChange: (previous: string, oldName: string, newName: string) => void,\n\tonDelete: (name: string) => void,\n) {\n\treturn useMemo(() => {\n\t\tconst { columns } = step.args\n\t\treturn Object.entries(columns || {}).map((column, index) => {\n\t\t\tconst [oldname] = column\n\t\t\treturn (\n\t\t\t\t<ColumnPair\n\t\t\t\t\tkey={`column-rename-${oldname}-${index}`}\n\t\t\t\t\ttable={table}\n\t\t\t\t\tcolumn={column}\n\t\t\t\t\tstep={step}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tonDelete={onDelete}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\t}, [table, step, onChange, onDelete])\n}\n\nconst ColumnPair: React.FC<{\n\ttable: ColumnTable | undefined\n\tcolumn: [string, string]\n\tstep: Step<RenameArgs>\n\tonChange: (previous: string, oldName: string, newName: string) => void\n\tonDelete: (name: string) => void\n}> = memo(function ColumnPair({ table, column, step, onChange, onDelete }) {\n\tconst [oldname, newname] = column\n\tconst columnFilter = (name: string) => {\n\t\tif (name === oldname) {\n\t\t\treturn true\n\t\t}\n\t\tif (step.args.columns && step.args.columns[name]) {\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\tconst handleColumnChange = (\n\t\t_e: React.FormEvent<HTMLDivElement>,\n\t\topt?: IDropdownOption<any> | undefined,\n\t) => onChange(oldname, (opt?.key as string) || oldname, newname)\n\tconst handleTextChange = (\n\t\t_e: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n\t\tnewValue?: string,\n\t) => {\n\t\tonChange(oldname, oldname, newValue ?? '')\n\t}\n\tconst handleDeleteClick = () => onDelete(oldname)\n\tconst columns = useTableColumnNames(table, columnFilter)\n\tconst options = useSimpleDropdownOptions(columns)\n\n\treturn (\n\t\t<ColumnPairContainer>\n\t\t\t<TableColumnDropdown\n\t\t\t\toptions={options}\n\t\t\t\tlabel={undefined}\n\t\t\t\tselectedKey={oldname}\n\t\t\t\tonChange={handleColumnChange}\n\t\t\t\tstyles={narrowerDropdownStyles}\n\t\t\t/>\n\t\t\t<Icon\n\t\t\t\ticonName={'Forward'}\n\t\t\t\tstyles={{ root: { marginLeft: 4, marginRight: 4 } }}\n\t\t\t/>\n\t\t\t<TextField\n\t\t\t\tplaceholder={'New name'}\n\t\t\t\tvalue={newname}\n\t\t\t\tonChange={handleTextChange}\n\t\t\t\tstyles={narrowerDropdownStyles}\n\t\t\t/>\n\t\t\t<IconButton\n\t\t\t\ttitle={'Remove this rename'}\n\t\t\t\ticonProps={deleteIconProps}\n\t\t\t\tonClick={handleDeleteClick}\n\t\t\t/>\n\t\t</ColumnPairContainer>\n\t)\n})\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`\n\nconst ColumnPairs = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n`\n\nconst ColumnPairContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\talign-items: center;\n`\n\nconst addIconProps = { iconName: 'Add' }\nconst deleteIconProps = { iconName: 'Delete' }\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport { Label } from '@fluentui/react'\n\nexport const Container = styled.div`\n\tmargin-top: 8px;\n\tmargin-left: 16px;\n`\n\nexport const Input = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n`\n\nexport const InputLabel = styled.div`\n\twidth: 84px;\n`\n\nexport const OrLabel = styled(Label)`\n\tdisplay: inline;\n\tfont-style: italic;\n\tpadding-left: 10px;\n\tpadding-right: 10px;\n\tborder-left: 1px solid\n\t\t${({ theme }) => theme.application().lowContrast().hex()};\n`\n\nexport const spinStyles = {\n\troot: {\n\t\twidth: 120,\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type {\n\tInputColumnArgs,\n\tInputColumnListArgs,\n\tOutputColumnArgs,\n} from '@datashaper/schema'\nimport {\n\tisInputColumnListStep,\n\tisInputColumnStep,\n\tisInputTableStep,\n\tisOutputColumnStep,\n\tNodeInput,\n} from '@datashaper/workflow'\nimport { Dropdown, TextField } from '@fluentui/react'\nimport { memo } from 'react'\n\nimport { TableColumnDropdown } from '../controls/TableColumnDropdown.js'\nimport { TableDropdown } from '../controls/TableDropdown.js'\nimport { useDataTable } from '../hooks/useDataTable.js'\nimport { useSimpleDropdownOptions } from '../hooks/useSimpleDropdownOptions.js'\nimport { useTableColumnNames } from '../hooks/useTableColumnNames.js'\nimport { useTableDropdownOptions } from '../hooks/useTableDropdownOptions.js'\nimport { dropdownStyles } from '../styles.js'\nimport {\n\tgetSimpleDropdownOptions,\n\tuseColumnFilter,\n\tuseDefaultOutputNameInitially,\n\tuseInputColumnChanged,\n\tuseInputColumnListChanged,\n\tuseInputTableChanged,\n\tuseOutputColumnChanged,\n\tuseOutputTableChanged,\n\tuseStepArgsComponent,\n\tuseStepChangeHandler,\n} from './StepComponent.hooks.js'\nimport { Container } from './StepComponent.styles.js'\nimport type { StepComponentProps } from './StepComponent.types.js'\n\n/**\n * Let's us render the Steps in a loop while memoing all the functions\n */\nexport const StepComponent: React.FC<StepComponentProps> = memo(\n\tfunction StepComponent({\n\t\tstep: s,\n\t\toutput,\n\t\tworkflow: g,\n\t\tindex,\n\t\tinputTableLabel,\n\t\tinputColumnLabel,\n\t\toutputColumnLabel,\n\t\toutputTableLabel,\n\t\toutputTableDisabled,\n\t\tonChange,\n\t\tonChangeOutput: changeOutput,\n\t\thideInput,\n\t\thideInputColumn,\n\t\thideOutput,\n\t}) {\n\t\t/* Current Table Selection */\n\t\tconst tableId = s.input[NodeInput.Source]?.node\n\t\tconst table = useDataTable(tableId, g)\n\n\t\t/* Table Options */\n\t\tconst tableOptions = useTableDropdownOptions(g)\n\t\t/* Column Options */\n\t\tconst columns = useTableColumnNames(table, useColumnFilter(s, table))\n\t\tconst columnOptions = useSimpleDropdownOptions(columns)\n\n\t\t/* The step args component */\n\t\tconst StepArgs = useStepArgsComponent(s)\n\n\t\t/* Change Events */\n\t\tconst change = useStepChangeHandler(index, onChange)\n\t\tconst onInputTableChange = useInputTableChanged(s, g, change)\n\t\tconst onInputColumnChange = useInputColumnChanged(s, change, table)\n\t\tconst onInputColumnListChange = useInputColumnListChanged(s, change)\n\t\tconst onOutputColumnChange = useOutputColumnChanged(s, change)\n\t\tconst onOutputTableChange = useOutputTableChanged(s, changeOutput, change)\n\n\t\t/* Side Effects */\n\t\tuseDefaultOutputNameInitially(s, output, changeOutput)\n\n\t\treturn StepArgs == null ? null : (\n\t\t\t<Container className=\"step-component\">\n\t\t\t\t{/* Input Table */}\n\t\t\t\t{!hideInput && isInputTableStep(s) ? (\n\t\t\t\t\t<TableDropdown\n\t\t\t\t\t\trequired\n\t\t\t\t\t\toptions={tableOptions}\n\t\t\t\t\t\tlabel={inputTableLabel || 'Input table'}\n\t\t\t\t\t\tselectedKey={tableId ?? null}\n\t\t\t\t\t\tonChange={onInputTableChange}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t{/* Input Column List */}\n\t\t\t\t{isInputColumnListStep(s) ? (\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\tlabel={'Columns'}\n\t\t\t\t\t\tplaceholder={'Choose columns'}\n\t\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\t\tselectedKeys={(s.args as InputColumnListArgs).columns}\n\t\t\t\t\t\toptions={getSimpleDropdownOptions(columns)}\n\t\t\t\t\t\tonChange={onInputColumnListChange}\n\t\t\t\t\t\tmultiSelect\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t{/* Input Column */}\n\t\t\t\t{!hideInputColumn && isInputColumnStep(s) ? (\n\t\t\t\t\t<TableColumnDropdown\n\t\t\t\t\t\trequired\n\t\t\t\t\t\toptions={columnOptions}\n\t\t\t\t\t\tlabel={inputColumnLabel || `Column to ${s.verb}`}\n\t\t\t\t\t\tselectedKey={(s.args as InputColumnArgs).column}\n\t\t\t\t\t\tonChange={onInputColumnChange}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t<StepArgs\n\t\t\t\t\tstep={s}\n\t\t\t\t\tworkflow={g}\n\t\t\t\t\toutput={output}\n\t\t\t\t\tonChangeOutput={changeOutput}\n\t\t\t\t\tonChange={change}\n\t\t\t\t/>\n\n\t\t\t\t{/* Output Column */}\n\t\t\t\t{isOutputColumnStep(s) ? (\n\t\t\t\t\t<TextField\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tlabel={outputColumnLabel || 'New column name'}\n\t\t\t\t\t\tplaceholder={'Column name'}\n\t\t\t\t\t\tvalue={(s.args as OutputColumnArgs).to}\n\t\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\t\tonChange={onOutputColumnChange}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t{/* Output Table */}\n\t\t\t\t{!hideOutput && (\n\t\t\t\t\t<TextField\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tdisabled={outputTableDisabled}\n\t\t\t\t\t\tlabel={outputTableLabel || 'Output table'}\n\t\t\t\t\t\tplaceholder={'Table name'}\n\t\t\t\t\t\tvalue={output ?? s.id}\n\t\t\t\t\t\tstyles={dropdownStyles}\n\t\t\t\t\t\tonChange={onOutputTableChange}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n`\n\nexport const SearchContainer = styled.div`\n\tborder-bottom: 1px solid\n\t\t${({ theme }) => theme.application().lowContrast().hex()};\n`\n\nexport const icons = {\n\tadd: { iconName: 'Add' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport styled from '@essex/styled-components'\nimport type { IButtonStyles } from '@fluentui/react'\n\nexport const icons = {\n\tinfo: { iconName: 'Info' },\n\tcheckMark: { iconName: 'CheckMark' },\n\tpreview: { iconName: 'View' },\n\tduplicate: { iconName: 'DuplicateRow' },\n\tdelete: { iconName: 'Delete' },\n}\n\nexport const Container = styled.div`\n\tposition: relative;\n`\n\nexport const StepSelectorContainer = styled.div`\n\tmargin-bottom: 8px;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n\nexport const ButtonContainer = styled.div`\n\tmargin-top: 10px;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\tgap: 0.5rem;\n\twidth: 100%;\n`\n\nexport const SaveButtonWrapper = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tgap: 0.5rem;\n`\n\nexport const Flex = styled.div`\n\talign-items: center;\n\tdisplay: flex;\n`\n\nexport const rightButtonStyles: IButtonStyles = {\n\troot: {\n\t\tposition: 'absolute',\n\t\tright: '1rem',\n\t},\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport styled from '@essex/styled-components'\n\nexport const icons = {\n\tcancel: { iconName: 'Cancel' },\n}\n\nconst MAX_HEIGHT = 700\n\nexport const ContainerBody = styled.div`\n\tpadding: 0px 12px 14px 24px;\n\tdisplay: flex;\n\tjustify-content: flex-start;\n`\n\nexport const Header = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tbackground: ${({ theme }) => theme.application().faint().hex()};\n\tmargin-bottom: 12px;\n`\n\nexport const Title = styled.h3`\n\tpadding-left: 12px;\n\tmargin: 8px 0 8px 0;\n`\n\nexport const StepComponentContainer = styled.div`\n\twidth: 300px;\n\tmax-height: ${MAX_HEIGHT}px;\n\toverflow: hidden auto;\n`\n\nexport const GuidanceContainer = styled.div`\n\twidth: 400px;\n\tmax-height: ${MAX_HEIGHT - 20}px;\n\toverflow: hidden auto;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Verb } from '@datashaper/schema'\nimport { default as guidanceIndex } from '@datashaper/verb-guidance'\nimport type { Maybe } from '@datashaper/workflow'\nimport { Callout, DirectionalHint, IconButton } from '@fluentui/react'\nimport { useBoolean } from '@fluentui/react-hooks'\nimport { useThematic } from '@thematic/react'\nimport { memo, useState } from 'react'\n\nimport { Guidance } from './Guidance.js'\nimport { TableTransform } from './TableTransform.js'\nimport {\n\tContainerBody,\n\tGuidanceContainer,\n\tHeader,\n\ticons,\n\tStepComponentContainer,\n\tTitle,\n} from './TableTransformModal.styles.js'\nimport type { TransformModalProps } from './TableTransformModal.types.js'\nimport { getModalStyles } from './TableTransformModal.utils.js'\n\nexport const TableTransformModal: React.FC<TransformModalProps> = memo(\n\tfunction TableTransformModal({\n\t\tonDismiss,\n\t\tworkflow,\n\t\tonTransformRequested,\n\t\tindex,\n\t\tstep,\n\t\tstyles,\n\t\t...props\n\t}) {\n\t\tconst theme = useThematic()\n\t\tconst [verb, setVerb] = useState<Maybe<Verb>>(step?.verb)\n\t\tconst [showGuidance, { toggle: toggleGuidance }] = useBoolean(false)\n\t\tconst adaptedStyles = getModalStyles(theme, styles)\n\n\t\treturn (\n\t\t\t<Callout\n\t\t\t\tstyles={adaptedStyles}\n\t\t\t\tdirectionalHint={DirectionalHint.rightBottomEdge}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<Header>\n\t\t\t\t\t<Title>\n\t\t\t\t\t\t{step\n\t\t\t\t\t\t\t? `${step.verb.toUpperCase()} ${\n\t\t\t\t\t\t\t\t\t(step.args as any).column\n\t\t\t\t\t\t\t\t\t\t? `${(step.args as any).column}`\n\t\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t  }`\n\t\t\t\t\t\t\t: 'New step'}\n\t\t\t\t\t</Title>\n\t\t\t\t\t{onDismiss && (\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\ticonProps={icons.cancel}\n\t\t\t\t\t\t\tariaLabel=\"Close popup modal\"\n\t\t\t\t\t\t\tonClick={() => onDismiss()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</Header>\n\t\t\t\t<ContainerBody>\n\t\t\t\t\t<StepComponentContainer>\n\t\t\t\t\t\t<TableTransform\n\t\t\t\t\t\t\thideInput={props.hideInput}\n\t\t\t\t\t\t\thideOutput={props.hideOutput}\n\t\t\t\t\t\t\thideStepSelector={props.hideInput && props.hideOutput}\n\t\t\t\t\t\t\thideInputColumn={props.hideInput && props.hideOutput}\n\t\t\t\t\t\t\tworkflow={workflow}\n\t\t\t\t\t\t\tonTransformRequested={onTransformRequested}\n\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\t\tshowGuidance={showGuidance}\n\t\t\t\t\t\t\ttoggleGuidance={toggleGuidance}\n\t\t\t\t\t\t\tonVerbChange={setVerb}\n\t\t\t\t\t\t\tshowGuidanceButton\n\t\t\t\t\t\t/>\n\t\t\t\t\t</StepComponentContainer>\n\t\t\t\t\t{showGuidance && verb ? (\n\t\t\t\t\t\t<GuidanceContainer>\n\t\t\t\t\t\t\t<Guidance name={verb} index={guidanceIndex} />\n\t\t\t\t\t\t</GuidanceContainer>\n\t\t\t\t\t) : null}\n\t\t\t\t</ContainerBody>\n\t\t\t</Callout>\n\t\t)\n\t},\n)\n","export var SELECTION_CHANGE = 'change';\nexport var SELECTION_ITEMS_CHANGE = 'items-change';\n/**\n * {@docCategory Selection}\n */\nexport var SelectionMode;\n(function (SelectionMode) {\n    SelectionMode[SelectionMode[\"none\"] = 0] = \"none\";\n    SelectionMode[SelectionMode[\"single\"] = 1] = \"single\";\n    SelectionMode[SelectionMode[\"multiple\"] = 2] = \"multiple\";\n})(SelectionMode || (SelectionMode = {}));\n/**\n * {@docCategory Selection}\n */\nexport var SelectionDirection;\n(function (SelectionDirection) {\n    SelectionDirection[SelectionDirection[\"horizontal\"] = 0] = \"horizontal\";\n    SelectionDirection[SelectionDirection[\"vertical\"] = 1] = \"vertical\";\n})(SelectionDirection || (SelectionDirection = {}));\n//# sourceMappingURL=Selection.types.js.map","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\nimport type { IDetailsColumnProps, IRenderFunction } from '@fluentui/react'\nimport { memo } from 'react'\n\ninterface CommandBarContainerProps {\n\tprops: IDetailsColumnProps\n\trenderers: IRenderFunction<IDetailsColumnProps>[]\n}\n\nexport const CommandBarContainer: React.FC<CommandBarContainerProps> = memo(\n\tfunction CommandBarContainer({ props, renderers }) {\n\t\treturn (\n\t\t\t<Container className=\"header-command-bar\">\n\t\t\t\t{renderers.map((renderer, i) => (\n\t\t\t\t\t<Command key={i}>{renderer(props)}</Command>\n\t\t\t\t))}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Command = styled.div``\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\tborder-top: 1px solid ${({ theme }) => theme.application().faint().hex()};\n\tborder-bottom: 1px solid ${({ theme }) => theme.application().faint().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { IColumn } from '@fluentui/react'\nimport { useMemo } from 'react'\n\nimport type { Dimensions } from '../renderers/types.js'\n\nexport function useCellDimensions(\n\tcolumn?: IColumn,\n\tconsiderCompactMode = true,\n): Dimensions {\n\treturn useMemo(\n\t\t() => ({\n\t\t\twidth: column?.currentWidth || 0,\n\t\t\theight:\n\t\t\t\tcolumn?.data?.compact && considerCompactMode ? COMPACT_HEIGHT : HEIGHT,\n\t\t}),\n\t\t[column, considerCompactMode],\n\t)\n}\n\nconst COMPACT_HEIGHT = 15\nconst HEIGHT = 20\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { useThematic } from '@thematic/react'\nimport { memo, useMemo } from 'react'\n\nimport type { FormattedCellProps } from './types.js'\n\n/**\n * Standard rendering of Empty values.\n */\nexport const EmptyCell: React.FC<FormattedCellProps> = memo(function EmptyCell({\n\ttextAlign,\n}) {\n\tconst theme = useThematic()\n\tconst style = useMemo(\n\t\t() => ({\n\t\t\twidth: '100%',\n\t\t\ttextAlign,\n\t\t\tcolor: theme.application().lowContrast().hex(),\n\t\t}),\n\t\t[theme, textAlign],\n\t)\n\treturn <div style={style}>&mdash;</div>\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport styled from '@essex/styled-components'\nimport { IconButton } from '@fluentui/react'\n\nexport const HeaderContainer = styled.div<{ groupLevel: number }>`\n\tpadding-left: ${({ groupLevel }) => `${groupLevel * 12}px`};\n\tdisplay: flex;\n\tgap: 8px;\n`\n\nexport const LevelButton = styled(IconButton as any)`\n\twidth: 5%;\n`\n\nexport const HeaderDetailsText = styled.span`\n\talign-self: center;\n`\n\nexport const Bold = styled.b``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport styled from '@essex/styled-components'\nimport type { IColumn, IDetailsListStyles } from '@fluentui/react'\nimport {\n\tConstrainMode,\n\tDetailsList,\n\tDetailsListLayoutMode,\n\tSelectionMode,\n} from '@fluentui/react'\nimport type { RowObject } from 'arquero/dist/types/table/table'\nimport { memo, useCallback, useEffect, useMemo, useState } from 'react'\n\nimport type { ArqueroDetailsListProps } from './ArqueroDetailsList.types.js'\nimport { debounceFn, groupBuilder } from './ArqueroDetailsList.utils.js'\nimport {\n\tuseColumns,\n\tuseDetailsHeaderRenderer,\n\tuseDetailsListStyles,\n\tuseGroupHeaderRenderer,\n\tuseSlicedTable,\n\tuseSortedGroups,\n\tuseSortedTable,\n\tuseSortHandling,\n\tuseStripedRowsRenderer,\n\tuseSubsetTable,\n} from './hooks/index.js'\n\n/**\n * Renders an arquero table using a fluent DetailsList.\n */\nexport const ArqueroDetailsList: React.FC<ArqueroDetailsListProps> = memo(\n\tfunction ArqueroDetailsList({\n\t\ttable,\n\t\tfeatures = {},\n\t\tmetadata,\n\t\toffset = 0,\n\t\tlimit = Infinity,\n\t\tsortable = false,\n\t\tstriped = false,\n\t\tclickableColumns = false,\n\t\tshowColumnBorders = false,\n\t\tselectedColumn,\n\t\tonColumnClick,\n\t\tonCellDropdownSelect,\n\t\tonRenderGroupHeader,\n\t\t// extract props we want to set data-centric defaults for\n\t\tselectionMode = SelectionMode.none,\n\t\tlayoutMode = DetailsListLayoutMode.fixedColumns,\n\t\tcolumns,\n\t\tonColumnHeaderClick,\n\t\tstyles,\n\t\tdefaultSortColumn,\n\t\tdefaultSortDirection,\n\t\tisHeaderFixed = false,\n\t\tcompact = false,\n\t\tresizable = true,\n\t\t// passthrough the remainder as props\n\t\t...props\n\t}) {\n\t\tconst [version, setVersion] = useState(0)\n\t\tconst { sortColumn, sortDirection, handleColumnHeaderClick } =\n\t\t\tuseSortHandling(\n\t\t\t\tsortable,\n\t\t\t\tonColumnHeaderClick,\n\t\t\t\tdefaultSortColumn,\n\t\t\t\tdefaultSortDirection,\n\t\t\t)\n\n\t\t// first subset the table using the visible columns\n\t\t// this will prevent any further operations on columns we aren't going to show\n\t\tconst subset = useSubsetTable(table, columns)\n\t\t// sort the table internally\n\t\t// note that this is different than the orderby of a pipeline step\n\t\t// this is a temporary sort only for the table display\n\t\tconst sorted = useSortedTable(subset, sortColumn, sortDirection)\n\t\t// slice any potential page\n\t\tconst sliced = useSlicedTable(sorted, offset, limit)\n\t\t// last, copy these items to actual JS objects for the DetailsList\n\t\tconst items = useMemo(() => sliced.objects(), [sliced])\n\n\t\t// if the table is grouped, groups the information in a way we can iterate\n\t\tconst groupedEntries = useMemo(\n\t\t\t() =>\n\t\t\t\ttable.isGrouped() ? sliced.objects({ grouped: 'entries' }) : undefined,\n\t\t\t[sliced, table],\n\t\t)\n\n\t\t// sorts first level group headers\n\t\tconst sortedGroups = useSortedGroups(\n\t\t\ttable,\n\t\t\tsortColumn,\n\t\t\tsortDirection,\n\t\t\tgroupedEntries,\n\t\t)\n\n\t\tconst isDefaultHeaderClickable = useMemo((): any => {\n\t\t\treturn sortable || clickableColumns || !!onColumnHeaderClick\n\t\t}, [sortable, clickableColumns, onColumnHeaderClick])\n\n\t\tconst onColumnResize = useCallback(\n\t\t\t(column: IColumn | undefined, newWidth: number | undefined) => {\n\t\t\t\tconst set = () => setVersion(prev => prev + 1)\n\t\t\t\tif (column?.currentWidth !== newWidth) {\n\t\t\t\t\tdebounceFn(set)\n\t\t\t\t}\n\t\t\t},\n\t\t\t[setVersion],\n\t\t)\n\n\t\tconst displayColumns = useColumns(\n\t\t\ttable,\n\t\t\tmetadata,\n\t\t\tcolumns,\n\t\t\thandleColumnHeaderClick,\n\t\t\t{\n\t\t\t\tfeatures,\n\t\t\t\tsortColumn,\n\t\t\t\tsortDirection,\n\t\t\t\tselectedColumn,\n\t\t\t\tonColumnClick,\n\t\t\t\tonCellDropdownSelect,\n\t\t\t\tisDefaultHeaderClickable,\n\t\t\t\tisClickable: clickableColumns,\n\t\t\t\tshowColumnBorders,\n\t\t\t\tcompact,\n\t\t\t\tresizable,\n\t\t\t},\n\t\t)\n\n\t\tconst headerStyle = useDetailsListStyles(\n\t\t\tisHeaderFixed,\n\t\t\tfeatures,\n\t\t\tstyles as IDetailsListStyles,\n\t\t\t!!onColumnClick,\n\t\t\tcompact,\n\t\t)\n\n\t\tconst renderRow = useStripedRowsRenderer(striped, showColumnBorders)\n\t\tconst renderDetailsHeader = useDetailsHeaderRenderer()\n\t\tconst renderGroupHeader = useGroupHeaderRenderer(\n\t\t\ttable,\n\t\t\tmetadata,\n\t\t\tonRenderGroupHeader,\n\t\t\tfeatures.lazyLoadGroups,\n\t\t)\n\n\t\tconst groups = useMemo(() => {\n\t\t\tif (!sliced.isGrouped()) {\n\t\t\t\treturn undefined\n\t\t\t}\n\n\t\t\tconst existingGroups = sliced.groups()\n\t\t\tconst totalLevelCount = existingGroups.names.length\n\n\t\t\treturn sortedGroups?.map((row: RowObject) => {\n\t\t\t\tconst initialLevel = 0\n\t\t\t\treturn groupBuilder(\n\t\t\t\t\trow,\n\t\t\t\t\texistingGroups,\n\t\t\t\t\tinitialLevel,\n\t\t\t\t\ttotalLevelCount,\n\t\t\t\t\titems,\n\t\t\t\t\tsortDirection,\n\t\t\t\t\tfeatures.lazyLoadGroups,\n\t\t\t\t\tsortColumn,\n\t\t\t\t)\n\t\t\t})\n\t\t}, [sliced, sortedGroups, items, sortColumn, sortDirection, features])\n\t\t// as in FluentUI documentation, when updating item we can update the list items with a spread operator.\n\t\t// since when adding a new column we're changing the columns prop too, this approach doesn't work for that.\n\t\t// a workaround found in the issues suggest to use this version property to use as comparison to force re-render\n\t\tuseEffect(() => {\n\t\t\tsetVersion(prev => prev + 1)\n\t\t}, [columns, table, compact])\n\n\t\treturn (\n\t\t\t<DetailsWrapper data-is-scrollable=\"true\">\n\t\t\t\t<DetailsList\n\t\t\t\t\titems={[...items]}\n\t\t\t\t\tselectionMode={selectionMode}\n\t\t\t\t\tlayoutMode={layoutMode}\n\t\t\t\t\tgroups={groups}\n\t\t\t\t\tgetKey={(_: any, index?: number) => {\n\t\t\t\t\t\treturn (index as number).toString()\n\t\t\t\t\t}} //To be sure that every key is unique\n\t\t\t\t\tgroupProps={{\n\t\t\t\t\t\tonRenderHeader: renderGroupHeader,\n\t\t\t\t\t}}\n\t\t\t\t\tcolumns={displayColumns}\n\t\t\t\t\tconstrainMode={ConstrainMode.unconstrained}\n\t\t\t\t\tonRenderRow={renderRow}\n\t\t\t\t\tonRenderDetailsHeader={renderDetailsHeader}\n\t\t\t\t\tonColumnResize={onColumnResize}\n\t\t\t\t\tcompact={compact}\n\t\t\t\t\t{...props}\n\t\t\t\t\tlistProps={{\n\t\t\t\t\t\tversion,\n\t\t\t\t\t}}\n\t\t\t\t\tstyles={headerStyle}\n\t\t\t\t/>\n\t\t\t</DetailsWrapper>\n\t\t)\n\t},\n)\n\nconst DetailsWrapper = styled.div`\n\theight: inherit;\n\tposition: relative;\n\tmax-height: inherit;\n\toverflow-y: auto;\n\toverflow-x: auto;\n\n\tspan.ms-DetailsHeader-cellTitle {\n\t\tbackground-color: ${({ theme }) =>\n\t\t\ttheme.application?.().background().hex()};\n\t}\n\n\t.ms-List-cell {\n\t\tmin-height: unset;\n\t}\n\n\t.ms-CommandBar {\n\t\tpadding: unset;\n\t}\n\n\t.ms-OverflowSet {\n\t\tjustify-content: center;\n\t}\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport styled from 'styled-components'\n\nexport const icons = {\n\tcancel: { iconName: 'Cancel' },\n}\n\nexport const Aside = styled.div<{ isCollapsed: boolean }>`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\theight: 100%;\n\toverflow: hidden;\n\tbox-shadow: ${({ isCollapsed, theme }) =>\n\t\tisCollapsed\n\t\t\t? 'none'\n\t\t\t: `-1px 0px 10px 0px ${theme.application().lowMidContrast().hex()}`};\n`\n\nexport const AsideHeader = styled.div<{ isCollapsed: boolean }>`\n\twidth: 100%;\n\tgap: ${({ isCollapsed }) => (isCollapsed ? 0 : '0.5rem')};\n\tdisplay: flex;\n\talign-items: center;\n\tpadding: 0.5rem 0;\n\tmargin-left: ${({ isCollapsed }) => (isCollapsed ? '0' : '0.5rem')};\n`\n\nexport const Title = styled.span<{ isCollapsed: boolean }>`\n\twidth: 100%;\n\tfont-weight: 500;\n\tbackground-color: ${({ theme }) => theme.application().background().hex()};\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n\tfont-size: 1.2rem;\n\ttext-align: left;\n\tpadding: 0;\n\tmargin: 0;\n\tdisplay: ${({ isCollapsed }) => (isCollapsed ? 'none' : 'block')};\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n\nexport const WorkflowContainer = styled.div<{ isCollapsed: boolean }>`\n\theight: 100%;\n\twidth: 100%;\n\tposition: relative;\n\tvisibility: ${({ isCollapsed }) => (isCollapsed ? 'hidden' : 'visible')};\n`\n\nexport const DetailsListContainer = styled.div`\n\toverflow: auto;\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n\tborder: 1px solid ${({ theme }) => theme.application().faint().hex()};\n`\n\nexport const Container = styled.div<{ isCollapsed: boolean }>`\n\theight: 100%;\n\tdisplay: grid;\n\tgrid-template-columns: ${({ isCollapsed }) =>\n\t\tisCollapsed ? '100% 0' : '70% 30%'};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { IconButton } from '@fluentui/react'\nimport { useThematic } from '@thematic/react'\nimport { memo } from 'react'\n\nimport { HistoryIcon } from './CustomIcons.js'\nimport {\n\tAside,\n\tAsideHeader,\n\ticons,\n\tTitle,\n\tWorkflowContainer,\n} from './HistoryPanel.styles.js'\nimport type { HistoryPanelProps } from './HistoryPanel.types.js'\n\nexport const HistoryPanel: React.FC<HistoryPanelProps> = memo(\n\tfunction HistoryPanel({\n\t\tisCollapsed,\n\t\ttoggleCollapsed,\n\t\ttitle = 'History',\n\t\tshowStepCount,\n\t\tsteps,\n\t\ttitleStyle,\n\t\tchildren,\n\t}) {\n\t\tconst theme = useThematic()\n\n\t\treturn (\n\t\t\t<Aside isCollapsed={isCollapsed}>\n\t\t\t\t<AsideHeader isCollapsed={isCollapsed}>\n\t\t\t\t\t<HistoryIcon color={theme.application().accent().hex()} />\n\t\t\t\t\t<Title style={titleStyle} isCollapsed={isCollapsed}>\n\t\t\t\t\t\t{title} {showStepCount ? `(${steps?.length})` : null}\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\ticonProps={icons.cancel}\n\t\t\t\t\t\t\tonClick={toggleCollapsed}\n\t\t\t\t\t\t\tariaLabel=\"Close\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Title>\n\t\t\t\t</AsideHeader>\n\t\t\t\t<WorkflowContainer isCollapsed={isCollapsed}>\n\t\t\t\t\t{children}\n\t\t\t\t</WorkflowContainer>\n\t\t\t</Aside>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const addButtonStyles = {\n\troot: {\n\t\tpadding: '0 4px 0 6px',\n\t\twhiteSpace: 'nowrap',\n\t\twidth: '90%',\n\t\tmargin: '0 5%',\n\t},\n}\n\nexport const icons = {\n\tadd: { iconName: 'Add' },\n\tchevronRight: { iconName: 'ChevronRight' },\n\tchevronDown: { iconName: 'ChevronDown' },\n}\n\nexport const Container = styled.div`\n\toverflow: hidden;\n\tpadding: 0.1rem;\n\theight: 100%;\n\tdisplay: grid;\n\tgrid-template-rows: calc(100% - 4rem) 4rem;\n\twidth: 100%;\n\tborder-top: 1px solid ${({ theme }) => theme.application().border().hex()};\n\n\t> div {\n\t\toverflow: hidden auto;\n\t\theight: 100%;\n\t}\n`\n\nexport const ButtonContainer = styled.section`\n\tdisplay: flex;\n\talign-items: flex-end;\n\tgap: 18px;\n`\nexport const PanelHeader = styled.div`\n\tfont-weight: 500;\n\tdisplay: flex;\n\tgap: 0.5rem;\n\twidth: 100%;\n`\nexport const Verb = styled.b`\n\ttext-transform: uppercase;\n`\n\nexport const Columns = styled.span`\n\ttext-overflow: ellipsis;\n\twhite-space: nowrap;\n\toverflow: hidden;\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n`\n\nexport const tableTransformStyle: React.CSSProperties = {\n\tpadding: '1rem 0.5rem',\n\tdisplay: 'flex',\n\talignItems: 'center',\n\tflexDirection: 'column',\n\toverflow: 'auto',\n\tborder: 'none',\n\twidth: 'auto',\n}\n\nexport const ListWrapper = styled.div`\n\toverflow: hidden auto;\n\tborder-bottom: ${({ theme }) => theme.application().border().hex()};\n`\n\nexport const StepIndex = styled.span`\n\tcolor: ${({ theme }) => theme.application().lowContrast().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport type { Step } from '@datashaper/workflow'\nimport {\n\tCollapsiblePanel,\n\tCollapsiblePanelContainer,\n\tDialogConfirm,\n} from '@essex/themed-components'\nimport { useThematic } from '@thematic/react'\nimport { memo, useEffect, useRef } from 'react'\n\nimport { useWorkflowSteps } from '../hooks/useWorkflowSteps.js'\nimport { useDeleteConfirm } from './StepHistoryList.hooks.js'\nimport {\n\tColumns,\n\tContainer,\n\tListWrapper,\n\tPanelHeader,\n\tStepIndex,\n\ttableTransformStyle,\n\tVerb,\n} from './StepHistoryList.styles.js'\nimport type { StepHistoryListProps } from './StepHistoryList.types.js'\nimport { getCollapsiblePanelStyles } from './StepHistoryList.utils.js'\nimport { TableTransform } from './TableTransform.js'\n\nexport const StepHistoryList: React.FC<StepHistoryListProps> = memo(\n\tfunction StepsList({\n\t\tonDelete,\n\t\tonDuplicateClicked,\n\t\tonSelect,\n\t\tworkflow,\n\t\tonSave,\n\t\torder,\n\t}) {\n\t\tconst ref = useRef<HTMLDivElement>(null)\n\t\tconst theme = useThematic()\n\t\tconst steps = useWorkflowSteps(workflow, order)\n\t\tconst collapsiblePanelStyles = getCollapsiblePanelStyles(theme)\n\t\tconst {\n\t\t\tonClick: onDeleteClicked,\n\t\t\tonConfirm: onConfirmDelete,\n\t\t\ttoggle: toggleDeleteModal,\n\t\t\tisOpen: isDeleteModalOpen,\n\t\t} = useDeleteConfirm(onDelete)\n\n\t\tuseEffect(() => {\n\t\t\tconst f = () => {\n\t\t\t\tref?.current?.scrollIntoView(false)\n\t\t\t}\n\t\t\tf()\n\t\t}, [steps])\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<CollapsiblePanelContainer>\n\t\t\t\t\t<DialogConfirm\n\t\t\t\t\t\ttoggle={toggleDeleteModal}\n\t\t\t\t\t\ttitle=\"Are you sure you want to delete this step?\"\n\t\t\t\t\t\tsubText={\n\t\t\t\t\t\t\t'You will also lose any table transformations made after this step.'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tshow={isDeleteModalOpen}\n\t\t\t\t\t\tonConfirm={onConfirmDelete}\n\t\t\t\t\t/>\n\t\t\t\t\t{steps.map(step => {\n\t\t\t\t\t\tconst stepIndex = workflow.steps.findIndex(s => s.id === step.id)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<CollapsiblePanel\n\t\t\t\t\t\t\t\tkey={stepIndex}\n\t\t\t\t\t\t\t\tstyles={collapsiblePanelStyles}\n\t\t\t\t\t\t\t\tonRenderHeader={() => onRenderHeader(step, stepIndex)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ListWrapper>\n\t\t\t\t\t\t\t\t\t<TableTransform\n\t\t\t\t\t\t\t\t\t\thideInput\n\t\t\t\t\t\t\t\t\t\thideOutput\n\t\t\t\t\t\t\t\t\t\tkey={stepIndex}\n\t\t\t\t\t\t\t\t\t\tstep={step}\n\t\t\t\t\t\t\t\t\t\tindex={stepIndex}\n\t\t\t\t\t\t\t\t\t\tworkflow={workflow}\n\t\t\t\t\t\t\t\t\t\tstyle={tableTransformStyle}\n\t\t\t\t\t\t\t\t\t\tonDelete={onDeleteClicked}\n\t\t\t\t\t\t\t\t\t\tonPreview={onSelect}\n\t\t\t\t\t\t\t\t\t\tonDuplicate={onDuplicateClicked}\n\t\t\t\t\t\t\t\t\t\tonTransformRequested={(s, o) => onSave?.(s, o, stepIndex)}\n\t\t\t\t\t\t\t\t\t\thideStepSelector\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ListWrapper>\n\t\t\t\t\t\t\t</CollapsiblePanel>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</CollapsiblePanelContainer>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nfunction onRenderHeader(step: Step, index: number): JSX.Element {\n\tconst { args } = step\n\tconst columnList: any = (args as any).columns ||\n\t\t(args as any).on || [(args as any).column]\n\tlet columns = ''\n\ttry {\n\t\tif (Array.isArray(columnList)) {\n\t\t\tcolumns = columnList.join(', ')\n\t\t} else if (typeof columnList === 'object') {\n\t\t\tcolumns = Object.values(columnList)?.join(', ')\n\t\t}\n\t} catch {\n\t\tconsole.error(\n\t\t\t'ColumnList type is not being currently supported',\n\t\t\ttypeof columnList,\n\t\t)\n\t}\n\n\treturn (\n\t\t<PanelHeader>\n\t\t\t<Verb>\n\t\t\t\t<StepIndex>#{index + 1}</StepIndex> {step.verb}\n\t\t\t</Verb>\n\t\t\t<Columns>{columns}</Columns>\n\t\t</PanelHeader>\n\t)\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const Text = styled.div`\n\tcolor: ${({ theme }) => theme.application?.().midContrast().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { memo } from 'react'\n\nimport { Text } from './DetailText.styles.js'\nimport type { DetailTextProps } from './DetailText.types.js'\n\nexport const DetailText: React.FC<DetailTextProps> = memo(function DetailText({\n\ttext,\n\tstyle,\n}) {\n\treturn <Text style={style}>{text}</Text>\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from '@essex/styled-components'\n\nexport const ListContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\talign-items: center;\n\twidth: 100%;\n\tgap: 18px;\n`\n\nexport const viewButtonStyles = { root: { padding: '0 4px 0 6px' } }\n\nexport const icons = {\n\tview: { iconName: 'View' },\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nconst GAP = 18\nconst INPUT_HEIGHT = 60\n\nexport const PageContainer = styled.div`\n\theight: calc(100vh - 80px);\n\tposition: relative;\n`\nexport const mgmtStyles = {\n\troot: {\n\t\theight: 36,\n\t},\n}\n\nexport const Main = styled.div`\n\tdisplay: flex;\n\tflex-flow: column;\n\theight: 100%;\n\twidth: 100%;\n\tgap: ${GAP}px;\n\tposition: relative;\n`\n\nexport const ButtonContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: end;\n\tpadding: 0px ${GAP}px;\n`\n\nexport const DetailsListContainer = styled.div`\n\toverflow: auto;\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n\tborder: 1px solid ${({ theme }) => theme.application().faint().hex()};\n`\n\nexport const OutputContainer = styled.div`\n\tflex: 1 1 auto;\n\tdisplay: flex;\n\tpadding: 0px ${GAP}px;\n\tmax-height: calc(100% - ${INPUT_HEIGHT + GAP * 4}px);\n`\n\nexport const PrepareDataContainer = styled.div`\n\theight: 90%;\n\toverflow: hidden;\n`\n\nexport const Container = styled.div<{ isCollapsed: boolean }>`\n\theight: 100%;\n\tdisplay: grid;\n\tgrid-template-columns: ${({ isCollapsed }) =>\n\t\tisCollapsed ? '100% 0' : 'calc(100% - 280px) 280px '};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport {\n\tArqueroDetailsList,\n\tArqueroTableHeader,\n\tHistoryButton,\n\tHistoryPanel,\n\tProjectMgmtCommandBar,\n\tStepHistoryList,\n\tTableCommands,\n\tuseOnCreateStep,\n\tuseOnDeleteStep,\n\tuseOnSaveStep,\n\tuseWorkflow,\n\tuseWorkflowListener,\n\tuseWorkflowOutputListener,\n} from '@datashaper/react'\nimport { TableListBar } from '@datashaper/react/src/components/TableListBar.js'\nimport { useInputTableNames } from '@datashaper/react/src/hooks/useTableDropdownOptions.js'\nimport type { TableContainer } from '@datashaper/tables'\nimport { Workflow } from '@datashaper/workflow'\nimport type { IColumn } from '@fluentui/react'\nimport { useBoolean } from '@fluentui/react-hooks'\nimport upperFirst from 'lodash-es/upperFirst.js'\nimport { memo, useCallback, useMemo, useState } from 'react'\n\nimport { useStepListener, useTables } from './PrepareDataPage.hooks.js'\nimport {\n\tButtonContainer,\n\tContainer,\n\tDetailsListContainer,\n\tMain,\n\tmgmtStyles,\n\tOutputContainer,\n\tPageContainer,\n\tPrepareDataContainer,\n} from './PrepareDataPage.styles.js'\n\nexport const PrepareDataPage: React.FC = memo(function PrepareDataPage() {\n\tconst [isCollapsed, { toggle: toggleCollapsed }] = useBoolean(true)\n\tconst [selectedTableId, setSelectedTableId] = useState<string | undefined>()\n\n\tconst { tables: inputs, onAddTables: onAddInputTables } =\n\t\tuseTables(setSelectedTableId)\n\tconst [outputs, setOutputs] = useState<TableContainer[]>([])\n\n\t// state for the input tables\n\tconst [wf, setWorkflow] = useState<Workflow>(new Workflow())\n\t// workflow steps/output\n\tconst workflow = useWorkflow(wf, inputs)\n\n\tconst selectedTable = inputs\n\t\t.concat(outputs)\n\t\t.find(x => x.id === selectedTableId)\n\n\tconst onSave = useOnSaveStep(workflow)\n\tconst onCreate = useOnCreateStep(onSave, setSelectedTableId)\n\tconst inputNames = useInputTableNames(workflow)\n\n\tconst tableName = useMemo(() => {\n\t\tconst stepIndex = workflow.steps.findIndex(x => x.id === selectedTableId)\n\t\tconst name = upperFirst(workflow.steps[stepIndex]?.verb)\n\t\treturn stepIndex >= 0 ? `#${stepIndex + 1} ${name}` : selectedTableId\n\t}, [workflow, selectedTableId])\n\n\tuseStepListener(workflow, setSelectedTableId, inputNames)\n\tuseWorkflowOutputListener(workflow, setOutputs)\n\tuseWorkflowListener(workflow, setWorkflow)\n\n\tconst [selectedColumn, setSelectedColumn] = useState<string | undefined>()\n\n\tconst onDelete = useOnDeleteStep(workflow)\n\n\tconst onColumnClick = useCallback(\n\t\t(_?: React.MouseEvent<HTMLElement, MouseEvent>, column?: IColumn) => {\n\t\t\tsetSelectedColumn(column?.name)\n\t\t},\n\t\t[setSelectedColumn],\n\t)\n\n\treturn (\n\t\t<PageContainer className={'prepare-data-page'}>\n\t\t\t<ProjectMgmtCommandBar\n\t\t\t\ttables={inputs}\n\t\t\t\tworkflow={workflow}\n\t\t\t\toutputTables={outputs}\n\t\t\t\tonUpdateWorkflow={setWorkflow}\n\t\t\t\tonUpdateTables={onAddInputTables}\n\t\t\t\tstyles={mgmtStyles}\n\t\t\t/>\n\t\t\t<PrepareDataContainer>\n\t\t\t\t<Container isCollapsed={isCollapsed}>\n\t\t\t\t\t<Main>\n\t\t\t\t\t\t<ButtonContainer>\n\t\t\t\t\t\t\t<TableListBar\n\t\t\t\t\t\t\t\tloading={false}\n\t\t\t\t\t\t\t\tinputs={inputs}\n\t\t\t\t\t\t\t\tderived={outputs}\n\t\t\t\t\t\t\t\tselected={selectedTableId}\n\t\t\t\t\t\t\t\tonSelect={setSelectedTableId}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<HistoryButton\n\t\t\t\t\t\t\t\tonClick={toggleCollapsed}\n\t\t\t\t\t\t\t\ttitle=\"Steps\"\n\t\t\t\t\t\t\t\tsteps={workflow?.steps?.length}\n\t\t\t\t\t\t\t\tshowText={true}\n\t\t\t\t\t\t\t\tstyles={{\n\t\t\t\t\t\t\t\t\troot: { visibility: !isCollapsed ? 'hidden' : 'visible' },\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ButtonContainer>\n\t\t\t\t\t\t<OutputContainer>\n\t\t\t\t\t\t\t{selectedTable?.table && (\n\t\t\t\t\t\t\t\t<DetailsListContainer>\n\t\t\t\t\t\t\t\t\t<ArqueroTableHeader\n\t\t\t\t\t\t\t\t\t\tcommandBar={\n\t\t\t\t\t\t\t\t\t\t\t<TableCommands\n\t\t\t\t\t\t\t\t\t\t\t\tinputTable={selectedTable}\n\t\t\t\t\t\t\t\t\t\t\t\tworkflow={workflow}\n\t\t\t\t\t\t\t\t\t\t\t\tonAddStep={onCreate}\n\t\t\t\t\t\t\t\t\t\t\t\tselectedColumn={selectedColumn}\n\t\t\t\t\t\t\t\t\t\t\t\tonRemoveStep={onDelete}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tname={tableName}\n\t\t\t\t\t\t\t\t\t\ttable={selectedTable?.table}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<ArqueroDetailsList\n\t\t\t\t\t\t\t\t\t\tsortable\n\t\t\t\t\t\t\t\t\t\tcompact\n\t\t\t\t\t\t\t\t\t\tshowColumnBorders\n\t\t\t\t\t\t\t\t\t\tisHeaderFixed\n\t\t\t\t\t\t\t\t\t\tclickableColumns={!!onColumnClick}\n\t\t\t\t\t\t\t\t\t\tselectedColumn={selectedColumn}\n\t\t\t\t\t\t\t\t\t\tonColumnClick={onColumnClick}\n\t\t\t\t\t\t\t\t\t\tmetadata={selectedTable?.metadata}\n\t\t\t\t\t\t\t\t\t\ttable={selectedTable?.table}\n\t\t\t\t\t\t\t\t\t\tfeatures={{ smartHeaders: true }}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</DetailsListContainer>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</OutputContainer>\n\t\t\t\t\t</Main>\n\t\t\t\t\t<HistoryPanel\n\t\t\t\t\t\ttitle=\"Steps\"\n\t\t\t\t\t\tisCollapsed={isCollapsed}\n\t\t\t\t\t\ttoggleCollapsed={toggleCollapsed}\n\t\t\t\t\t\tsteps={workflow.steps}\n\t\t\t\t\t\tshowStepCount\n\t\t\t\t\t>\n\t\t\t\t\t\t<StepHistoryList\n\t\t\t\t\t\t\tonDelete={onDelete}\n\t\t\t\t\t\t\tonSelect={setSelectedTableId}\n\t\t\t\t\t\t\tworkflow={workflow}\n\t\t\t\t\t\t\tonSave={onSave}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</HistoryPanel>\n\t\t\t\t</Container>\n\t\t\t</PrepareDataContainer>\n\t\t</PageContainer>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nexport const SettingsSection = styled.div`\n\tmargin-left: 10px;\n`\n\nexport const H3 = styled.h3`\n\tmargin-bottom: 10px;\n`\n\nexport const HelpSection = styled.div`\n\tmargin-left: 10px;\n\tmargin-top: 20px;\n`\n\nexport const Heading = styled.h2`\n\tmargin-bottom: 10px;\n`\n\nexport const Container = styled.div`\n\tmargin: 8px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { Guidance } from '@datashaper/react'\nimport { Panel, Toggle } from '@fluentui/react'\nimport { memo, useCallback } from 'react'\n\nimport { useGuidanceIndex } from '../hooks/index.js'\nimport { useSettings } from '../states/settings.js'\nimport { useSetDarkMode } from './SettingsPanel.hooks.js'\nimport { H3, HelpSection, SettingsSection } from './SettingsPanel.styles.js'\nimport type { SettingsPanelProps } from './SettingsPanel.types.js'\n\nexport const SettingsPanel: React.FC<SettingsPanelProps> = memo(\n\tfunction SettingsPanel({ isOpen, onDismiss }: SettingsPanelProps) {\n\t\tconst index = useGuidanceIndex()\n\t\tconst [settings, setSettings] = useSettings()\n\t\tconst setDarkMode = useSetDarkMode(settings, setSettings)\n\t\tconst handleDarkModeChange = useCallback(\n\t\t\t(_ev: unknown, checked?: boolean) => void setDarkMode(checked),\n\t\t\t[setDarkMode],\n\t\t)\n\n\t\treturn (\n\t\t\t<Panel\n\t\t\t\tisLightDismiss\n\t\t\t\tisOpen={isOpen}\n\t\t\t\tonDismiss={onDismiss}\n\t\t\t\tcloseButtonAriaLabel=\"Close\"\n\t\t\t\theaderText=\"Menu\"\n\t\t\t>\n\t\t\t\t<SettingsSection>\n\t\t\t\t\t<H3>Settings</H3>\n\t\t\t\t\t<Toggle\n\t\t\t\t\t\tlabel=\"Dark Mode\"\n\t\t\t\t\t\tonText=\"On\"\n\t\t\t\t\t\toffText=\"Off\"\n\t\t\t\t\t\tonChange={handleDarkModeChange}\n\t\t\t\t\t\tchecked={settings.isDarkMode}\n\t\t\t\t\t/>\n\t\t\t\t</SettingsSection>\n\n\t\t\t\t<HelpSection>\n\t\t\t\t\t<H3>Help</H3>\n\t\t\t\t\t<Guidance name={'prepareDataPage'} index={index} />\n\t\t\t\t</HelpSection>\n\t\t\t</Panel>\n\t\t)\n\t},\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Spinner } from '@fluentui/react'\nimport { memo, Suspense } from 'react'\nimport { RecoilRoot } from 'recoil'\n\nimport { Layout } from '../components/Layout.js'\nimport { PrepareDataPage } from '../pages/PrepareDataPage/PrepareDataPage.base.js'\nimport { ErrorBoundary } from './ErrorBoundary.js'\nimport { StyleContext } from './StyleContext.js'\n\nexport const App: React.FC = memo(function App() {\n\treturn (\n\t\t<ErrorBoundary>\n\t\t\t<RecoilRoot>\n\t\t\t\t<Suspense fallback={<Spinner />}>\n\t\t\t\t\t<StyleContext>\n\t\t\t\t\t\t<Layout>\n\t\t\t\t\t\t\t<PrepareDataPage />\n\t\t\t\t\t\t</Layout>\n\t\t\t\t\t</StyleContext>\n\t\t\t\t</Suspense>\n\t\t\t</RecoilRoot>\n\t\t</ErrorBoundary>\n\t)\n})\n"],"names":[],"sourceRoot":""}